Directory structure:
└── radix-ui-colors/
    ├── README.md
    ├── LICENSE
    ├── package.json
    ├── rollup.config.js
    ├── tsconfig.json
    ├── .npmignore
    ├── scripts/
    │   └── build-css-modules.js
    └── src/
        ├── blackA.ts
        ├── dark.ts
        ├── index.ts
        ├── light.ts
        └── whiteA.ts

================================================
File: README.md
================================================
[![Radix Colors Logo](colors.png)](https://radix-ui.com/colors)

# Radix Colors

**A gorgeous, accessible color system.**

---

## Documentation

For full documentation, visit [radix-ui.com/colors/docs](https://radix-ui.com/colors/docs).

## Installation

`yarn add @radix-ui/colors`

## Authors

- Colm Tuite ([@colmtuite](https://twitter.com/colmtuite))
- Vlad Moroz ([@vladyslavmoroz](https://twitter.com/vladyslavmoroz))


================================================
File: LICENSE
================================================
MIT License

Copyright (c) 2021 Radix

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
File: package.json
================================================
{
  "name": "@radix-ui/colors",
  "version": "3.0.0",
  "contributors": [
    "Colm Tuite <colm@workos.com>",
    "Vlad Moroz <vlad@workos.com>"
  ],
  "main": "index.js",
  "module": "index.mjs",
  "types": "types/index.d.ts",
  "scripts": {
    "build": "yarn clean && yarn && rollup -c && yarn build-css-modules",
    "build-css-modules": "node ./scripts/build-css-modules.js",
    "prepublishOnly": "yarn build",
    "postpublish": "yarn clean",
    "clean": "git clean -fdX"
  },
  "keywords": [
    "radix",
    "colors"
  ],
  "sideEffects": false,
  "publishConfig": {
    "access": "public"
  },
  "devDependencies": {
    "@rollup/plugin-typescript": "^8.2.1",
    "@types/node": "^15.0.3",
    "rollup": "^2.48.0",
    "tslib": "^2.2.0",
    "typescript": "^4.2.4"
  },
  "license": "MIT"
}


================================================
File: rollup.config.js
================================================
// rollup.config.js
import typescript from '@rollup/plugin-typescript'

export default {
  input: 'src/index.ts',
  output: [
    {
      file: 'index.js',
      format: 'cjs',
    },
    {
      file: 'index.mjs',
      format: 'es',
    },
  ],
  plugins: [
    typescript({
      tsconfig: './tsconfig.json',
    }),
  ],
}


================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "outDir": ".",
    "declarationDir": "types",
    "module": "esnext",
    "target": "ES2019",
    "lib": ["esnext"],
    "declaration": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "moduleResolution": "node",
    "isolatedModules": true
  },
  "include": ["./src"],
  "exclude": ["/*.css", "/index.js", "/index.mjs"]
}


================================================
File: .npmignore
================================================
/src/
/scripts/
.gitignore
tsconfig.json
rollup.config.js
yarn.lock
package-lock.json


================================================
File: scripts/build-css-modules.js
================================================
const fs = require("fs");
const path = require("path");
const allColorScales = require("../index");

const outputDir = require("../tsconfig.json").compilerOptions.outDir;

const supportsP3AtRule = "@supports (color: color(display-p3 1 1 1))";
const matchesP3MediaRule = "@media (color-gamut: p3)";

Object.keys(allColorScales)
  .filter((key) => !key.includes("P3"))
  .forEach((key) => {
    let selector = ":root, .light, .light-theme";

    if (key === "blackA" || key === "whiteA") {
      selector = ":root";
    }

    if (key.includes("Dark")) {
      selector = ".dark, .dark-theme";
    }

    const srgbValues = Object.entries(allColorScales).find(
      ([name]) => name === key
    )[1];

    const srgbCssProperties = Object.entries(srgbValues)
      .map(([name, value]) => [toCssCasing(name), value])
      .map(([name, value]) => `  --${name}: ${value};`)
      .join("\n");

    const srgbCssRule = `${selector} {\n${srgbCssProperties}\n}`;

    const p3Values = Object.entries(allColorScales).find(
      ([name]) => name === key + "P3" || name === key.replace(/.$/, "P3A")
    )[1];

    const p3CssProperties = Object.entries(p3Values)
      .map(([name, value]) => [toCssCasing(name), value])
      .map(([name, value]) => `      --${name}: ${value};`)
      .join("\n");

    let p3CssRule = `    ${selector} {\n${p3CssProperties}\n    }`;
    p3CssRule = `  ${matchesP3MediaRule} {\n${p3CssRule}\n  }`;
    p3CssRule = `${supportsP3AtRule} {\n${p3CssRule}\n}`;

    fs.writeFileSync(
      path.join(outputDir, toFileName(key) + ".css"),
      `${srgbCssRule}\n\n${p3CssRule}`
    );
  });

function toCssCasing(str) {
  return str
    .replace(/([a-z])(\d)/, "$1-$2")
    .replace(/([A-Z])/g, "-$1")
    .toLowerCase();
}

function toFileName(str) {
  return toCssCasing(str).replace(/-a$/, "-alpha");
}


================================================
File: src/blackA.ts
================================================
export const blackA = {
  blackA1: "rgba(0, 0, 0, 0.05)",
  blackA2: "rgba(0, 0, 0, 0.1)",
  blackA3: "rgba(0, 0, 0, 0.15)",
  blackA4: "rgba(0, 0, 0, 0.2)",
  blackA5: "rgba(0, 0, 0, 0.3)",
  blackA6: "rgba(0, 0, 0, 0.4)",
  blackA7: "rgba(0, 0, 0, 0.5)",
  blackA8: "rgba(0, 0, 0, 0.6)",
  blackA9: "rgba(0, 0, 0, 0.7)",
  blackA10: "rgba(0, 0, 0, 0.8)",
  blackA11: "rgba(0, 0, 0, 0.9)",
  blackA12: "rgba(0, 0, 0, 0.95)",
};

export const blackP3A = {
  blackA1: "color(display-p3 0 0 0 / 0.05)",
  blackA2: "color(display-p3 0 0 0 / 0.1)",
  blackA3: "color(display-p3 0 0 0 / 0.15)",
  blackA4: "color(display-p3 0 0 0 / 0.2)",
  blackA5: "color(display-p3 0 0 0 / 0.3)",
  blackA6: "color(display-p3 0 0 0 / 0.4)",
  blackA7: "color(display-p3 0 0 0 / 0.5)",
  blackA8: "color(display-p3 0 0 0 / 0.6)",
  blackA9: "color(display-p3 0 0 0 / 0.7)",
  blackA10: "color(display-p3 0 0 0 / 0.8)",
  blackA11: "color(display-p3 0 0 0 / 0.9)",
  blackA12: "color(display-p3 0 0 0 / 0.95)",
};


================================================
File: src/index.ts
================================================
export * from "./dark";
export * from "./light";
export * from "./blackA";
export * from "./whiteA";


================================================
File: src/whiteA.ts
================================================
export const whiteA = {
  whiteA1: "rgba(255, 255, 255, 0.05)",
  whiteA2: "rgba(255, 255, 255, 0.1)",
  whiteA3: "rgba(255, 255, 255, 0.15)",
  whiteA4: "rgba(255, 255, 255, 0.2)",
  whiteA5: "rgba(255, 255, 255, 0.3)",
  whiteA6: "rgba(255, 255, 255, 0.4)",
  whiteA7: "rgba(255, 255, 255, 0.5)",
  whiteA8: "rgba(255, 255, 255, 0.6)",
  whiteA9: "rgba(255, 255, 255, 0.7)",
  whiteA10: "rgba(255, 255, 255, 0.8)",
  whiteA11: "rgba(255, 255, 255, 0.9)",
  whiteA12: "rgba(255, 255, 255, 0.95)",
};

export const whiteP3A = {
  whiteA1: "color(display-p3 1 1 1 / 0.05)",
  whiteA2: "color(display-p3 1 1 1 / 0.1)",
  whiteA3: "color(display-p3 1 1 1 / 0.15)",
  whiteA4: "color(display-p3 1 1 1 / 0.2)",
  whiteA5: "color(display-p3 1 1 1 / 0.3)",
  whiteA6: "color(display-p3 1 1 1 / 0.4)",
  whiteA7: "color(display-p3 1 1 1 / 0.5)",
  whiteA8: "color(display-p3 1 1 1 / 0.6)",
  whiteA9: "color(display-p3 1 1 1 / 0.7)",
  whiteA10: "color(display-p3 1 1 1 / 0.8)",
  whiteA11: "color(display-p3 1 1 1 / 0.9)",
  whiteA12: "color(display-p3 1 1 1 / 0.95)",
};


