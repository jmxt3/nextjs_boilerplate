Directory structure:
└── radix-ui-themes/
    ├── README.md
    ├── CODE_OF_CONDUCT.md
    ├── LICENSE
    ├── package.json
    ├── pnpm-lock.yaml
    ├── pnpm-workspace.yaml
    ├── release-process.md
    ├── turbo.json
    ├── .npmrc
    ├── .nvmrc
    ├── .prettierrc
    ├── apps/
    │   └── playground/
    │       ├── css.d.ts
    │       ├── next-env.d.ts
    │       ├── next.config.js
    │       ├── package.json
    │       ├── tsconfig.json
    │       ├── .gitignore
    │       ├── app/
    │       │   ├── globals.css
    │       │   ├── layout.tsx
    │       │   ├── next-theme-provider.tsx
    │       │   ├── api/
    │       │   │   └── avatar/
    │       │   │       └── route.ts
    │       │   ├── demo/
    │       │   │   ├── page.module.css
    │       │   │   ├── page.tsx
    │       │   │   ├── radix-themes-video-script.md
    │       │   │   └── users.ts
    │       │   ├── ghost-balance/
    │       │   │   └── page.tsx
    │       │   ├── home-os/
    │       │   │   ├── page.module.css
    │       │   │   └── page.tsx
    │       │   ├── sink/
    │       │   │   ├── hide-cursor.tsx
    │       │   │   ├── page.module.css
    │       │   │   ├── page.tsx
    │       │   │   ├── pointer-cursors-checkbox.tsx
    │       │   │   ├── radix-logo.tsx
    │       │   │   └── tab-nav-demo.tsx
    │       │   ├── snapshot/
    │       │   │   ├── image-card.tsx
    │       │   │   ├── page.module.css
    │       │   │   └── page.tsx
    │       │   ├── test-appearance/
    │       │   │   └── page.tsx
    │       │   ├── test-as-child/
    │       │   │   └── page.tsx
    │       │   ├── test-avatar/
    │       │   │   └── page.tsx
    │       │   ├── test-checkbox-card/
    │       │   │   └── page.tsx
    │       │   ├── test-classic-button/
    │       │   │   └── page.tsx
    │       │   ├── test-data-list/
    │       │   │   └── page.tsx
    │       │   ├── test-dialog/
    │       │   │   └── page.tsx
    │       │   ├── test-grid-area/
    │       │   │   └── page.tsx
    │       │   ├── test-high-contrast/
    │       │   │   └── page.tsx
    │       │   ├── test-inset/
    │       │   │   └── page.tsx
    │       │   ├── test-radio-card/
    │       │   │   └── page.tsx
    │       │   ├── test-reset/
    │       │   │   └── page.tsx
    │       │   ├── test-responsive/
    │       │   │   └── page.tsx
    │       │   ├── test-skeleton/
    │       │   │   └── page.tsx
    │       │   ├── test-tabnav/
    │       │   │   ├── layout.tsx
    │       │   │   ├── nav.tsx
    │       │   │   ├── (accounts)/
    │       │   │   │   └── page.tsx
    │       │   │   ├── documents/
    │       │   │   │   └── page.tsx
    │       │   │   └── settings/
    │       │   │       └── page.tsx
    │       │   ├── test-text-wrap/
    │       │   │   └── page.tsx
    │       │   ├── test-textfield/
    │       │   │   └── page.tsx
    │       │   ├── test-theme-toggle/
    │       │   │   └── page.tsx
    │       │   └── test-webkit-tap-highlight-color/
    │       │       └── page.tsx
    │       └── components/
    │           ├── loading-buttons.tsx
    │           └── snapshot-logo.tsx
    ├── packages/
    │   └── radix-ui-themes/
    │       ├── README.md
    │       ├── changelog.md
    │       ├── eslint.config.mjs
    │       ├── package.json
    │       ├── postcss-breakpoints.cjs
    │       ├── postcss-whitespace.cjs
    │       ├── postcss.config.cjs
    │       ├── tsconfig.json
    │       ├── .browserslistrc
    │       ├── .stylelintrc.cjs
    │       ├── scripts/
    │       │   ├── esbuild-cjs.js
    │       │   ├── esbuild-esm.js
    │       │   └── package.json
    │       └── src/
    │           ├── index.ts
    │           ├── components/
    │           │   ├── accessible-icon.tsx
    │           │   ├── alert-dialog.css
    │           │   ├── alert-dialog.props.tsx
    │           │   ├── alert-dialog.tsx
    │           │   ├── animations.css
    │           │   ├── aspect-ratio.tsx
    │           │   ├── avatar.css
    │           │   ├── avatar.props.tsx
    │           │   ├── avatar.tsx
    │           │   ├── badge.css
    │           │   ├── badge.props.tsx
    │           │   ├── badge.tsx
    │           │   ├── blockquote.css
    │           │   ├── blockquote.props.tsx
    │           │   ├── blockquote.tsx
    │           │   ├── box.css
    │           │   ├── box.props.tsx
    │           │   ├── box.tsx
    │           │   ├── button.css
    │           │   ├── button.props.tsx
    │           │   ├── button.tsx
    │           │   ├── callout.css
    │           │   ├── callout.props.tsx
    │           │   ├── callout.tsx
    │           │   ├── card.css
    │           │   ├── card.props.tsx
    │           │   ├── card.tsx
    │           │   ├── checkbox-cards.css
    │           │   ├── checkbox-cards.props.tsx
    │           │   ├── checkbox-cards.tsx
    │           │   ├── checkbox-group.css
    │           │   ├── checkbox-group.primitive.tsx
    │           │   ├── checkbox-group.props.tsx
    │           │   ├── checkbox-group.tsx
    │           │   ├── checkbox.css
    │           │   ├── checkbox.props.tsx
    │           │   ├── checkbox.tsx
    │           │   ├── code.css
    │           │   ├── code.props.tsx
    │           │   ├── code.tsx
    │           │   ├── container.css
    │           │   ├── container.props.tsx
    │           │   ├── container.tsx
    │           │   ├── context-menu.css
    │           │   ├── context-menu.props.tsx
    │           │   ├── context-menu.tsx
    │           │   ├── data-list.css
    │           │   ├── data-list.props.tsx
    │           │   ├── data-list.tsx
    │           │   ├── dialog.css
    │           │   ├── dialog.props.tsx
    │           │   ├── dialog.tsx
    │           │   ├── dropdown-menu.css
    │           │   ├── dropdown-menu.props.tsx
    │           │   ├── dropdown-menu.tsx
    │           │   ├── em.css
    │           │   ├── em.props.tsx
    │           │   ├── em.tsx
    │           │   ├── flex.css
    │           │   ├── flex.props.tsx
    │           │   ├── flex.tsx
    │           │   ├── grid.css
    │           │   ├── grid.props.tsx
    │           │   ├── grid.tsx
    │           │   ├── heading.css
    │           │   ├── heading.props.tsx
    │           │   ├── heading.tsx
    │           │   ├── hover-card.css
    │           │   ├── hover-card.props.tsx
    │           │   ├── hover-card.tsx
    │           │   ├── icon-button.css
    │           │   ├── icon-button.props.tsx
    │           │   ├── icon-button.tsx
    │           │   ├── icons.tsx
    │           │   ├── index.css
    │           │   ├── index.tsx
    │           │   ├── inset.css
    │           │   ├── inset.props.tsx
    │           │   ├── inset.tsx
    │           │   ├── kbd.css
    │           │   ├── kbd.props.tsx
    │           │   ├── kbd.tsx
    │           │   ├── layout.css
    │           │   ├── link.css
    │           │   ├── link.props.tsx
    │           │   ├── link.tsx
    │           │   ├── popover.css
    │           │   ├── popover.props.tsx
    │           │   ├── popover.tsx
    │           │   ├── portal.tsx
    │           │   ├── progress.css
    │           │   ├── progress.props.tsx
    │           │   ├── progress.tsx
    │           │   ├── quote.css
    │           │   ├── quote.props.tsx
    │           │   ├── quote.tsx
    │           │   ├── radio-cards.css
    │           │   ├── radio-cards.props.tsx
    │           │   ├── radio-cards.tsx
    │           │   ├── radio-group.css
    │           │   ├── radio-group.props.tsx
    │           │   ├── radio-group.tsx
    │           │   ├── radio.css
    │           │   ├── radio.props.tsx
    │           │   ├── radio.tsx
    │           │   ├── reset.css
    │           │   ├── reset.tsx
    │           │   ├── scroll-area.css
    │           │   ├── scroll-area.props.tsx
    │           │   ├── scroll-area.tsx
    │           │   ├── section.css
    │           │   ├── section.props.tsx
    │           │   ├── section.tsx
    │           │   ├── segmented-control.css
    │           │   ├── segmented-control.props.tsx
    │           │   ├── segmented-control.tsx
    │           │   ├── select.css
    │           │   ├── select.props.tsx
    │           │   ├── select.tsx
    │           │   ├── separator.css
    │           │   ├── separator.props.tsx
    │           │   ├── separator.tsx
    │           │   ├── skeleton.css
    │           │   ├── skeleton.props.tsx
    │           │   ├── skeleton.tsx
    │           │   ├── slider.css
    │           │   ├── slider.props.tsx
    │           │   ├── slider.tsx
    │           │   ├── slot.tsx
    │           │   ├── spinner.css
    │           │   ├── spinner.props.tsx
    │           │   ├── spinner.tsx
    │           │   ├── strong.css
    │           │   ├── strong.props.tsx
    │           │   ├── strong.tsx
    │           │   ├── switch.css
    │           │   ├── switch.props.tsx
    │           │   ├── switch.tsx
    │           │   ├── tab-nav.css
    │           │   ├── tab-nav.props.tsx
    │           │   ├── tab-nav.tsx
    │           │   ├── table.css
    │           │   ├── table.props.tsx
    │           │   ├── table.tsx
    │           │   ├── tabs.css
    │           │   ├── tabs.props.tsx
    │           │   ├── tabs.tsx
    │           │   ├── text-area.css
    │           │   ├── text-area.props.tsx
    │           │   ├── text-area.tsx
    │           │   ├── text-field.css
    │           │   ├── text-field.props.tsx
    │           │   ├── text-field.tsx
    │           │   ├── text.css
    │           │   ├── text.props.tsx
    │           │   ├── text.tsx
    │           │   ├── theme-panel.css
    │           │   ├── theme-panel.tsx
    │           │   ├── theme.props.tsx
    │           │   ├── theme.tsx
    │           │   ├── tooltip.css
    │           │   ├── tooltip.props.tsx
    │           │   ├── tooltip.tsx
    │           │   ├── visually-hidden.tsx
    │           │   └── _internal/
    │           │       ├── base-button.css
    │           │       ├── base-button.props.ts
    │           │       ├── base-button.tsx
    │           │       ├── base-card.css
    │           │       ├── base-checkbox.css
    │           │       ├── base-checkbox.props.ts
    │           │       ├── base-dialog.css
    │           │       ├── base-menu.css
    │           │       ├── base-menu.props.ts
    │           │       ├── base-radio.css
    │           │       ├── base-radio.props.ts
    │           │       ├── base-tab-list.css
    │           │       └── base-tab-list.props.ts
    │           ├── helpers/
    │           │   ├── component-props.ts
    │           │   ├── extract-margin-props.ts
    │           │   ├── extract-props.ts
    │           │   ├── get-margin-styles.ts
    │           │   ├── get-matching-gray-color.ts
    │           │   ├── get-responsive-styles.ts
    │           │   ├── get-subtree.ts
    │           │   ├── has-own-property.ts
    │           │   ├── index.ts
    │           │   ├── inert.ts
    │           │   ├── input-attributes.ts
    │           │   ├── is-responsive-object.ts
    │           │   ├── map-prop-values.ts
    │           │   ├── merge-styles.ts
    │           │   └── require-react-element.ts
    │           ├── props/
    │           │   ├── as-child.prop.ts
    │           │   ├── color.prop.ts
    │           │   ├── gap.props.ts
    │           │   ├── height.props.ts
    │           │   ├── high-contrast.prop.ts
    │           │   ├── index.ts
    │           │   ├── layout.props.ts
    │           │   ├── leading-trim.prop.ts
    │           │   ├── margin.props.ts
    │           │   ├── padding.props.ts
    │           │   ├── prop-def.ts
    │           │   ├── radius.prop.ts
    │           │   ├── text-align.prop.ts
    │           │   ├── text-wrap.prop.ts
    │           │   ├── truncate.prop.ts
    │           │   ├── weight.prop.ts
    │           │   └── width.props.ts
    │           └── styles/
    │               ├── breakpoints.css
    │               ├── index.css
    │               ├── layout.css
    │               ├── tokens/
    │               │   ├── base.css
    │               │   ├── color.css
    │               │   ├── cursor.css
    │               │   ├── index.css
    │               │   ├── layout.css
    │               │   ├── radius.css
    │               │   ├── scaling.css
    │               │   ├── shadow.css
    │               │   ├── space.css
    │               │   ├── typography.css
    │               │   └── colors/
    │               │       ├── amber.css
    │               │       ├── blue.css
    │               │       ├── bronze.css
    │               │       ├── brown.css
    │               │       ├── crimson.css
    │               │       ├── cyan.css
    │               │       ├── gold.css
    │               │       ├── grass.css
    │               │       ├── gray.css
    │               │       ├── green.css
    │               │       ├── indigo.css
    │               │       ├── iris.css
    │               │       ├── jade.css
    │               │       ├── lime.css
    │               │       ├── mauve.css
    │               │       ├── mint.css
    │               │       ├── olive.css
    │               │       ├── orange.css
    │               │       ├── pink.css
    │               │       ├── plum.css
    │               │       ├── purple.css
    │               │       ├── red.css
    │               │       ├── ruby.css
    │               │       ├── sage.css
    │               │       ├── sand.css
    │               │       ├── sky.css
    │               │       ├── slate.css
    │               │       ├── teal.css
    │               │       ├── tomato.css
    │               │       ├── violet.css
    │               │       └── yellow.css
    │               └── utilities/
    │                   ├── align-items.css
    │                   ├── align-self.css
    │                   ├── display.css
    │                   ├── flex-basis.css
    │                   ├── flex-direction.css
    │                   ├── flex-grow.css
    │                   ├── flex-shrink.css
    │                   ├── flex-wrap.css
    │                   ├── font-weight.css
    │                   ├── gap.css
    │                   ├── grid-area.css
    │                   ├── grid-auto-flow.css
    │                   ├── grid-column-end.css
    │                   ├── grid-column-start.css
    │                   ├── grid-column.css
    │                   ├── grid-row-end.css
    │                   ├── grid-row-start.css
    │                   ├── grid-row.css
    │                   ├── grid-template-areas.css
    │                   ├── grid-template-columns.css
    │                   ├── grid-template-rows.css
    │                   ├── height.css
    │                   ├── index.css
    │                   ├── inset.css
    │                   ├── justify-content.css
    │                   ├── layout.css
    │                   ├── leading-trim.css
    │                   ├── margin.css
    │                   ├── max-height.css
    │                   ├── max-width.css
    │                   ├── min-height.css
    │                   ├── min-width.css
    │                   ├── overflow.css
    │                   ├── padding.css
    │                   ├── position.css
    │                   ├── resize.css
    │                   ├── table-layout.css
    │                   ├── text-align.css
    │                   ├── text-wrap.css
    │                   ├── truncate.css
    │                   ├── vertical-align.css
    │                   └── width.css
    └── .github/
        ├── CONTRIBUTING.md
        └── PULL_REQUEST_TEMPLATE.md

================================================
File: README.md
================================================
[![Radix Themes Logo](https://radix-ui.com/social/themes.png)](https://radix-ui.com/themes)

# Radix Themes

**An open-source component library optimized for fast development, easy maintenance, and accessibility.**

---

## Documentation

For full documentation, visit [radix-ui.com/themes/docs](https://radix-ui.com/themes/docs).

## Releases

For changelog, visit [radix-ui.com/themes/docs/overview/releases](https://radix-ui.com/themes/docs/overview/releases).

## Authors

- Benoît Grélard ([@benoitgrelard](https://twitter.com/benoitgrelard))
- Vlad Moroz ([@vladyslavmoroz](https://twitter.com/vladyslavmoroz))
- Andy Hook ([@Andy_Hook](https://twitter.com/Andy_Hook))
- Lucas Motta ([@elmotta](https://twitter.com/elmotta))

---

## Community

See our [contribution guidelines](./.github/CONTRIBUTING.md) for information on local development and creating a pull request.

- [Github Discussions](https://github.com/radix-ui/themes/discussions) - Ask questions and get answers from other community members.
- [Discord](https://discord.com/invite/7Xb99uG) - To get involved with the Radix community, ask questions and share tips.
- [Twitter](https://twitter.com/radix_ui) - To receive updates, announcements, blog posts, and general Radix tips.

## License

Licensed under the MIT License, Copyright © 2023-present [WorkOS](https://workos.com).

See [LICENSE](./LICENSE) for more information.


================================================
File: CODE_OF_CONDUCT.md
================================================
# Contributor Covenant Code of Conduct

## Our Pledge

In the interest of fostering an open and welcoming environment, we as
contributors and maintainers pledge to making participation in our project and
our community a harassment-free experience for everyone, regardless of age, body
size, disability, ethnicity, sex characteristics, gender identity and expression,
level of experience, education, socio-economic status, nationality, personal
appearance, race, religion, or sexual identity and orientation.

## Our Standards

Examples of behavior that contributes to creating a positive environment
include:

- Using welcoming and inclusive language
- Being respectful of differing viewpoints and experiences
- Gracefully accepting constructive criticism
- Focusing on what is best for the community
- Showing empathy towards other community members

Examples of unacceptable behavior by participants include:

- The use of sexualized language or imagery and unwelcome sexual attention or
  advances
- Trolling, insulting/derogatory comments, and personal or political attacks
- Public or private harassment
- Publishing others' private information, such as a physical or electronic
  address, without explicit permission
- Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Our Responsibilities

Project maintainers are responsible for clarifying the standards of acceptable
behavior and are expected to take appropriate and fair corrective action in
response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or
reject comments, commits, code, wiki edits, issues, and other contributions
that are not aligned to this Code of Conduct, or to ban temporarily or
permanently any contributor for other behaviors that they deem inappropriate,
threatening, offensive, or harmful.

## Scope

This Code of Conduct applies both within project spaces and in public spaces
when an individual is representing the project or its community. Examples of
representing a project or community include using an official project e-mail
address, posting via an official social media account, or acting as an appointed
representative at an online or offline event. Representation of a project may be
further defined and clarified by project maintainers.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported by contacting the project team at colm@workos.com. All
complaints will be reviewed and investigated and will result in a response that
is deemed necessary and appropriate to the circumstances. The project team is
obligated to maintain confidentiality with regard to the reporter of an incident.
Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good
faith may face temporary or permanent repercussions as determined by other
members of the project's leadership.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,
available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see
https://www.contributor-covenant.org/faq


================================================
File: LICENSE
================================================
MIT License

Copyright (c) 2023 WorkOS

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
File: package.json
================================================
{
  "name": "monorepo",
  "private": true,
  "packageManager": "pnpm@10.0.0",
  "scripts": {
    "build": "turbo run build",
    "build:pkg": "pnpm --filter @radix-ui/themes build",
    "dev": "turbo run dev --no-cache --continue",
    "lint": "turbo run lint",
    "clean": "turbo run clean && rm -rf node_modules .turbo"
  },
  "devDependencies": {
    "@types/node": "^20.16.10",
    "@types/react": "^19.0.2",
    "@types/react-dom": "^19.0.2",
    "prettier": "^3.4.2",
    "turbo": "^2.3.3",
    "typescript": "^5.7.2"
  },
  "pnpm": {
    "overrides": {
      "string-width": "4.2.3"
    }
  }
}


================================================
File: pnpm-workspace.yaml
================================================
packages:
  - 'apps/*'
  - 'packages/*'


================================================
File: release-process.md
================================================
# Release process

> This is a work-in-progress document and will be updated as we refine our release process.

## Release strategy

We track versions during the pull request process. As features are added, modified or improved it's important to keep track of these via versioning.

### Tracking version changes

This is currently done manually. PRs that fix bugs or add features should include an addition to `packages/radix-ui-themes/changelog.md` under a new version heading. The actual release version may differ, so be sure to double check this at publish time.

### Publishing a stable release

1. Checkout latest `main`
2. Run `pnpm clean && pnpm i && pnpm build:pkg`
3. Run `pnpm lint` and ensure there are no errors
4. Update the version in `packages/radix-ui-themes/package.json` and ensure the changelog is up to date
5. Run `pnpm publish -r` to publish the new version

- If publishing a pre-release version, use `pnpm publish -r --tag <tag>`, where `<tag>` is the pre-release tag (e.g. `alpha`, `beta`, `rc`)

## Updating documentation

Our documentation is in a [separate repository](https://github.com/radix-ui/website) and updating it is a three step process:

1. Write and update the [change log](https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/releases.mdx)
2. Bump package version/s and create / update the pages for each version change
3. Perform documentation updates and remove live demos from previous versions


================================================
File: turbo.json
================================================
{
  "$schema": "https://turbo.build/schema.json",
  "tasks": {
    "build": {
      "inputs": ["$TURBO_DEFAULT$", ".env*"],
      "dependsOn": ["^build"],
      "outputs": ["dist/**", ".next/**", "!.next/cache/**"]
    },
    "test": {
      "outputs": ["coverage/**"],
      "dependsOn": []
    },
    "lint": {},
    "dev": {
      "dependsOn": ["^build"],
      "cache": false,
      "persistent": true
    },
    "clean": {
      "cache": false
    }
  }
}


================================================
File: .npmrc
================================================
use-beta-cli=true


================================================
File: .nvmrc
================================================
22


================================================
File: .prettierrc
================================================
{
  "printWidth": 100,
  "singleQuote": true,
  "overrides": [
    {
      "files": "*.css",
      "options": {
        "printWidth": 120
      }
    }
  ]
}


================================================
File: apps/playground/css.d.ts
================================================
// My css.d.ts file
import type * as CSS from 'csstype';

declare module 'csstype' {
  interface Properties {
    // WebkitRocketLauncher?: string;

    // Add a CSS Custom Property
    // '--theme-color'?: 'black' | 'white';

    // Allow namespaced CSS Custom Properties
    // [index: `--theme-${string}`]: any;

    // Allow any CSS Custom Properties
    [index: `--${string}`]: any;

    // ...or allow any other property
    // [index: string]: any;
  }
}


================================================
File: apps/playground/next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


================================================
File: apps/playground/next.config.js
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  transpilePackages: ['@radix-ui/themes'],
  async redirects() {
    return [
      {
        source: '/',
        destination: '/sink',
        permanent: false,
      },
    ];
  },
};

module.exports = nextConfig;


================================================
File: apps/playground/package.json
================================================
{
  "name": "playground",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "clean": "rm -rf node_modules .next .turbo",
    "lint": "tsc --noEmit"
  },
  "dependencies": {
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/themes": "workspace:*",
    "next": "^15.1.2",
    "next-themes": "0.2.1",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-use": "^17.6.0",
    "seedrandom": "3.0.5"
  },
  "devDependencies": {
    "typescript": "^5.7.2"
  }
}


================================================
File: apps/playground/tsconfig.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "compilerOptions": {
    "composite": false,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "Bundler",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "plugins": [{ "name": "next" }],
    "allowJs": true,
    "declaration": false,
    "declarationMap": false,
    "incremental": true,
    "jsx": "preserve",
    "lib": ["dom", "dom.iterable", "esnext"],
    "module": "ESNext",
    "noEmit": true,
    "resolveJsonModule": true,
    "strict": false,
    "target": "es5",
    "strictNullChecks": true
  },
  "include": ["src", "next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


================================================
File: apps/playground/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem
tsconfig.tsbuildinfo

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env.local
.env.development.local
.env.test.local
.env.production.local

# vercel
.vercel


================================================
File: apps/playground/app/globals.css
================================================
body {
  margin: 0;
}


================================================
File: apps/playground/app/layout.tsx
================================================
import * as React from 'react';
import './globals.css';
import '@radix-ui/themes/styles.css';

export const metadata = {
  title: 'Radix Themes playground',
  description: 'A playground of Radix Themes components',
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return children;
}


================================================
File: apps/playground/app/next-theme-provider.tsx
================================================
'use client';

import { ThemeProvider } from 'next-themes';

export function NextThemeProvider({ children }) {
  return <ThemeProvider attribute="class">{children}</ThemeProvider>;
}


================================================
File: apps/playground/app/api/avatar/route.ts
================================================
import { NextResponse } from 'next/server';

async function wait(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

export async function GET() {
  await wait(1000);
  return NextResponse.redirect(
    'https://images.unsplash.com/photo-1492633423870-43d1cd2775eb?&w=160&h=160&dpr=2&q=80'
  );
}


================================================
File: apps/playground/app/demo/page.module.css
================================================
.body :global(.rt-DialogContent) {
  max-width: 400px;
}

.body :global(#root) {
  padding: 100px 400px;
}

.body :global(.rt-SelectTrigger) {
  width: 100%;
}


================================================
File: apps/playground/app/demo/page.tsx
================================================
import * as React from 'react';
import {
  Theme,
  //
  Avatar,
  Flex,
  Separator,
  Text,
  Button,
  IconButton,
  Dialog,
  TextField,
  Select,
  //
  ThemePanel,
} from '@radix-ui/themes';
import { Pencil1Icon } from '@radix-ui/react-icons';
import { users } from './users';
import styles from './page.module.css';

export default function Demo() {
  return (
    <html lang="en">
      <body className={styles.body}>
        <Theme asChild appearance="dark" accentColor="mint" radius="large" scaling="110%">
          <div id="root">
            <ThemePanel />

            {users.map((user) => (
              <React.Fragment key={user.id}>
                <Flex align="center" justify="between">
                  <Flex align="center" gap="3">
                    <Avatar src={user.image} fallback={user.name[0]} radius="full" />
                    <Flex direction="column">
                      <Text size="2">{user.name}</Text>
                      <Text size="1" color="gray">
                        {user.handle}
                      </Text>
                    </Flex>
                  </Flex>
                  <Dialog.Root>
                    <Dialog.Trigger>
                      <IconButton aria-label="Edit user" variant="soft">
                        <Pencil1Icon />
                      </IconButton>
                    </Dialog.Trigger>
                    <Dialog.Content>
                      <Dialog.Title>{user.name}</Dialog.Title>
                      <Dialog.Description mb="5">Edit and save details below.</Dialog.Description>

                      <Text size="1" weight="bold" color="gray" mb="1">
                        Name
                      </Text>
                      <TextField.Root defaultValue={user.name} mb="2" />
                      <Text size="1" weight="bold" color="gray" mb="1">
                        Role
                      </Text>
                      <Select.Root defaultValue={user.role}>
                        <Select.Trigger />
                        <Select.Content variant="soft" color="gray">
                          <Select.Item value="viewer">Viewer</Select.Item>
                          <Select.Item value="maintainer">Maintainer</Select.Item>
                          <Select.Item value="contributor">Contributor</Select.Item>
                          <Select.Item value="admin">Admin</Select.Item>
                        </Select.Content>
                      </Select.Root>

                      <Flex justify="end" gap="3" mt="5">
                        <Dialog.Close>
                          <Button variant="soft" color="gray">
                            Cancel
                          </Button>
                        </Dialog.Close>
                        <Dialog.Close>
                          <Button variant="solid">Save</Button>
                        </Dialog.Close>
                      </Flex>
                    </Dialog.Content>
                  </Dialog.Root>
                </Flex>
                <Separator size="4" my="3" />
              </React.Fragment>
            ))}
          </div>
        </Theme>
      </body>
    </html>
  );
}


================================================
File: apps/playground/app/demo/radix-themes-video-script.md
================================================
Before this demo: Stephen introduces Radix Themes

# Radix Themes demo

## Intro

Hi, I'm Benoît, a frontend engineer at WorkOS and maintainer of Radix UI.
I am super excited to take you through a demo of Radix Themes.

## Birds eye view

https://themes-playground.modulz-deploys.com/sink

- Let's first take a birds eye view by looking at this page where we showcase all the components with their different sizes, variants and colors.
- We've already added most of the Radix primitives. Overlay components such as: `AlertDialog`, `HoverCard`, `Popover`…
- …as well as our menu components: `DropdownMenu`, `ContextMenu` in multiple variants
- We've also made available all of form primitives such as: `Select`, `Switch`, `Slider`, and others
- But we've also added more components that didn't necessarily have a place in Radix primitives. For example you will find `Button` with many variants, `IconButton`, `TextField`, `TextArea`…
- …as well as other presentational components such as `Badge`, `Avatar`, typgraphic components and many more.

- You have probably noticed by now that all of the components I have shown you have a consistent look and feel. This is because they are configured to use a default Radix color scale, in this case indigo.
- Now let's take a look at how we can customize this and open the customization panel.
- Here we can see that we can pick any of the Radix color scales, and every single component adapts accordingly.
- I can also toggle dark mode and once again everything looks beautiful and accessible out of the box thanks to Radix colors.
- We can also configure a radius style globally, for example if we pick "full", we can see that all of the components are now fully rounded.
- Of course, each of those settings can also be configured per componenent instance.
- There are other options we can play with as well, but we will get back to that in the following live demo.

- Let's jump right in!

## Live coding demo

https://themes-playground.modulz-deploys.com/demo

In this demo we are going to build a screen which lists users and allows to edit them inside a dialog.

- I have prepared a Next.js 13 app with the new app router
- Here I have a blank page shell to get us started
- Let's install Radix Themes (video of `npm install @radix-ui/themes`)
- I also have some data for a list of users we can pull in, let's render them:
  - Map over users
  - Add fragment with key
  - Add `Avatar` with `src` and `fallback`
  - Add `Flex`, name, handle
  - Wrap name & handle in another `Flex` to stack them vertically
  - Let's add a `Separator` in between each user
  - And just like that we've already got a beautiful list of users
- Now we want to add a dialog to edit the user
  - Let's first add a button, we'll use `IconButton` to keep things clean
  - We want it to be at the end of the row, so let's use another `Flex` (with `justify="end"`)
  - Let's wrap a `Dialog` around our button and add a title and description (`DialogRoot`, `DialogContent`, `DialogTitle`, `DialogDescription`)
  - Let's add some buttons to operate our `Dialog`
    - `Flex` wrapper (with `justify="end"`, `gap="3"`, `mt="5"`)
    - Cancel (`soft` gray variant)
    - Save
  - Let's add a `TextField` and `Label` for the name
  - Now we can copy this block and display the user's role
  - A `Select` would be more appropriate here, so let's use that instead (`SelectRoot`, `SelectItem`)
  - And just like that we have built a complex UI with beautiful components and accessibility baked in
  - But there's more, let's see how we can now customize the overall look, or even specific components
    - Pull up the customisation panel
    - Turn on dark mode
    - Pick a different color scale, background/foreground feel (I like dark / lime / natural)
    - Show off radius: none, then radius: full, then back to medium
    - Let's make everything larger too
    - We'd like Avatar to be a circle regardless, let's override it
    - We've now tailored the style to our needs!

## Outro

video of https://themes-playground.modulz-deploys.com/showcase in the background

This was just a small taste of what Radix Themes can do for you.
We hope you'll give it a try and let us know what you think!

<!-- slide showing install and link -->

You can install it today with `npm install @radix-ui/themes` and learn more about it on our website at radix-ui.com/themes.


================================================
File: apps/playground/app/demo/users.ts
================================================
type User = {
  id: string;
  image?: string;
  name: string;
  handle: string;
  role: 'admin' | 'maintainer' | 'contributor' | 'viewer';
};

export const users: User[] = [
  {
    id: 'user1',
    image: avatar('1544005313-94ddf0286df2'),
    name: 'Emmeline Labrie',
    handle: '@emmeline_labrie',
    role: 'contributor',
  },
  {
    id: 'user2',
    image: avatar('1522075469751-3a6694fb2f61'),
    name: 'Zac Wight',
    handle: '@zacwight',
    role: 'admin',
  },
  {
    id: 'user3',
    image: avatar('1632765854612-9b02b6ec2b15', { x: 0.4, y: 0.35, zoom: 1.05 }),
    name: 'Zahra Ambessa',
    handle: '@zahraambessa',
    role: 'viewer',
  },
  {
    id: 'user4',
    image: avatar('1533933269825-da140ad3132f', { y: 0.46, zoom: 1.25 }),
    name: 'Tilde Thygesen',
    handle: '@tildethygesen',
    role: 'maintainer',
  },
  {
    id: 'user5',
    name: 'Joaquin Verdugo',
    handle: '@joaquinverdugo',
    role: 'viewer',
  },
  {
    id: 'user6',
    image: avatar('1496345875659-11f7dd282d1d', { x: 0.49, y: 0.5, zoom: 2.5 }),
    name: 'Craig Caldwell',
    handle: '@craigcaldwell',
    role: 'contributor',
  },
  {
    id: 'user7',
    name: 'Harrison Mellor',
    handle: '@harrison_mellor',
    role: 'viewer',
  },
];

//
//
//
//
//
//
//
function avatar(id: string, params?: { x?: number; y?: number; zoom?: number }) {
  let crop = '';
  if (params === undefined) {
    crop = 'faces';
  } else {
    const { x = 0.5, y = 0.5, zoom = 1 } = params ?? {};
    crop = `focalpoint&fp-x=${x}&fp-y=${y}&fp-z=${zoom}`;
  }
  return `https://images.unsplash.com/photo-${id}?&w=64&h=64&dpr=2&q=70&crop=${crop}&fit=crop`;
}


================================================
File: apps/playground/app/ghost-balance/page.tsx
================================================
import * as React from 'react';
import {
  Theme,
  Container,
  Section,
  Flex,
  Grid,
  Button,
  IconButton,
  Link,
  Popover,
} from '@radix-ui/themes';
import {
  ChatBubbleIcon,
  DotsHorizontalIcon,
  FileTextIcon,
  QuestionMarkCircledIcon,
  SunIcon,
} from '@radix-ui/react-icons';

export default function Ghost() {
  return (
    <html lang="en">
      <body>
        <Theme asChild accentColor="mint">
          <div id="root">
            <Container>
              <Grid columns="2">
                {(['row', 'column'] as const).map((direction) => (
                  <Section key={direction}>
                    <Flex direction={direction === 'row' ? 'column' : 'row'} gap="7">
                      <Flex
                        direction={direction}
                        align={direction === 'row' ? 'center' : 'start'}
                        gap="4"
                      >
                        <Button variant="ghost" size="1">
                          Action
                        </Button>
                        <Button variant="ghost" size="1">
                          Cancel
                        </Button>
                        <Button size="1">Save</Button>
                        <Button size="1">Delete</Button>
                        <IconButton variant="ghost" size="1" radius="full">
                          <SunIcon />
                        </IconButton>
                      </Flex>

                      <Flex
                        direction={direction}
                        align={direction === 'row' ? 'center' : 'start'}
                        gap="4"
                      >
                        <Button variant="ghost" size="2">
                          Action
                        </Button>
                        <Button variant="ghost" size="2">
                          Cancel
                        </Button>
                        <Button size="2">Save</Button>
                        <Button size="2">Delete</Button>
                        <IconButton variant="ghost" size="2" radius="full">
                          <SunIcon />
                        </IconButton>
                      </Flex>

                      <Flex
                        direction={direction}
                        align={direction === 'row' ? 'center' : 'start'}
                        gap="5"
                      >
                        <Button variant="ghost" size="3">
                          Action
                        </Button>
                        <Button variant="ghost" size="3">
                          Cancel
                        </Button>
                        <Button size="3">Save</Button>
                        <Button size="3">Delete</Button>
                        <IconButton variant="ghost" size="3" radius="full">
                          <SunIcon />
                        </IconButton>
                      </Flex>

                      <Flex
                        direction={direction}
                        align={direction === 'row' ? 'center' : 'start'}
                        gap="4"
                      >
                        <Button variant="ghost" size="2">
                          <QuestionMarkCircledIcon />
                          Help
                        </Button>
                        <Button variant="ghost" size="2">
                          <ChatBubbleIcon />
                          Feedback
                        </Button>
                        <Flex asChild align="center" gap="1">
                          <Link size="2" href="#">
                            <FileTextIcon />
                            Docs
                          </Link>
                        </Flex>
                        <IconButton variant="ghost" size="2" radius="full">
                          <SunIcon />
                        </IconButton>
                      </Flex>

                      <Flex
                        direction={direction}
                        align={direction === 'row' ? 'center' : 'start'}
                        gap="4"
                      >
                        <Popover.Root>
                          <Popover.Trigger>
                            <Button variant="ghost">Open</Button>
                          </Popover.Trigger>
                          <Popover.Content sideOffset={0} style={{ padding: 100 }} />
                        </Popover.Root>

                        <Popover.Root>
                          <Popover.Trigger>
                            <IconButton variant="ghost">
                              <DotsHorizontalIcon />
                            </IconButton>
                          </Popover.Trigger>
                          <Popover.Content sideOffset={0} style={{ padding: 100 }} />
                        </Popover.Root>
                      </Flex>
                    </Flex>
                  </Section>
                ))}
              </Grid>

              <Flex direction="column" gap="2" mb="5">
                <Flex align="center" gap="5">
                  <Button variant="ghost">Cancel</Button>
                  <Button>Save</Button>
                </Flex>

                <Flex align="center">
                  <Button variant="ghost" mr="5">
                    Cancel
                  </Button>
                  <Button>Save</Button>
                </Flex>
              </Flex>

              <Flex direction="column" gap="2" style={{ width: 500 }}>
                <Flex align="center" justify="between">
                  <Button variant="ghost">Cancel</Button>
                  <Button>Save</Button>
                </Flex>

                <Flex align="center">
                  <Button variant="ghost" mr="auto">
                    Cancel
                  </Button>
                  <Button>Save</Button>
                </Flex>
              </Flex>
            </Container>
          </div>
        </Theme>
      </body>
    </html>
  );
}


================================================
File: apps/playground/app/home-os/page.module.css
================================================
.root {
  display: flex;
  justify-content: center;
  padding: var(--space-9);
}

.guestTrigger {
  all: unset;
  padding: var(--space-3) var(--space-4);
  border: 1px solid var(--gray-7);
  border-radius: var(--radius-3);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.guestTrigger svg {
  animation-duration: 300ms;
  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
}
.guestTrigger[data-state='open'] svg {
  animation-name: iconOpen;
  animation-fill-mode: forwards;
}
.guestTrigger[data-state='closed'] svg {
  animation-name: iconClosed;
}

@keyframes iconClosed {
  from {
    transform: translateY(-4px);
  }
  to {
    transform: translateY(0);
  }
}

@keyframes iconOpen {
  0% {
    transform: translateY(4px) rotate(180deg);
  }

  to {
    transform: translateY(0) rotate(180deg);
  }
}


================================================
File: apps/playground/app/home-os/page.tsx
================================================
'use client';

import * as React from 'react';
import {
  ChevronDownIcon,
  GridIcon,
  HamburgerMenuIcon,
  MinusIcon,
  PlusIcon,
} from '@radix-ui/react-icons';
import {
  Theme,
  Button,
  Text,
  IconButton,
  Link,
  DropdownMenu,
  Dialog,
  Popover,
  Separator,
  //
  ThemePanel,
} from '@radix-ui/themes';
import styles from './page.module.css';

export default function HomeOS() {
  const [adultCount, setAdultCount] = React.useState(1);
  const [childCount, setChildCount] = React.useState(0);
  const [infantCount, setInfantCount] = React.useState(0);

  const totalCount = adultCount + childCount + infantCount;

  return (
    <html lang="en">
      <body>
        <Theme asChild accentColor="orange" radius="large">
          <div id="root">
            <ThemePanel />

            <div className={styles.root}>
              <div
                style={{
                  width: 1250,
                  border: '1px solid var(--gray-8)',
                  borderRadius: 'var(--radius-4)',
                  backgroundColor: 'var(--gray-1)',
                  background: 'linear-gradient(150deg, transparent 60%, var(--gray-2) 100%)',
                }}
              >
                <header
                  style={{
                    padding: 'var(--space-4) var(--space-6)',
                    borderBottom: '1px solid var(--gray-8)',
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                  }}
                >
                  <div style={{ display: 'flex', gap: 'var(--space-2)' }}>
                    <svg
                      width="20"
                      height="22"
                      viewBox="0 0 20 22"
                      style={{ fill: 'var(--accent-9)' }}
                    >
                      <path
                        fillRule="evenodd"
                        clipRule="evenodd"
                        d="M9.38606 0.210648C9.74717 -0.0702159 10.2528 -0.0702159 10.6139 0.210648L19.6139 7.21065C19.8575 7.4001 20 7.69141 20 8V19C20 19.7957 19.6839 20.5587 19.1213 21.1213C18.5587 21.6839 17.7957 22 17 22H3C2.20435 22 1.44129 21.6839 0.87868 21.1213C0.31607 20.5587 0 19.7957 0 19V8C0 7.69141 0.142473 7.4001 0.386059 7.21065L9.38606 0.210648ZM8 20H12V12H8V20ZM14 20V11C14 10.4477 13.5523 10 13 10H7C6.44772 10 6 10.4477 6 11V20H3C2.73478 20 2.48043 19.8946 2.29289 19.7071C2.10536 19.5196 2 19.2652 2 19V8.48908L10 2.26686L18 8.48908V19C18 19.2652 17.8946 19.5196 17.7071 19.7071C17.5196 19.8946 17.2652 20 17 20H14Z"
                      />
                    </svg>
                    <Text weight="bold">HomeOS</Text>
                  </div>

                  <div style={{ display: 'flex', alignItems: 'center', gap: 'var(--space-6)' }}>
                    <div style={{ display: 'flex', gap: 'var(--space-3)' }}>
                      <Button variant="ghost" color="gray">
                        Guest
                      </Button>
                      <Button variant="ghost" color="gray">
                        Host
                      </Button>
                      <Button variant="ghost" color="gray">
                        Travel
                      </Button>
                      <Button variant="ghost" color="gray">
                        Experience
                      </Button>
                    </div>

                    <DropdownMenu.Root>
                      <DropdownMenu.Trigger>
                        <IconButton
                          variant="ghost"
                          color="gray"
                          style={{ marginRight: `calc(var(--space-2) * -1)` }}
                        >
                          <HamburgerMenuIcon />
                        </IconButton>
                      </DropdownMenu.Trigger>
                      <DropdownMenu.Content align="end">
                        <DropdownMenu.Item>Sign up</DropdownMenu.Item>
                        <DropdownMenu.Item>Log in</DropdownMenu.Item>

                        <DropdownMenu.Separator />

                        <DropdownMenu.Item>Air Cover</DropdownMenu.Item>
                        <DropdownMenu.Item>Cancellations</DropdownMenu.Item>
                        <DropdownMenu.Sub>
                          <DropdownMenu.SubTrigger>Hosting</DropdownMenu.SubTrigger>

                          <DropdownMenu.SubContent>
                            <DropdownMenu.Item>Resources</DropdownMenu.Item>
                            <DropdownMenu.Item>Community forum</DropdownMenu.Item>
                            <DropdownMenu.Item>Hosting guide</DropdownMenu.Item>
                            <DropdownMenu.Separator />
                            <DropdownMenu.Item>Your home</DropdownMenu.Item>
                          </DropdownMenu.SubContent>
                        </DropdownMenu.Sub>

                        <DropdownMenu.Separator />

                        <DropdownMenu.Item>Help Centre</DropdownMenu.Item>
                      </DropdownMenu.Content>
                    </DropdownMenu.Root>
                  </div>
                </header>

                <main style={{ padding: 'var(--space-6)' }}>
                  <div style={{ marginBottom: 'var(--space-5)' }}>
                    <Text as="p" size="7" weight="bold">
                      Private Room in Elegant French Gothic Home
                    </Text>
                  </div>

                  <PhotoArea />

                  <div style={{ display: 'flex', gap: 100, marginTop: 'var(--space-6)' }}>
                    <div style={{ flexGrow: 1 }}>
                      <Text
                        as="p"
                        size="5"
                        weight="bold"
                        style={{ marginBottom: 'var(--space-4)' }}
                      >
                        Room in a apartment hosted by Valentina
                      </Text>

                      <div
                        style={{
                          display: 'grid',
                          gap: 'var(--space-4)',
                          gridTemplateColumns: '1fr 1fr 1fr',
                        }}
                      >
                        <Card>
                          <svg
                            viewBox="0 0 32 32"
                            style={{
                              height: 24,
                              width: 24,
                              fill: 'currentcolor',
                              display: 'block',
                              flexShrink: 0,
                            }}
                          >
                            <path d="M28 4a2 2 0 0 1 1.995 1.85L30 6v7.839l1.846 5.537a3 3 0 0 1 .115.468l.03.24.009.24V30h-2v-2H2v2H0v-9.675a3 3 0 0 1 .087-.717l.067-.232L2 13.836V6a2 2 0 0 1 1.697-1.977l.154-.018L4 4zm2 18H2v4h28zm-1.388-6H3.387l-1.333 4h27.891zM28 6H4v8h2v-4a2 2 0 0 1 1.85-1.995L8 8h16a2 2 0 0 1 1.995 1.85L26 10v4h2zm-13 4H8v4h7zm9 0h-7v4h7z"></path>
                          </svg>
                          <Text size="2" weight="bold">
                            1 bed
                          </Text>
                        </Card>
                        <Card>
                          <svg
                            viewBox="0 0 32 32"
                            style={{
                              height: 24,
                              width: 24,
                              fill: 'currentcolor',
                              display: 'block',
                              flexShrink: 0,
                            }}
                          >
                            <path d="M7 1a3 3 0 0 0-2.995 2.824L4 4v27h2V4a1 1 0 0 1 .883-.993L7 3h11a1 1 0 0 1 .993.883L19 4v1h-5a1 1 0 0 0-.993.883L13 6v3h-3v2h19V9h-2V6a1 1 0 0 0-.883-.993L26 5h-5V4a3 3 0 0 0-2.824-2.995L18 1H7zm13 28a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm5 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-10 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm5-4a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm5 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-10 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm5-4a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm5 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-10 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm5-4a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm5 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-10 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm5-4a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-5 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm10 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2zM15 7h10v2H15V7z"></path>
                          </svg>
                          <Text size="2" weight="bold">
                            Shared bathroom
                          </Text>
                        </Card>
                        <Card>
                          <svg
                            viewBox="0 0 32 32"
                            style={{
                              height: 24,
                              width: 24,
                              fill: 'currentcolor',
                              display: 'block',
                              flexShrink: 0,
                            }}
                          >
                            <path d="M31.707,15.293,29,12.58594,18.12109,1.707a3.07251,3.07251,0,0,0-4.24218,0L3,12.58594.293,15.293,1.707,16.707,3,15.41406V28a2.00229,2.00229,0,0,0,2,2H27a2.0026,2.0026,0,0,0,2-2V15.41406l1.293,1.293ZM9.0799,28A7.00456,7.00456,0,0,1,15,22.07983V19.78815a2.49986,2.49986,0,1,1,2,.00012V22.0799A7.00512,7.00512,0,0,1,22.9201,28ZM27,28H24.92218A9.00972,9.00972,0,0,0,19.252,20.60742a4.5,4.5,0,1,0-6.5039,0A9.01069,9.01069,0,0,0,7.07782,28H5V13.41406l10.293-10.293a1.00142,1.00142,0,0,1,1.41406,0L27,13.41406Z"></path>
                          </svg>
                          <Text size="2" weight="bold">
                            Host or others may share home
                          </Text>
                        </Card>
                      </div>
                      <Separator size="4" style={{ marginTop: 30, marginBottom: 30 }} />

                      <div style={{ display: 'flex', flexDirection: 'column', gap: 20 }}>
                        <div style={{ display: 'flex', gap: 15 }}>
                          <svg
                            viewBox="0 0 32 32"
                            style={{
                              height: 24,
                              width: 24,
                              fill: 'currentcolor',
                              display: 'block',
                            }}
                          >
                            <path d="m17 6c1.0543618 0 1.9181651.81587779 1.9945143 1.85073766l.0054857.14926234.0008825 8.7646837c.082702.0740788.161269.1526799.235312.2354146l4.7638055-.0000983v-3h-3c-.6424073 0-1.1071307-.5923403-.9796308-1.2018783l.0309475-.1143495 2-5.99999997c.12374-.37122012.4508064-.63259558.8326391-.67705046l.1160442-.00672177h4c.3913004 0 .7426904.22762818.9056101.57580861l.0430732.10796362 2 5.99999997c.203147.6094411-.2118379 1.2376308-.8304154 1.3094267l-.1182679.0068011h-3v3h5c.5128358 0 .9355072.3860402.9932723.8833789l.0067277.1166211v12h-2v-3h-10v3h-2v-3h-16v3h-2v-11c0-.8885473.3862919-1.6868712 1.00009834-2.2361945l-.00009834-8.7638055c0-1.0543618.81587779-1.91816512 1.85073766-1.99451426l.14926234-.00548574zm13 13h-10v6h10zm-13-1h-14c-.51283584 0-.93550716.3860402-.99327227.8833789l-.00672773.1166211v6h16v-6c0-.4733869-.3289337-.8699473-.7707092-.9735893l-.1126697-.019683zm8 3c.5522847 0 1 .4477153 1 1s-.4477153 1-1 1-1-.4477153-1-1 .4477153-1 1-1zm-8-13h-14v8h2v-3c0-1.0543618.81587779-1.9181651 1.85073766-1.9945143l.14926234-.0054857h6c1.0543618 0 1.9181651.8158778 1.9945143 1.8507377l.0054857.1492623v3h2zm-4 5h-6v3h6zm13.279-5h-2.559l-1.333 4h5.225z"></path>
                          </svg>
                          <Text as="p" weight="bold">
                            Room in an apartment
                          </Text>
                        </div>
                        <div style={{ display: 'flex', gap: 15 }}>
                          <svg
                            viewBox="0 0 32 32"
                            style={{
                              height: 24,
                              width: 24,
                              fill: 'currentcolor',
                              display: 'block',
                            }}
                          >
                            <path d="m11.6667 0-.00095 1.666h8.667l.00055-1.666h2l-.00055 1.666 6.00065.00063c1.0543745 0 1.9181663.81587127 1.9945143 1.85073677l.0054857.14926323v15.91907c0 .4715696-.1664445.9258658-.4669028 1.2844692l-.1188904.1298308-8.7476886 8.7476953c-.3334303.3332526-.7723097.5367561-1.2381975.5778649l-.1758207.0077398h-12.91915c-2.68874373 0-4.88181754-2.1223321-4.99538046-4.7831124l-.00461954-.2168876v-21.66668c0-1.05436021.81587582-1.91815587 1.85073739-1.99450431l.14926261-.00548569 5.999-.00063.00095-1.666zm16.66605 11.666h-24.666v13.6673c0 1.5976581 1.24893332 2.9036593 2.82372864 2.9949072l.17627136.0050928 10.999-.0003.00095-5.6664c0-2.6887355 2.122362-4.8818171 4.7832071-4.9953804l.2168929-.0046196 5.66595-.0006zm-.081 8-5.58495.0006c-1.5977285 0-2.9037573 1.2489454-2.9950071 2.8237299l-.0050929.1762701-.00095 5.5864zm-18.586-16-5.999.00062v5.99938h24.666l.00065-5.99938-6.00065-.00062.00055 1.66733h-2l-.00055-1.66733h-8.667l.00095 1.66733h-2z"></path>
                          </svg>
                          <Text as="p" weight="bold">
                            Free cancellation before 24 May
                          </Text>
                        </div>
                      </div>

                      <Separator size="4" style={{ marginTop: 30, marginBottom: 30 }} />

                      <Text
                        as="p"
                        weight="bold"
                        size="5"
                        style={{ marginBottom: 'var(--space-2)' }}
                      >
                        About this place
                      </Text>

                      <Text as="p" style={{ marginBottom: 'var(--space-4)' }}>
                        Nice apartment with a very cozy living room, a large terrace, an equipped
                        kitchen, two bedrooms and a bathroom. The house is very bright thanks to the
                        large windows. It is located in a quiet area where several means of
                        transport that connect it both to the center of the city in 15/20min and to
                        the airport of Milan in 15 min.
                      </Text>

                      <Link color="gray">Learn more</Link>
                    </div>

                    <div style={{ paddingRight: 'var(--space-6)', position: 'relative' }}>
                      <div
                        style={{
                          borderRadius: 'var(--radius-4)',
                          marginTop: -90,
                          width: 340,
                          backgroundColor: 'var(--color-background)',
                          boxShadow: 'var(--shadow-3)',
                          padding: 30,
                          display: 'flex',
                          flexDirection: 'column',
                          gap: 15,
                        }}
                      >
                        <div
                          style={{
                            display: 'flex',
                            justifyContent: 'space-between',
                            alignItems: 'flex-end',
                          }}
                        >
                          <div>
                            <Text size="6" weight="bold">
                              £70
                            </Text>{' '}
                            <Text color="gray">night</Text>
                          </div>
                          <Link size="2" color="gray">
                            4 reviews
                          </Link>
                        </div>
                        <div
                          style={{
                            display: 'flex',
                            flexDirection: 'column',
                            gap: 'var(--space-2)',
                            marginBottom: 'var(--space-2)',
                          }}
                        >
                          <div
                            style={{
                              display: 'grid',
                              gridTemplateColumns: '1fr 1fr',
                              gap: 'var(--space-2)',
                            }}
                          >
                            <LabelValueCard label="Check-in" value="31/05/2023" />
                            <LabelValueCard label="Check-out" value="05/06/2023" />
                          </div>

                          <Popover.Root>
                            <Popover.Trigger>
                              <button className={styles.guestTrigger}>
                                <div>
                                  <Text as="p" size="1" weight="bold">
                                    Guests
                                  </Text>

                                  <Text as="p" size="2">
                                    {totalCount} guest{totalCount > 1 ? 's' : ''}
                                  </Text>
                                </div>

                                <ChevronDownIcon />
                              </button>
                            </Popover.Trigger>
                            <Popover.Content
                              align="center"
                              style={{
                                boxSizing: 'border-box',
                                padding: 'var(--space-5)',
                                backgroundColor: 'var(--gray-1)',
                                display: 'flex',
                                flexDirection: 'column',
                                gap: 'var(--space-4)',
                              }}
                            >
                              <GuestSelectorItem
                                label="Adults"
                                subLabel="Age 13+"
                                value={adultCount}
                                onValueChange={setAdultCount}
                              />

                              <GuestSelectorItem
                                label="Children"
                                subLabel="Ages 2–12"
                                value={childCount}
                                onValueChange={setChildCount}
                              />

                              <GuestSelectorItem
                                label="Infants"
                                subLabel="Under 2"
                                value={infantCount}
                                onValueChange={setInfantCount}
                              />
                            </Popover.Content>
                          </Popover.Root>

                          <ConfirmBookingDialog guestCount={totalCount}>
                            <Button size="3" variant="solid" style={{ width: '100%' }}>
                              Reserve
                            </Button>
                          </ConfirmBookingDialog>
                        </div>

                        <div
                          style={{
                            display: 'flex',
                            flexDirection: 'column',
                            gap: 'var(--space-3)',
                          }}
                        >
                          <ItemisedRow label="£70 x 5 nights" amount="£348" />
                          <ItemisedRow label="Cleaning fee" amount="£17" />
                          <ItemisedRow label="Service fee" amount="£62" />
                          <ItemisedRow label="Taxes" amount="£13" />
                        </div>
                        <Separator size="4" />
                        <ItemisedRow label="Total" amount="£440" />
                      </div>
                    </div>
                  </div>
                </main>
              </div>
            </div>
          </div>
        </Theme>
      </body>
    </html>
  );
}

const ItemisedRow: React.FC<{ label: string; amount: string }> = ({ label, amount }) => {
  return (
    <div style={{ display: 'flex', justifyContent: 'space-between' }}>
      <Text>{label}</Text> <Text weight="bold">{amount}</Text>
    </div>
  );
};

const PhotoArea: React.FC = () => {
  return (
    <div
      style={{
        height: 500,
        borderRadius: 'var(--radius-6)',
        overflow: 'hidden',
        display: 'grid',
        gridTemplateColumns: '1.25fr 1fr',
        gap: 'var(--space-2)',
        position: 'relative',
      }}
    >
      <div
        style={{
          backgroundColor: 'var(--gray-4)',
          backgroundImage:
            'url("https://images.unsplash.com/photo-1615529182904-14819c35db37?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1160&q=80")',
          backgroundPosition: 'center',
          backgroundSize: 'cover',
        }}
      />
      <div
        style={{
          backgroundColor: 'var(--gray-4)',
          backgroundImage:
            'url("https://images.unsplash.com/photo-1585128792020-803d29415281?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80")',
          backgroundPosition: 'center',
          backgroundSize: 'cover',
        }}
      />
      <Button
        variant="solid"
        highContrast
        style={{
          position: 'absolute',
          top: 'var(--space-6)',
          right: 'var(--space-6)',
        }}
      >
        <span
          style={{
            color: 'var(--gray-8)',
          }}
        >
          <GridIcon />
        </span>
        Show all photos
      </Button>
    </div>
  );
};

const Card: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  return (
    <div
      style={{
        padding: `var(--space-3) var(--space-5)`,
        border: '1px solid var(--gray-7)',
        borderRadius: 'var(--radius-3)',
        display: 'flex',
        alignItems: 'center',
        gap: 'var(--space-4)',
      }}
    >
      {children}
    </div>
  );
};

function ConfirmBookingDialog({ children, guestCount }: any) {
  return (
    <Dialog.Root>
      <Dialog.Trigger>{children}</Dialog.Trigger>
      <Dialog.Content style={{ maxWidth: 550 }}>
        <Dialog.Title size="5">Confirm and pay</Dialog.Title>
        <Dialog.Description
          size="2"
          style={{ marginTop: 'var(--space-2)', marginBottom: 'var(--space-5)' }}
        >
          Your booking is only moments away.
        </Dialog.Description>

        <Text as="p" weight="bold" style={{ marginBottom: 'var(--space-3)' }}>
          Your trip
        </Text>

        <div style={{ display: 'flex', flexDirection: 'column', gap: 'var(--space-2)' }}>
          <LabelValueCard label="Check-in" value="31/05/2023" />
          <LabelValueCard label="Check-out" value="05/06/2023" />
          <LabelValueCard
            label="Guests"
            value={`${guestCount} guest${guestCount > 1 ? 's' : ''}`}
          />
        </div>

        <div
          style={{
            display: 'flex',
            justifyContent: 'flex-end',
            gap: 'var(--space-3)',
            marginTop: 'var(--space-5)',
          }}
        >
          <Dialog.Close>
            <Button variant="soft" color="gray">
              Cancel
            </Button>
          </Dialog.Close>
          <Dialog.Close>
            <Button variant="solid">Confirm booking</Button>
          </Dialog.Close>
        </div>
      </Dialog.Content>
    </Dialog.Root>
  );
}

const LabelValueCard: React.FC<{ label: string; value: string }> = ({ label, value }) => {
  return (
    <div
      style={{
        padding: 'var(--space-3) var(--space-4)',
        border: '1px solid var(--gray-7)',
        borderRadius: 'var(--radius-3)',
      }}
    >
      <Text as="p" size="1" weight="bold">
        {label}
      </Text>

      <Text as="p" size="2">
        {value}
      </Text>
    </div>
  );
};

const GuestSelectorItem: React.FC<{
  value: number;
  onValueChange: (value: number) => void;
  label: string;
  subLabel: string;
}> = ({ label, subLabel, value, onValueChange }) => {
  return (
    <div
      style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
      }}
    >
      <div>
        <Text size="2" weight="bold">
          {label}
        </Text>
        <Text size="2" color="gray">
          {subLabel}
        </Text>
      </div>

      <div style={{ display: 'flex', gap: 'var(--space-4)', alignItems: 'center' }}>
        <IconButton
          disabled={value === 0}
          size="1"
          variant="outline"
          radius="full"
          onClick={() => onValueChange(value - 1)}
        >
          <MinusIcon />
        </IconButton>

        <Text size="2" weight="bold" style={{ fontVariantNumeric: 'tabular-nums' }}>
          {value}
        </Text>

        <IconButton size="1" variant="solid" radius="full" onClick={() => onValueChange(value + 1)}>
          <PlusIcon />
        </IconButton>
      </div>
    </div>
  );
};


================================================
File: apps/playground/app/sink/hide-cursor.tsx
================================================
'use client';

import * as React from 'react';
import { useIdle } from 'react-use';

function hideCursor() {
  document.body.classList.add('hide-cursor');
}
function showCursor() {
  document.body.classList.remove('hide-cursor');
}

export function HideCursor() {
  const isIdle = useIdle(1000);

  React.useEffect(() => {
    if (isIdle) {
      hideCursor();
    } else {
      showCursor();
    }
  }, [isIdle]);

  return null;
}


================================================
File: apps/playground/app/sink/page.module.css
================================================
.root {
  margin-bottom: 400px;
}

.root :global(summary) {
  cursor: pointer;
}
.root :global(summary:focus-visible) {
  outline: 2px solid var(--accent-8);
  outline-offset: 2px;
}

.root :global(.hide-cursor),
.root :global(.hide-cursor *) {
  cursor: none !important;
}

.table {
  border-collapse: collapse;
}
.table + .table {
  margin-top: var(--space-3);
}

.table thead tr,
.table tbody tr:not(:last-child) {
  border-bottom: 1px solid var(--gray-a5);
}

.table th {
  font-weight: 400;
}

.table th,
.table td {
  padding: 0;
  padding-top: var(--space-4);
  padding-right: var(--space-4);
  padding-bottom: var(--space-4);
}

.table .rowHeaderCell {
  padding-left: 0;
  padding-right: var(--space-5);
  min-width: 100px;
}


================================================
File: apps/playground/app/sink/pointer-cursors-checkbox.tsx
================================================
'use client';
import { Box, Checkbox, Flex, Text } from '@radix-ui/themes';
import React from 'react';

export function PointerCursorsCheckbox() {
  const [checked, setChecked] = React.useState(false);

  return (
    <Box>
      <Text as="label" size="2">
        <Flex gap="2">
          <Checkbox onCheckedChange={(value) => setChecked(!!value)} />
          Use pointer cursors
        </Flex>
      </Text>
      {checked && (
        <style>
          {`
            .radix-themes {
              --cursor-button: pointer;
              --cursor-checkbox: pointer;
              --cursor-disabled: default;
              --cursor-link: pointer;
              --cursor-menu-item: pointer;
              --cursor-radio: pointer;
              --cursor-slider-thumb: grab;
              --cursor-slider-thumb-active: grabbing;
              --cursor-switch: pointer;
            }
          `}
        </style>
      )}
    </Box>
  );
}


================================================
File: apps/playground/app/sink/radix-logo.tsx
================================================
import React from 'react';

export const RadixLogo = (props: React.ComponentProps<'svg'>) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="25"
    height="25"
    viewBox="0 0 25 25"
    fill="none"
    {...props}
  >
    <path d="M12 25C7.58173 25 4 21.4183 4 17C4 12.5817 7.58173 9 12 9V25Z" fill="currentcolor" />
    <path d="M12 0H4V8H12V0Z" fill="currentcolor" />
    <path
      d="M17 8C19.2091 8 21 6.20914 21 4C21 1.79086 19.2091 0 17 0C14.7909 0 13 1.79086 13 4C13 6.20914 14.7909 8 17 8Z"
      fill="currentcolor"
    />
  </svg>
);


================================================
File: apps/playground/app/sink/tab-nav-demo.tsx
================================================
'use client';

import * as React from 'react';
import NextLink from 'next/link';
import { useSearchParams } from 'next/navigation';
import { TabNav } from '@radix-ui/themes';

const TabNavDemo = React.forwardRef<
  React.ElementRef<typeof TabNav.Root>,
  React.ComponentPropsWithoutRef<typeof TabNav.Root>
>((props, forwardedRef) => {
  const params = useSearchParams();
  const tab = params?.get('tab');
  return (
    <TabNav.Root {...props} ref={forwardedRef}>
      <TabNav.Link asChild active={tab === 'account' || tab === null}>
        <NextLink href="/sink?tab=account#tab-nav" scroll={false}>
          Account
        </NextLink>
      </TabNav.Link>
      <TabNav.Link asChild active={tab === 'documents'}>
        <NextLink href="/sink?tab=documents#tab-nav" scroll={false}>
          Documents
        </NextLink>
      </TabNav.Link>
      <TabNav.Link asChild active={tab === 'settings'}>
        <NextLink href="/sink?tab=settings#tab-nav" scroll={false}>
          Settings
        </NextLink>
      </TabNav.Link>

      {/* without asChild */}
      {/* <TabNav.Link href="/sink?tab=account#tab-nav" active={tab === 'account' || tab === null}>
        Account
      </TabNav.Link>
      <TabNav.Link href="/sink?tab=documents#tab-nav" active={tab === 'documents'}>
        Documents
      </TabNav.Link>
      <TabNav.Link href="/sink?tab=settings#tab-nav" active={tab === 'settings'}>
        Settings
      </TabNav.Link> */}
    </TabNav.Root>
  );
});
TabNavDemo.displayName = 'TabNavDemo';

export { TabNavDemo };


================================================
File: apps/playground/app/snapshot/image-card.tsx
================================================
'use client';

import * as React from 'react';
import { Tooltip, IconButton, Popover, Text, Button } from '@radix-ui/themes';
import { HeartFilledIcon, PlusIcon, DownloadIcon } from '@radix-ui/react-icons';
import styles from './page.module.css';

function ImageCard({ id }: any) {
  const [open, setOpen] = React.useState(false);
  return (
    <div className={styles.imageCard}>
      <img
        src={`https://images.unsplash.com/photo-${id}?w=400&h=400&dpr=2&auto=format&fit=crop&w=2574&q=70`}
        style={{
          display: 'block',
          width: '100%',
          objectFit: 'cover',
          height: 400,
        }}
      />
      <div className={styles.imageCardOverlay} data-visible={open ? '' : undefined}>
        <div style={{ position: 'absolute', top: 'var(--space-3)', right: 'var(--space-3)' }}>
          <Tooltip content="Add to favorites">
            <IconButton
              size="3"
              variant="solid"
              highContrast
              radius="full"
              style={{ marginRight: 'var(--space-3)' }}
            >
              <HeartFilledIcon />
            </IconButton>
          </Tooltip>
          <Tooltip content="Add to library">
            <IconButton size="3" variant="solid" highContrast radius="full">
              <PlusIcon />
            </IconButton>
          </Tooltip>
        </div>
        <Popover.Root open={open} onOpenChange={setOpen}>
          <Tooltip content="Download">
            <Popover.Trigger>
              <IconButton
                size="3"
                variant="solid"
                highContrast
                radius="full"
                style={{ position: 'absolute', bottom: 'var(--space-3)', right: 'var(--space-3)' }}
              >
                <DownloadIcon />
              </IconButton>
            </Popover.Trigger>
          </Tooltip>
          <Popover.Content align="center" className={styles.downloadPopover}>
            <div style={{ boxSizing: 'border-box', width: 200, padding: 'var(--space-4)' }}>
              <Text as="p" size="3" style={{ marginBottom: 'var(--space-2)' }}>
                Choose a size:
              </Text>

              <div
                style={{
                  display: 'flex',
                  flexDirection: 'column',
                  gap: 'var(--space-1)',
                  marginBottom: 'var(--space-3)',
                }}
              >
                {['Small', 'Medium', 'Large'].map((size) => (
                  <label
                    key={size}
                    style={{ display: 'flex', alignItems: 'center', gap: 'var(--space-1)' }}
                  >
                    <input
                      type="radio"
                      name="size"
                      value={size}
                      defaultChecked
                      style={{ marginTop: -1 }}
                    />
                    <Text size="2">{size}</Text>
                  </label>
                ))}
              </div>

              <Popover.Close>
                <Button variant="solid" size="2">
                  Download <DownloadIcon />
                </Button>
              </Popover.Close>
            </div>
          </Popover.Content>
        </Popover.Root>
      </div>
    </div>
  );
}

export { ImageCard };


================================================
File: apps/playground/app/snapshot/page.module.css
================================================
.root {
  min-width: 1280px;
  max-width: 1600px;
  margin: 0 auto;
}

.search {
  flex: 1;
  display: flex;
  align-items: center;
  height: var(--space-7);
  border-radius: max(var(--radius-3), var(--radius-full));
  border: none;
  background-color: var(--gray-a5);
  padding: 0 var(--space-5);
}
.search:focus {
  outline-color: var(--accent-9);
}

.grid {
  display: grid;
  padding: var(--space-5);
  grid-template-columns: repeat(3, 1fr);
  gap: var(--space-5);
}

.imageCard {
  position: relative;
}

.imageCardOverlay {
  position: absolute;
  inset: 0px;
  background-image: linear-gradient(-135deg, var(--black-a8), transparent);
  padding: var(--space-3);
  opacity: 0;
}

.imageCard:hover .imageCardOverlay,
.imageCard:focus-within .imageCardOverlay,
.imageCardOverlay[data-visible] {
  opacity: 1;
}

.downloadPopover {
  accent-color: var(--accent-9);
}

.container {
  padding-left: var(--space-5);
  padding-right: var(--space-5);
}
@media (min-width: 1600px) {
  .container {
    padding-left: 0;
    padding-right: 0;
  }
}


================================================
File: apps/playground/app/snapshot/page.tsx
================================================
import * as React from 'react';
import { HamburgerMenuIcon, UploadIcon } from '@radix-ui/react-icons';
import {
  Theme,
  Button,
  Text,
  Heading,
  Link,
  Separator,
  IconButton,
  DropdownMenu,
  Dialog,
  //
  ThemePanel,
} from '@radix-ui/themes';
import { ImageCard } from './image-card';
import { SnapshotLogo } from '../../components/snapshot-logo';
import styles from './page.module.css';

export default function Snapshot() {
  return (
    <html lang="en">
      <body>
        <Theme asChild appearance="dark" accentColor="grass" radius="small" scaling="110%">
          <div id="root">
            <ThemePanel />

            <div className={styles.root}>
              <header>
                <div
                  className={styles.container}
                  style={{
                    display: 'flex',
                    gap: 'var(--space-5)',
                    alignItems: 'center',
                    paddingTop: 'var(--space-3)',
                    paddingBottom: 'var(--space-3)',
                  }}
                >
                  <SnapshotLogo width="140" height="48" style={{ marginLeft: -13 }} />
                  <input
                    className={styles.search}
                    type="search"
                    placeholder="Search high-resolution images"
                  />
                  <Link href="#" size="2" color="gray" weight="bold">
                    Explore
                  </Link>
                  <Link href="#" size="2" color="gray" weight="bold">
                    Favorites
                  </Link>
                  <Link href="#" size="2" color="gray" weight="bold">
                    Library
                  </Link>
                  <Separator orientation="vertical" size="2" />
                  <Link href="#" size="2" color="gray" weight="bold">
                    Login
                  </Link>
                  <SubmitPhotoDialog>
                    <Button variant="soft" color="gray">
                      Submit a photo
                    </Button>
                  </SubmitPhotoDialog>
                  <DropdownMenu.Root>
                    <DropdownMenu.Trigger>
                      <IconButton
                        variant="ghost"
                        style={{ marginRight: 'calc(var(--space-1)*-1)' }}
                      >
                        <HamburgerMenuIcon />
                      </IconButton>
                    </DropdownMenu.Trigger>
                    <DropdownMenu.Content variant="soft" align="end">
                      <DropdownMenu.Label>Account</DropdownMenu.Label>
                      <DropdownMenu.Item shortcut="⌘+P">Profile</DropdownMenu.Item>
                      <DropdownMenu.Item shortcut="⌘+L">Library</DropdownMenu.Item>
                      <DropdownMenu.Item>Settings</DropdownMenu.Item>
                      <DropdownMenu.Separator />
                      <DropdownMenu.Label>Snapshot</DropdownMenu.Label>
                      <DropdownMenu.Sub>
                        <DropdownMenu.SubTrigger>Company</DropdownMenu.SubTrigger>
                        <DropdownMenu.SubContent>
                          <DropdownMenu.Item>About</DropdownMenu.Item>
                          <DropdownMenu.Item>History</DropdownMenu.Item>
                          <DropdownMenu.Item>Join the team</DropdownMenu.Item>
                          <DropdownMenu.Item>Blog</DropdownMenu.Item>
                          <DropdownMenu.Item>Press</DropdownMenu.Item>
                          <DropdownMenu.Item>Contact us</DropdownMenu.Item>
                          <DropdownMenu.Item>Help center</DropdownMenu.Item>
                        </DropdownMenu.SubContent>
                      </DropdownMenu.Sub>
                      <DropdownMenu.Sub>
                        <DropdownMenu.SubTrigger>Community</DropdownMenu.SubTrigger>
                        <DropdownMenu.SubContent>
                          <DropdownMenu.Item>Become a contributor</DropdownMenu.Item>
                          <DropdownMenu.Item>Topics</DropdownMenu.Item>
                          <DropdownMenu.Item>Collections</DropdownMenu.Item>
                          <DropdownMenu.Item>Trends</DropdownMenu.Item>
                          <DropdownMenu.Item>Press</DropdownMenu.Item>
                          <DropdownMenu.Item>Awards</DropdownMenu.Item>
                          <DropdownMenu.Item>Stats</DropdownMenu.Item>
                        </DropdownMenu.SubContent>
                      </DropdownMenu.Sub>
                      <DropdownMenu.Separator />
                      <DropdownMenu.Item>Logout</DropdownMenu.Item>
                    </DropdownMenu.Content>
                  </DropdownMenu.Root>
                </div>
                <div
                  className={styles.container}
                  style={{ paddingTop: 'var(--space-3)', paddingBottom: 'var(--space-3)' }}
                >
                  <nav style={{ display: 'flex', gap: 'var(--space-5)', alignItems: 'center' }}>
                    <Link href="#" size="2" color="gray" weight="bold">
                      Editorial
                    </Link>
                    <Separator orientation="vertical" size="2" />
                    <Link href="#" size="2" highContrast weight="bold">
                      Green Life
                    </Link>
                    <Link href="#" size="2" color="gray" weight="bold">
                      Nature
                    </Link>
                    <Link href="#" size="2" color="gray" weight="bold">
                      Food & Drink
                    </Link>
                    <Link href="#" size="2" color="gray" weight="bold">
                      Portraits
                    </Link>
                    <Link href="#" size="2" color="gray" weight="bold">
                      Travel
                    </Link>
                    <Link href="#" size="2" color="gray" weight="bold">
                      Architecture & Interiors
                    </Link>
                    <Link href="#" size="2" color="gray" weight="bold">
                      Water
                    </Link>
                    <Link href="#" size="2" color="gray" weight="bold">
                      Summer
                    </Link>
                    <Link href="#" size="2" color="gray" weight="bold">
                      Animals
                    </Link>
                    <Link href="#" size="2" color="gray" weight="bold">
                      Fashion
                    </Link>
                  </nav>
                </div>
              </header>
              <div style={{ position: 'relative' }}>
                <img
                  style={{ display: 'block', width: '100%' }}
                  role="presentation"
                  src="https://images.unsplash.com/photo-1675371788315-60fa0ef48267?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1vZi10aGUtZGF5fHx8fGVufDB8fHx8&dpr=2&auto=format%2Ccompress&fit=crop&w=1599&h=594"
                />
                <div
                  style={{
                    position: 'absolute',
                    inset: 0,
                    color: 'var(--white-a12)',
                    padding: 'var(--space-8) var(--space-5)',
                    backgroundImage: 'linear-gradient(135deg, var(--black-a11), transparent)',
                  }}
                >
                  <div style={{ maxWidth: '35%' }}>
                    <Heading size="9">Green Life</Heading>
                    <Text
                      as="p"
                      style={{ marginBottom: 'var(--space-5)', color: 'var(--white-a11)' }}
                    >
                      Curated by WorkOS
                    </Text>

                    <Text as="p" weight="bold" style={{ marginBottom: 'var(--space-2)' }}>
                      Lorem ipsum dolor sit amet, consectetur adipisicing elit. Expedita sed, sit
                      recusandae rem debitis maxime id cumque commodi iste alias optio ad beatae
                      veniam fugiat dolorem itaque aliquid! Nisi, exercitationem!
                    </Text>

                    <Text
                      as="p"
                      size="2"
                      style={{ marginBottom: 'var(--space-6)', color: 'var(--white-a11)' }}
                    >
                      Sponsored by Radix UI
                    </Text>

                    <SubmitPhotoDialog>
                      <Button variant="solid" size="3">
                        Submit a photo
                      </Button>
                    </SubmitPhotoDialog>
                  </div>
                </div>
              </div>
              <div className={`${styles.container} ${styles.grid}`}>
                {['1601815560619-c5aeb2cb9297', '1683223336014-06e82d91c95e'].map((id) => (
                  <ImageCard key={id} id={id} />
                ))}
                <div style={{ border: '1px solid var(--gray-7)', padding: 'var(--space-5)' }}>
                  <Text as="p" size="4" weight="bold" style={{ marginBottom: 'var(--space-5)' }}>
                    Contributors
                  </Text>
                  <div style={{ display: 'flex', flexDirection: 'column', gap: 'var(--space-3)' }}>
                    {[
                      'Vlad Moroz',
                      'Benoît Grélard',
                      'Caitlyn Thomson',
                      'Andy Hook',
                      'Vitor Capretz',
                    ].map((name) => (
                      <div key={name}>
                        <Text as="p" size="2" weight="bold">
                          {name}
                        </Text>
                        <Text as="p" color="gray" size="1">
                          {name.toLocaleLowerCase().replace(' ', '_')}
                        </Text>
                      </div>
                    ))}
                  </div>
                </div>
                {[
                  '1683490484039-c9839f9b2382',
                  '1683408581419-33e8f174ab10',
                  '1683035094630-146fdff5b960',
                  '1683402971094-879a7d879171',
                  '1588661565258-8ecc570d1403',
                  '1683402969702-4c7558fd41e3',
                ].map((id) => (
                  <ImageCard key={id} id={id} />
                ))}
              </div>
            </div>
          </div>
        </Theme>
      </body>
    </html>
  );
}

function SubmitPhotoDialog({ children }: any) {
  return (
    <Dialog.Root>
      <Dialog.Trigger>{children}</Dialog.Trigger>
      <Dialog.Content style={{ maxWidth: 450 }}>
        <div style={{ display: 'flex', flexDirection: 'column', gap: 'var(--space-3)' }}>
          <Dialog.Title>Submit a photo</Dialog.Title>
          <Dialog.Description size="2">
            Drop a photo here or click to browse your files.
          </Dialog.Description>

          <div
            style={{
              display: 'grid',
              placeItems: 'center',
              border: '2px dashed var(--accent-6)',
              backgroundColor: 'var(--gray-a1)',
              height: 100,
              color: 'var(--gray-6)',
            }}
          >
            <UploadIcon width="50" height="50" />
          </div>

          <div
            style={{
              display: 'flex',
              alignSelf: 'end',
              gap: 'var(--space-3)',
              marginTop: 'var(--space-4)',
            }}
          >
            <Dialog.Close>
              <Button variant="soft" color="gray">
                Cancel
              </Button>
            </Dialog.Close>
            <Dialog.Close>
              <Button variant="solid">
                Submit photo <UploadIcon />
              </Button>
            </Dialog.Close>
          </div>
        </div>
      </Dialog.Content>
    </Dialog.Root>
  );
}


================================================
File: apps/playground/app/test-appearance/page.tsx
================================================
import * as React from 'react';
import {
  Theme,
  Flex,
  ThemePanel,
  Heading,
  Grid,
  Text,
  TextArea,
  Switch,
  Button,
  Container,
  Section,
  Separator,
} from '@radix-ui/themes';

export default function Test() {
  return (
    <html lang="en">
      <body>
        {/* For testing: */}
        {/* <Theme asChild appearance="inherit"> */}
        {/* <Theme asChild appearance="light"> */}
        {/* <Theme asChild appearance="dark"> */}
        <Theme asChild>
          <div id="root">
            <ThemePanel />

            <DocsSection title="Nested appearances test">
              <SampleNestedUI title="Global appearance">
                <Theme asChild appearance="dark">
                  <SampleNestedUI title="Always dark">
                    <Theme asChild appearance="light">
                      <SampleNestedUI title="Always light">
                        <Theme asChild appearance="dark">
                          <SampleNestedUI title="Always dark" />
                        </Theme>
                      </SampleNestedUI>
                    </Theme>
                  </SampleNestedUI>
                </Theme>
              </SampleNestedUI>
            </DocsSection>

            <DocsSection title="Nested colors test">
              <SampleNestedUI title="Global color">
                <Theme asChild accentColor="mint">
                  <SampleNestedUI title="Always mint">
                    <Theme asChild accentColor="amber">
                      <SampleNestedUI title="Always amber">
                        <Theme asChild accentColor="tomato">
                          <SampleNestedUI title="Always tomato" />
                        </Theme>
                      </SampleNestedUI>
                    </Theme>
                  </SampleNestedUI>
                </Theme>
              </SampleNestedUI>
            </DocsSection>

            <DocsSection title="Mixed nested themes test">
              <SampleNestedUI title="Global theme">
                <Theme asChild accentColor="mint" appearance="dark" radius="none" scaling="90%">
                  <SampleNestedUI title="Dark, Mint, no radius, 90%">
                    <Theme
                      asChild
                      accentColor="amber"
                      appearance="light"
                      radius="full"
                      scaling="110%"
                    >
                      <SampleNestedUI title="Light, Amber, full radius, 110%">
                        <Theme
                          asChild
                          accentColor="tomato"
                          appearance="dark"
                          radius="large"
                          scaling="100%"
                        >
                          <SampleNestedUI title="Dark, Tomato, large radius, 100%" />
                        </Theme>
                      </SampleNestedUI>
                    </Theme>
                  </SampleNestedUI>
                </Theme>
              </SampleNestedUI>
            </DocsSection>
          </div>
        </Theme>
      </body>
    </html>
  );
}

const SampleNestedUI = React.forwardRef<
  React.ElementRef<typeof Flex>,
  React.ComponentPropsWithoutRef<typeof Flex>
>(({ children, title, ...props }, forwardedRef) => {
  return (
    <Flex
      p="5"
      gap="9"
      {...props}
      ref={forwardedRef}
      style={{
        boxShadow: '0 0 0 1px var(--gray-a6)',
        borderRadius: 'var(--radius-2)',
      }}
    >
      <div>
        <Heading size="2" trim="start" mb="3">
          {title}
        </Heading>
        <Flex direction="column" gap="3">
          <Grid gap="1">
            <Text as="p" weight="bold">
              Feedback
            </Text>
            <TextArea variant="classic" placeholder="Your feedback" />
          </Grid>
          <Flex asChild justify="between">
            <label>
              <Text color="gray" size="2">
                Attach screenshot?
              </Text>
              <Switch size="1" variant="classic" defaultChecked highContrast />
            </label>
          </Flex>
          <Grid columns="2" gap="2">
            <Button variant="surface">Back</Button>
            <Button variant="classic">Submit</Button>
          </Grid>
        </Flex>
      </div>

      {children}
    </Flex>
  );
});
SampleNestedUI.displayName = 'SampleNestedUI';

function DocsSection({ title, children }: { title: string; children: React.ReactNode }) {
  return (
    <>
      <Container mx="6">
        <Section size="2">
          <Heading size="6" weight="regular" mb="4" as="h2">
            {title}
          </Heading>
          {children}
        </Section>
      </Container>
      <Separator size="4" />
    </>
  );
}


================================================
File: apps/playground/app/test-as-child/page.tsx
================================================
import * as React from 'react';
import {
  AspectRatio,
  Avatar,
  Badge,
  Box,
  Card,
  Code,
  Container,
  Em,
  Flex,
  Kbd,
  Quote,
  ScrollArea,
  Section,
  Strong,
  TabNav,
  Text,
  Theme,
} from '@radix-ui/themes';
import { NextThemeProvider } from '../next-theme-provider';
import NextLink from 'next/link';

export default function Test() {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <NextThemeProvider>
          <Theme asChild>
            <div id="root">
              <Container px="8">
                <Section size="3">
                  <Flex direction="column" gap="6">
                    <Flex align="center" gap="3">
                      <Avatar fallback="A" />

                      <Avatar asChild fallback="A">
                        <button aria-label="Avatar button">some child</button>
                      </Avatar>

                      <Avatar
                        fallback="A"
                        src="https://images.unsplash.com/photo-1492633423870-43d1cd2775eb?&w=160&h=160&dpr=2&q=80"
                      />

                      <Avatar
                        asChild
                        fallback="A"
                        src="https://images.unsplash.com/photo-1492633423870-43d1cd2775eb?&w=160&h=160&dpr=2&q=80"
                      >
                        <button aria-label="Avatar button" />
                      </Avatar>

                      <Badge asChild>
                        <button>Badge as child</button>
                      </Badge>

                      <Card>Normal card</Card>

                      <Card asChild>
                        <button>Card as child</button>
                      </Card>

                      <Code asChild>
                        <button>Code as child</button>
                      </Code>
                    </Flex>

                    <Flex gap="5">
                      <TabNav.Root>
                        <TabNav.Link href="#">Tab 1</TabNav.Link>
                        <TabNav.Link href="#">Tab 2</TabNav.Link>
                        <TabNav.Link href="#">Tab 3</TabNav.Link>
                      </TabNav.Root>

                      <TabNav.Root>
                        <TabNav.Link asChild>
                          <NextLink href="#">Next Link 1</NextLink>
                        </TabNav.Link>
                        <TabNav.Link asChild>
                          <NextLink href="#">Next Link 2</NextLink>
                        </TabNav.Link>
                        <TabNav.Link asChild>
                          <NextLink href="#">Next Link 3</NextLink>
                        </TabNav.Link>
                      </TabNav.Root>
                    </Flex>

                    <Flex gap="5">
                      <Box width="300px" height="300px">
                        <ScrollArea asChild>
                          <section>
                            <Text as="p">
                              The goal of typography is to relate font size, line height, and line
                              width in a proportional way that maximizes beauty and makes reading
                              easier and more pleasant. The question is: What proportion(s) will
                              give us the best results? The golden ratio is often observed in nature
                              where beauty and utility intersect; perhaps we can use this “divine”
                              proportion to enhance these attributes in our typography.
                            </Text>
                            <Text as="p" size="3">
                              The CSS rule <Code>-webkit-font-smoothing: antialiased;</Code> has
                              been applied to all fonts.google.com pages where fonts are rendered.
                              This results in browsers using the{' '}
                              <Strong>greyscale antialiasing method</Strong> rather than default{' '}
                              <Em>subpixel rendering</Em> of fonts. Press <Kbd>⌘ Q</Kbd> to quit.{' '}
                              <Quote>
                                I believe this was probably introduced to get around inconsistencies
                                in rendering between browsers
                              </Quote>
                              , particular between Chrome and Safari on MacOS.
                            </Text>
                            <Box style={{ width: 300 }}>
                              <AspectRatio ratio={1}>
                                <img
                                  src="https://images.unsplash.com/photo-1683122803696-b3da13b071b2?&auto=format&fit=crop&w=400&q=80"
                                  alt="A dragonfly on a branch"
                                  style={{ objectFit: 'cover', width: '100%', height: '100%' }}
                                />
                              </AspectRatio>
                            </Box>
                          </section>
                        </ScrollArea>
                      </Box>

                      <Box asChild>
                        <Text>Box as child</Text>
                      </Box>
                      <Box as="span">Box as span</Box>
                      <Box>Box default</Box>
                    </Flex>

                    <Container asChild>
                      <section>Container as child</section>
                    </Container>
                  </Flex>
                </Section>
              </Container>
            </div>
          </Theme>
        </NextThemeProvider>
      </body>
    </html>
  );
}


================================================
File: apps/playground/app/test-avatar/page.tsx
================================================
import * as React from 'react';
import { Theme, Avatar, Flex, ThemePanel } from '@radix-ui/themes';
import { NextThemeProvider } from '../next-theme-provider';

export default function Test() {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <NextThemeProvider>
          <Theme asChild>
            <div id="root">
              <ThemePanel />
              <Flex align="center" gap="3">
                <Avatar src="./api/avatar" fallback="BG" />
                <Avatar src="#" fallback="BG" />
                <Avatar fallback="BG" />
                <Avatar fallback={<CustomUserIcon />} />
              </Flex>
            </div>
          </Theme>
        </NextThemeProvider>
      </body>
    </html>
  );
}

function CustomUserIcon() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="currentColor"
      className="w-6 h-6"
    >
      <path
        fillRule="evenodd"
        d="M7.5 6a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM3.751 20.105a8.25 8.25 0 0116.498 0 .75.75 0 01-.437.695A18.683 18.683 0 0112 22.5c-2.786 0-5.433-.608-7.812-1.7a.75.75 0 01-.437-.695z"
        clipRule="evenodd"
      />
    </svg>
  );
}


================================================
File: apps/playground/app/test-checkbox-card/page.tsx
================================================
'use client';

import * as React from 'react';
import {
  Theme,
  Container,
  Section,
  CheckboxCards,
  Grid,
  Button,
  Heading,
  Code,
} from '@radix-ui/themes';
import { NextThemeProvider } from '../next-theme-provider';

export default function Test() {
  const [frameworks, setFrameworks] = React.useState(['next']);
  const [frameworksForm, setFrameworksForm] = React.useState<FormDataEntryValue[]>([]);

  function handleChange(event: React.FormEvent<HTMLFormElement>) {
    const formData = new FormData(event.currentTarget);
    const values = formData.getAll('frameworks');
    setFrameworksForm(values);
  }

  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <NextThemeProvider>
          <Theme asChild>
            <div id="root">
              <Container px="8" size="3">
                <Section size="3">
                  <Grid columns="2" gap="7" align="start">
                    <Grid gap="5">
                      <Heading>Uncontrolled</Heading>
                      <CheckboxCards.Root name="frameworks" defaultValue={['next']}>
                        <CheckboxCards.Item value="next">Next.js</CheckboxCards.Item>
                        <CheckboxCards.Item value="remix">Remix</CheckboxCards.Item>
                        <CheckboxCards.Item value="astro">Astro</CheckboxCards.Item>
                        <CheckboxCards.Item value="htmx">HTMX</CheckboxCards.Item>
                      </CheckboxCards.Root>
                    </Grid>

                    <Grid gap="5">
                      <Heading>Controlled</Heading>
                      <CheckboxCards.Root
                        name="frameworks"
                        value={frameworks}
                        onValueChange={setFrameworks}
                      >
                        <CheckboxCards.Item value="next">Next.js</CheckboxCards.Item>
                        <CheckboxCards.Item value="remix">Remix</CheckboxCards.Item>
                        <CheckboxCards.Item value="astro">Astro</CheckboxCards.Item>
                        <CheckboxCards.Item value="htmx">HTMX</CheckboxCards.Item>
                      </CheckboxCards.Root>

                      <div>
                        <Code size="2">{JSON.stringify(frameworks)}</Code>
                      </div>
                    </Grid>

                    <form
                      onSubmit={(event) => {
                        handleChange(event);
                        event.preventDefault();
                      }}
                      onChange={handleChange}
                    >
                      <Grid gap="5">
                        <Heading>Within Form</Heading>

                        <CheckboxCards.Root name="frameworks">
                          <CheckboxCards.Item value="next">Next.js</CheckboxCards.Item>
                          <CheckboxCards.Item value="remix">Remix</CheckboxCards.Item>
                          <CheckboxCards.Item value="astro">Astro</CheckboxCards.Item>
                          <CheckboxCards.Item value="htmx">HTMX</CheckboxCards.Item>
                        </CheckboxCards.Root>

                        <Button type="submit" size="3">
                          Submit
                        </Button>

                        <div>
                          <Code size="2">{JSON.stringify(frameworksForm)}</Code>
                        </div>
                      </Grid>
                    </form>
                  </Grid>
                </Section>
              </Container>
            </div>
          </Theme>
        </NextThemeProvider>
      </body>
    </html>
  );
}


================================================
File: apps/playground/app/test-classic-button/page.tsx
================================================
import * as React from 'react';
import { Theme, ThemePanel, Container, Section, Flex, Button } from '@radix-ui/themes';
import { accentColors } from '@radix-ui/themes/props';
import { Pencil2Icon } from '@radix-ui/react-icons';

export default function Test() {
  return (
    <html lang="en">
      <body>
        <Theme asChild>
          <div id="root">
            <ThemePanel defaultOpen={false} />
            <Container px="5">
              <Section>
                <Flex direction="column" gap="2">
                  {accentColors.map((color) => (
                    <Flex key={color} gap="2">
                      <Button variant="classic" color={color}>
                        <Pencil2Icon />
                        Edit
                      </Button>
                      <Button variant="classic" color={color} highContrast>
                        <Pencil2Icon />
                        Edit
                      </Button>
                      <Button variant="solid" color={color} ml="4">
                        <Pencil2Icon />
                        Edit
                      </Button>
                      <Button variant="solid" color={color} highContrast>
                        <Pencil2Icon />
                        Edit
                      </Button>
                      <Button variant="soft" color={color} ml="4">
                        <Pencil2Icon />
                        Edit
                      </Button>
                      <Button variant="soft" color={color} highContrast>
                        <Pencil2Icon />
                        Edit
                      </Button>
                    </Flex>
                  ))}
                </Flex>
              </Section>
            </Container>
          </div>
        </Theme>
      </body>
    </html>
  );
}


================================================
File: apps/playground/app/test-data-list/page.tsx
================================================
'use client';
import Link from 'next/link';
import {
  Badge,
  Box,
  Button,
  CheckboxGroup,
  Container,
  DataList,
  Flex,
  Heading,
  IconButton,
  RadioGroup,
  Section,
  Separator,
  Text,
  Theme,
} from '@radix-ui/themes';
import { StarFilledIcon, InfoCircledIcon } from '@radix-ui/react-icons';
import React from 'react';
import { NextThemeProvider } from '../next-theme-provider';

export default function DataListPage() {
  const [debug, setDebug] = React.useState(true);
  const [trim, setTrim] = React.useState<'normal' | 'start' | 'end' | 'both'>('normal');

  return (
    <html data-debug-layout={debug}>
      <body style={{ minWidth: 768 }}>
        <style
          dangerouslySetInnerHTML={{
            __html: `
              [data-debug-layout="true"] {
                .rt-DataListRoot {
                  outline: 1px dashed var(--purple-a7);
                  outline-offset: -1px;
                }

                .rt-DataListItem {
                  background-color: var(--red-a3);
                }

                .rt-DataListLabel {
                  position: relative;

                  &::before {
                    content: '';
                    position: absolute;
                    height: 1px;
                    left: 0;
                    top: 15px;
                    width: var(--container-2);
                    pointer-events: none;
                    background-color: var(--red-a8);
                  }
                }
              }
            `,
          }}
        />

        <NextThemeProvider>
          <Theme>
            <Container size="2" mx="5">
              <Section>
                <Flex gap="7" direction="column">
                  <Box>
                    <Box mb="5">
                      <Text as="div" size="2" weight="bold" mb="1">
                        Debug layout
                      </Text>
                      <CheckboxGroup.Root
                        value={debug ? ['debug'] : []}
                        onValueChange={(value) => setDebug(value.includes('debug'))}
                      >
                        <CheckboxGroup.Item value="debug">Show debug view</CheckboxGroup.Item>
                      </CheckboxGroup.Root>
                    </Box>

                    <Box mb="5">
                      <Text as="div" size="2" weight="bold" mb="1">
                        Trim
                      </Text>
                      <RadioGroup.Root
                        value={trim}
                        onValueChange={(value: typeof trim) => setTrim(value)}
                      >
                        <RadioGroup.Item value="normal">Normal</RadioGroup.Item>
                        <RadioGroup.Item value="start">Start</RadioGroup.Item>
                        <RadioGroup.Item value="end">End</RadioGroup.Item>
                        <RadioGroup.Item value="both">Both</RadioGroup.Item>
                      </RadioGroup.Root>
                    </Box>

                    <Separator size="4" />
                  </Box>

                  <Flex direction="column">
                    <Heading mb="4" size="3">
                      Mixed content
                    </Heading>
                    <DataList.Root trim={trim}>
                      <DataList.Item>
                        <DataList.Label>Status</DataList.Label>
                        <DataList.Value>
                          <Badge color="green" size="1">
                            Active
                          </Badge>
                        </DataList.Value>
                      </DataList.Item>

                      <DataList.Item align="center">
                        <DataList.Label>Name</DataList.Label>
                        <DataList.Value>
                          <Button size="1">Add</Button>
                        </DataList.Value>
                      </DataList.Item>

                      <DataList.Item align="center">
                        <DataList.Label>Flex</DataList.Label>
                        <DataList.Value>
                          <Flex align="center" gap="2">
                            <IconButton size="1" variant="soft">
                              <InfoCircledIcon />
                            </IconButton>
                            <Text>Info</Text>
                          </Flex>
                        </DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label>Email</DataList.Label>
                        <DataList.Value>vlad@workos.com</DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label>Organization</DataList.Label>
                        <DataList.Value>
                          <Link href="https://workos.com">WorkOS</Link>
                        </DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label>Long value</DataList.Label>
                        <DataList.Value>
                          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla ac nisl et
                          libero ultricies viverra quis vitae quam. Proin a feugiat metus.
                        </DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label>Truncated value</DataList.Label>
                        <DataList.Value>
                          <Text truncate>
                            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla ac nisl
                            et libero ultricies viverra quis vitae quam. Proin a feugiat metus.
                          </Text>
                        </DataList.Value>
                      </DataList.Item>

                      <DataList.Item align="center">
                        <DataList.Label>Authentication methods</DataList.Label>
                        <DataList.Value>
                          <Flex gap="2" align="center">
                            <StarFilledIcon />
                            <StarFilledIcon />
                          </Flex>
                        </DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label>Accent</DataList.Label>
                        <DataList.Value>
                          <Flex gap="2" align="center">
                            <Box
                              width="16px"
                              height="16px"
                              style={{ backgroundColor: 'royalblue' }}
                            />
                            <Text>Blue</Text>
                          </Flex>
                        </DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label>Long value</DataList.Label>
                        <DataList.Value>
                          Sed luctus, est id feugiat blandit, sapien nisl lobortis arcu, eu
                          malesuada nulla ex ut lorem. In odio nisl, consectetur id commodo vel,
                          posuere eu risus.
                        </DataList.Value>
                      </DataList.Item>
                    </DataList.Root>
                  </Flex>

                  <Flex direction="column">
                    <Heading mb="4" size="3">
                      Mixed alignment
                    </Heading>

                    <Flex direction="column" gap="6">
                      <DataList.Root trim={trim}>
                        {[1, 2, 3].map((i) => (
                          <DataList.Item align="baseline" key={i}>
                            <DataList.Label>Align</DataList.Label>
                            <DataList.Value>Baseline</DataList.Value>
                          </DataList.Item>
                        ))}
                      </DataList.Root>

                      <DataList.Root trim={trim}>
                        {[1, 2, 3].map((i) => (
                          <DataList.Item align="start" key={i}>
                            <DataList.Label>Align</DataList.Label>
                            <DataList.Value>Start</DataList.Value>
                          </DataList.Item>
                        ))}
                      </DataList.Root>

                      <DataList.Root trim={trim}>
                        {[1, 2, 3].map((i) => (
                          <DataList.Item align="stretch" key={i}>
                            <DataList.Label>Align</DataList.Label>
                            <DataList.Value>Stretch</DataList.Value>
                          </DataList.Item>
                        ))}
                      </DataList.Root>

                      <DataList.Root trim={trim}>
                        {[1, 2, 3].map((i) => (
                          <DataList.Item align="center" key={i}>
                            <DataList.Label>Align</DataList.Label>
                            <DataList.Value>Center</DataList.Value>
                          </DataList.Item>
                        ))}
                      </DataList.Root>

                      <DataList.Root trim={trim}>
                        {[1, 2, 3].map((i) => (
                          <DataList.Item align="end" key={i}>
                            <DataList.Label>Align</DataList.Label>
                            <DataList.Value>End</DataList.Value>
                          </DataList.Item>
                        ))}
                      </DataList.Root>

                      <DataList.Root trim={trim}>
                        {[1, 2, 3].map((i) => (
                          <DataList.Item align="baseline" key={i}>
                            <DataList.Label>Align</DataList.Label>
                            <DataList.Value>
                              <Button size="2">Baseline</Button>
                            </DataList.Value>{' '}
                          </DataList.Item>
                        ))}
                      </DataList.Root>

                      <DataList.Root trim={trim}>
                        {[1, 2, 3].map((i) => (
                          <DataList.Item align="start" key={i}>
                            <DataList.Label>Align</DataList.Label>
                            <DataList.Value>
                              <Button size="2">Start</Button>
                            </DataList.Value>
                          </DataList.Item>
                        ))}
                      </DataList.Root>

                      <DataList.Root trim={trim}>
                        {[1, 2, 3].map((i) => (
                          <DataList.Item align="stretch" key={i}>
                            <DataList.Label>Align</DataList.Label>
                            <DataList.Value>
                              <Button size="2">Stretch</Button>
                            </DataList.Value>
                          </DataList.Item>
                        ))}
                      </DataList.Root>

                      <DataList.Root trim={trim}>
                        {[1, 2, 3].map((i) => (
                          <DataList.Item align="center" key={i}>
                            <DataList.Label>Align</DataList.Label>
                            <DataList.Value>
                              <Button size="2">Center</Button>
                            </DataList.Value>
                          </DataList.Item>
                        ))}
                      </DataList.Root>

                      <DataList.Root trim={trim}>
                        {[1, 2, 3].map((i) => (
                          <DataList.Item align="end" key={i}>
                            <DataList.Label>Align</DataList.Label>
                            <DataList.Value>
                              <Button size="2">End</Button>
                            </DataList.Value>
                          </DataList.Item>
                        ))}
                      </DataList.Root>
                    </Flex>
                  </Flex>

                  <Flex direction="column">
                    <Heading mb="4" size="3">
                      Single item
                    </Heading>
                    <DataList.Root trim={trim}>
                      <DataList.Item>
                        <DataList.Label>Foo</DataList.Label>
                        <DataList.Value>Bar</DataList.Value>
                      </DataList.Item>
                    </DataList.Root>
                  </Flex>

                  <Flex direction="column">
                    <Heading mb="4" size="3">
                      Long labels
                    </Heading>
                    <DataList.Root trim={trim}>
                      <DataList.Item>
                        <DataList.Label>Name</DataList.Label>
                        <DataList.Value>Vlad Moroz</DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label>Email</DataList.Label>
                        <DataList.Value>vlad@workos.com</DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label>
                          Lorem ipsum dolor sit amet consectetur adipscing elit
                        </DataList.Label>
                        <DataList.Value>
                          <Link href="https://workos.com">WorkOS</Link>
                        </DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label maxWidth="360px">
                          <Text truncate>
                            Sed luctus, est id feugiat blandit, sapien nisl lobortis arcu, eu
                            malesuada nulla ex ut lorem. In odio nisl, consectetur id commodo vel,
                            posuere eu risus.
                          </Text>
                        </DataList.Label>
                        <DataList.Value>← should be truncated</DataList.Value>
                      </DataList.Item>
                    </DataList.Root>
                  </Flex>

                  <Flex direction="column">
                    <Heading mb="4" size="3">
                      Vertical layout
                    </Heading>
                    <DataList.Root orientation="vertical" trim={trim}>
                      <DataList.Item>
                        <DataList.Label>Status</DataList.Label>
                        <DataList.Value>
                          <Badge color="green" size="1">
                            Active
                          </Badge>
                        </DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label>Name</DataList.Label>
                        <DataList.Value>
                          <Button size="1">Add</Button>
                        </DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label>Flex</DataList.Label>
                        <DataList.Value>
                          <Flex align="center" gap="2">
                            <IconButton size="1" variant="soft">
                              <InfoCircledIcon />
                            </IconButton>
                            <Text>Info</Text>
                          </Flex>
                        </DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label>Email</DataList.Label>
                        <DataList.Value>vlad@workos.com</DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label>Organization</DataList.Label>
                        <DataList.Value>
                          <Link href="https://workos.com">WorkOS</Link>
                        </DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label>Long value</DataList.Label>
                        <DataList.Value>
                          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla ac nisl et
                          libero ultricies viverra quis vitae quam. Proin a feugiat metus.
                        </DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label>Truncated value</DataList.Label>
                        <DataList.Value>
                          <Text truncate>
                            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla ac nisl
                            et libero ultricies viverra quis vitae quam. Proin a feugiat metus.
                          </Text>
                        </DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label>Authentication methods</DataList.Label>
                        <DataList.Value>
                          <Flex gap="2">
                            <StarFilledIcon />
                            <StarFilledIcon />
                          </Flex>
                        </DataList.Value>
                      </DataList.Item>

                      <DataList.Item>
                        <DataList.Label>Long value</DataList.Label>
                        <DataList.Value>
                          Sed luctus, est id feugiat blandit, sapien nisl lobortis arcu, eu
                          malesuada nulla ex ut lorem. In odio nisl, consectetur id commodo vel,
                          posuere eu risus.
                        </DataList.Value>
                      </DataList.Item>
                    </DataList.Root>
                  </Flex>
                </Flex>
              </Section>
            </Container>
          </Theme>
        </NextThemeProvider>
      </body>
    </html>
  );
}


================================================
File: apps/playground/app/test-dialog/page.tsx
================================================
import * as React from 'react';
import { Theme, Flex, Button, Container, Dialog, Text } from '@radix-ui/themes';
import { NextThemeProvider } from '../next-theme-provider';
import { Share2Icon } from '@radix-ui/react-icons';

export default function Test() {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <NextThemeProvider>
          <Theme asChild>
            <div id="root">
              <Container px="8">
                <Flex
                  direction="column"
                  align="center"
                  justify="center"
                  gap="5"
                  height="150vh"
                  pb="60vh"
                >
                  <Text size="2" color="gray">
                    Align start
                  </Text>
                  <Flex align="center" justify="center" gap="5" mb="5">
                    <Dialog.Root>
                      <Dialog.Trigger>
                        <Button variant="solid">Short dialog</Button>
                      </Dialog.Trigger>
                      <Dialog.Content align="start" maxWidth="400px">
                        <Dialog.Title>Short dialog</Dialog.Title>
                        <Dialog.Description>{shortText}</Dialog.Description>
                        <Flex gap="3" mt="4" justify="end">
                          <Dialog.Close>
                            <Button variant="soft" color="gray">
                              Cancel
                            </Button>
                          </Dialog.Close>
                          <Dialog.Close>
                            <Button variant="solid">
                              Share <Share2Icon />
                            </Button>
                          </Dialog.Close>
                        </Flex>
                      </Dialog.Content>
                    </Dialog.Root>

                    <Dialog.Root>
                      <Dialog.Trigger>
                        <Button variant="solid">Long dialog</Button>
                      </Dialog.Trigger>
                      <Dialog.Content align="start" maxWidth="400px">
                        <Dialog.Title>Long dialog</Dialog.Title>
                        <Dialog.Description>{longText}</Dialog.Description>
                        <Flex gap="3" mt="4" justify="end">
                          <Dialog.Close>
                            <Button variant="soft" color="gray">
                              Cancel
                            </Button>
                          </Dialog.Close>
                          <Dialog.Close>
                            <Button variant="solid">
                              Share <Share2Icon />
                            </Button>
                          </Dialog.Close>
                        </Flex>
                      </Dialog.Content>
                    </Dialog.Root>

                    <Dialog.Root>
                      <Dialog.Trigger>
                        <Button variant="solid">Fixed height dialog</Button>
                      </Dialog.Trigger>
                      <Dialog.Content align="start" maxWidth="400px" maxHeight="400px">
                        <Dialog.Title>Fixed height dialog</Dialog.Title>
                        <Dialog.Description>{longText}</Dialog.Description>
                        <Flex gap="3" mt="4" justify="end">
                          <Dialog.Close>
                            <Button variant="soft" color="gray">
                              Cancel
                            </Button>
                          </Dialog.Close>
                          <Dialog.Close>
                            <Button variant="solid">
                              Share <Share2Icon />
                            </Button>
                          </Dialog.Close>
                        </Flex>
                      </Dialog.Content>
                    </Dialog.Root>
                  </Flex>

                  <Text size="2" color="gray">
                    Align center
                  </Text>
                  <Flex align="center" justify="center" gap="5">
                    <Dialog.Root>
                      <Dialog.Trigger>
                        <Button variant="solid">Short dialog</Button>
                      </Dialog.Trigger>
                      <Dialog.Content maxWidth="400px">
                        <Dialog.Title>Short dialog</Dialog.Title>
                        <Dialog.Description>{shortText}</Dialog.Description>
                        <Flex gap="3" mt="4" justify="end">
                          <Dialog.Close>
                            <Button variant="soft" color="gray">
                              Cancel
                            </Button>
                          </Dialog.Close>
                          <Dialog.Close>
                            <Button variant="solid">
                              Share <Share2Icon />
                            </Button>
                          </Dialog.Close>
                        </Flex>
                      </Dialog.Content>
                    </Dialog.Root>

                    <Dialog.Root>
                      <Dialog.Trigger>
                        <Button variant="solid">Long dialog</Button>
                      </Dialog.Trigger>
                      <Dialog.Content maxWidth="400px">
                        <Dialog.Title>Long dialog</Dialog.Title>
                        <Dialog.Description>{longText}</Dialog.Description>
                        <Flex gap="3" mt="4" justify="end">
                          <Dialog.Close>
                            <Button variant="soft" color="gray">
                              Cancel
                            </Button>
                          </Dialog.Close>
                          <Dialog.Close>
                            <Button variant="solid">
                              Share <Share2Icon />
                            </Button>
                          </Dialog.Close>
                        </Flex>
                      </Dialog.Content>
                    </Dialog.Root>

                    <Dialog.Root>
                      <Dialog.Trigger>
                        <Button variant="solid">Fixed height dialog</Button>
                      </Dialog.Trigger>
                      <Dialog.Content maxWidth="400px" maxHeight="400px">
                        <Dialog.Title>Fixed height dialog</Dialog.Title>
                        <Dialog.Description>{longText}</Dialog.Description>
                        <Flex gap="3" mt="4" justify="end">
                          <Dialog.Close>
                            <Button variant="soft" color="gray">
                              Cancel
                            </Button>
                          </Dialog.Close>
                          <Dialog.Close>
                            <Button variant="solid">
                              Share <Share2Icon />
                            </Button>
                          </Dialog.Close>
                        </Flex>
                      </Dialog.Content>
                    </Dialog.Root>
                  </Flex>
                </Flex>
              </Container>
            </div>
          </Theme>
        </NextThemeProvider>
      </body>
    </html>
  );
}

const shortText = `
  Under a sky as clear as a sapphire, the audacious wind embarked on yet
  another sojourn. Its origin, coupled with its destination, remained a
  riddle, shelved in the library of the unknown.`;

const longText = `
  The wind was a nomadic spirit; it was a tale that wrote itself, a song that
  hummed its own melodies. It darted through the expansive, golden fields of
  barley, teasing them into a gentle, alluring dance. Each undulation in the
  sea of gold bore testimony to its presence, a spectral swirl spinning tales
  only discernible to the observant. Her dancing companions, the swaying
  barley stalks, blushed under the sun’s blazing gaze, casting long, wiggling
  shadows that seemed to chase the wind in playful pursuit. The wind’s
  transient signature, a secret between her and the barley sea, vanished
  almost as swiftly as it appeared, leaving behind a tantalizing trace of what
  had been. A comforting rhythm pulsated through the fields as the wind
  orchestrated a symphony. It brushed past stalks with soft whispers,
  sometimes a gentle caress, at times a playful push. Each stalk, a musician
  in its own right, joined in an unplanned harmony that painted pure magic
  under the cosmic dome. The wind, bearing the scent of a thousand journeys,
  breathed life into stillness, animating the scene with an unseen paintbrush.
  Pearls of morning dew clung to the blades of grass, disturbed by the wind’s
  passing only to shatter into a scattered rainbow of flickering prisms. The
  soft hum of rustling leaves sang eulogies of time passed, mixed with odes to
  moments present and ballads yet untold. As the sun became a glowing ember in
  the twilight canvas, the wind drew a silent veil over the day. In a hushed
  lullaby to the moon, it meandered over the sleeping earth, stroking the
  peaceful night with its invisible fingers. It was ceaseless, tireless - a
  silent serenade of the world suspended in space and time. The wind, thus,
  traveled through the fields: ever-changing yet constant, invisible yet
  omnipresent, silent yet narrating stories. It wasn’t just the wind, but
  life’s unseen narrator, a mysterious poet scripting verses on nature’s
  endless parchment. The wind traveling through the fields wasn’t merely an
  occurrence; it was a testament to life, a novel written by the unseen, read
  by the felt.`;


================================================
File: apps/playground/app/test-grid-area/page.tsx
================================================
import * as React from 'react';
import {
  Theme,
  Flex,
  Grid,
  Text,
  Button,
  Container,
  Section,
  Card,
  IconButton,
  Box,
  Heading,
} from '@radix-ui/themes';
import { NextThemeProvider } from '../next-theme-provider';
import { GridIcon, SunIcon } from '@radix-ui/react-icons';

export default function Test() {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <NextThemeProvider>
          <Theme asChild>
            <div id="root">
              <Container px="8">
                <Section size="3">
                  <Card
                    size={{ initial: '3', sm: '4', lg: '5' }}
                    style={{ maxWidth: 500 }}
                    mx="auto"
                  >
                    <Grid
                      align="center"
                      gap={{ initial: '3', sm: '4', lg: '5' }}
                      columns="auto 1fr"
                      rows="auto 1fr"
                      areas='"icon title" ". body"'
                    >
                      <Box asChild gridArea="icon">
                        <GridIcon />
                      </Box>
                      <Box asChild gridArea="title">
                        <Heading as="h4">Named Areas</Heading>
                      </Box>
                      <Box asChild gridArea="body">
                        <Text>
                          Lorem ipsum dolor sit amet consectetur adipisicing elit. Eum, officiis
                          labore commodi maxime corporis expedita aliquid vero praesentium dolor id
                          numquam illo est, quod voluptatem mollitia inventore pariatur odit
                          delectus.
                        </Text>
                      </Box>
                    </Grid>
                  </Card>
                </Section>

                <Section size="3">
                  <Card
                    size={{ initial: '3', sm: '4', lg: '5' }}
                    style={{ maxWidth: 500 }}
                    mx="auto"
                  >
                    <Grid
                      align="center"
                      gap={{ initial: '3', sm: '4', lg: '5' }}
                      columns={{
                        initial: 'auto repeat(2, 1fr)',
                        sm: 'auto repeat(3, 1fr)',
                        lg: 'auto repeat(4, 1fr)',
                      }}
                      rows="auto 1fr"
                    >
                      <Box asChild gridArea="'1 / 1 / span 1 / span 1'">
                        <GridIcon />
                      </Box>
                      <Box
                        asChild
                        gridArea={{
                          initial: '1 / 2 / span 1 / span 2',
                          sm: '1 / 2 / span 1 / span 3',
                          lg: '1 / 2 / span 1 / span 4',
                        }}
                      >
                        <Heading as="h4">Placed Areas</Heading>
                      </Box>
                      <Box
                        asChild
                        gridArea={{
                          initial: '2 / 2 / span 1 / span 2',
                          sm: '2 / 2 / span 1 / span 3',
                          lg: '2 / 2 / span 1 / span 4',
                        }}
                      >
                        <Text>
                          Lorem ipsum dolor sit amet consectetur adipisicing elit. Eum, officiis
                          labore commodi maxime corporis expedita aliquid vero praesentium dolor id
                          numquam illo est, quod voluptatem mollitia inventore pariatur odit
                          delectus.
                        </Text>
                      </Box>
                    </Grid>
                  </Card>
                </Section>

                <Section size="3">
                  <Flex align="center" gap={{ initial: '3', sm: '4', lg: '5' }}>
                    <IconButton variant="ghost" size={{ initial: '1', sm: '2', lg: '3' }}>
                      <SunIcon />
                    </IconButton>
                    <Button variant="ghost" size={{ initial: '1', sm: '2', lg: '3' }}>
                      Change theme
                    </Button>
                    <Button size={{ initial: '1', sm: '2', lg: '3' }}>Change theme</Button>
                  </Flex>
                </Section>
              </Container>
            </div>
          </Theme>
        </NextThemeProvider>
      </body>
    </html>
  );
}


================================================
File: apps/playground/app/test-high-contrast/page.tsx
================================================
import * as React from 'react';
import {
  Text,
  Theme,
  Container,
  Section,
  Flex,
  Heading,
  Callout,
  Link,
  Code,
  Blockquote,
} from '@radix-ui/themes';
import { NextThemeProvider } from '../next-theme-provider';

export default function Test() {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <NextThemeProvider>
          <Theme asChild>
            <div id="root">
              <Container px="8">
                <Section size="3">
                  <Flex direction="column" gap="9">
                    <Flex direction="column" align="start" gap="4">
                      <Text color="gray" size="2">
                        No color
                      </Text>

                      <Heading>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                      </Heading>

                      <Text>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                      </Text>

                      <Text>
                        Ambiguous voice of a heart which prefers{' '}
                        <Link href="#">
                          <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Text>

                      <Text>
                        Ambiguous voice of a heart which{' '}
                        <Link href="#">
                          prefers <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Text>

                      <Blockquote>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                      </Blockquote>

                      <Blockquote>
                        Ambiguous voice of a heart which prefers{' '}
                        <Link href="#">
                          <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Blockquote>

                      <Blockquote>
                        Ambiguous voice of a heart which{' '}
                        <Link href="#">
                          prefers <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Blockquote>

                      <Code size="2">
                        Ambiguous voice of a heart which{' '}
                        <Link href="#">
                          prefers <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Code>

                      <Callout.Root>
                        <Callout.Text>
                          Ambiguous voice of a heart which prefers{' '}
                          <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                        </Callout.Text>
                      </Callout.Root>
                    </Flex>

                    <Flex direction="column" align="start" gap="4">
                      <Text color="gray" size="2">
                        No color, high contrast
                      </Text>

                      <Heading highContrast>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                      </Heading>

                      <Text highContrast>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                      </Text>

                      <Text highContrast>
                        Ambiguous voice of a heart which prefers{' '}
                        <Link href="#">
                          <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Text>

                      <Text highContrast>
                        Ambiguous voice of a heart which{' '}
                        <Link href="#">
                          prefers <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Text>

                      <Blockquote highContrast>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                      </Blockquote>

                      <Blockquote highContrast>
                        Ambiguous voice of a heart which prefers{' '}
                        <Link href="#">
                          <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Blockquote>

                      <Blockquote highContrast>
                        Ambiguous voice of a heart which{' '}
                        <Link href="#">
                          prefers <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Blockquote>

                      <Code highContrast size="2">
                        Ambiguous voice of a heart which{' '}
                        <Link href="#">
                          prefers <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Code>

                      <Callout.Root highContrast>
                        <Callout.Text>
                          Ambiguous voice of a heart which prefers{' '}
                          <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                        </Callout.Text>
                      </Callout.Root>
                    </Flex>

                    <Flex direction="column" align="start" gap="4">
                      <Text color="gray" size="2">
                        All inline components with {'color="indigo"'}
                      </Text>

                      <Heading>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code color="indigo" variant="ghost">
                          kiwi bowls
                        </Code>{' '}
                        to a{' '}
                        <Link color="indigo" href="#">
                          zephyr
                        </Link>
                        .
                      </Heading>

                      <Text>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code color="indigo" variant="ghost">
                          kiwi bowls
                        </Code>{' '}
                        to a{' '}
                        <Link color="indigo" href="#">
                          zephyr
                        </Link>
                        .
                      </Text>

                      <Text>
                        Ambiguous voice of a heart which prefers{' '}
                        <Link color="indigo" href="#">
                          <Code color="indigo" variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link color="indigo" href="#">
                          zephyr
                        </Link>
                        .
                      </Text>

                      <Text>
                        Ambiguous voice of a heart which{' '}
                        <Link color="indigo" href="#">
                          prefers{' '}
                          <Code color="indigo" variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link color="indigo" href="#">
                          zephyr
                        </Link>
                        .
                      </Text>

                      <Blockquote>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code color="indigo" variant="ghost">
                          kiwi bowls
                        </Code>{' '}
                        to a{' '}
                        <Link color="indigo" href="#">
                          zephyr
                        </Link>
                        .
                      </Blockquote>

                      <Blockquote>
                        Ambiguous voice of a heart which prefers{' '}
                        <Link color="indigo" href="#">
                          <Code color="indigo" variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link color="indigo" href="#">
                          zephyr
                        </Link>
                        .
                      </Blockquote>

                      <Blockquote>
                        Ambiguous voice of a heart which{' '}
                        <Link color="indigo" href="#">
                          prefers{' '}
                          <Code color="indigo" variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link color="indigo" href="#">
                          zephyr
                        </Link>
                        .
                      </Blockquote>

                      <Code size="2">
                        Ambiguous voice of a heart which{' '}
                        <Link color="indigo" href="#">
                          prefers{' '}
                          <Code color="indigo" variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link color="indigo" href="#">
                          zephyr
                        </Link>
                        .
                      </Code>

                      <Callout.Root>
                        <Callout.Text>
                          Ambiguous voice of a heart which prefers{' '}
                          <Code color="indigo" variant="ghost">
                            kiwi bowls
                          </Code>{' '}
                          to a{' '}
                          <Link color="indigo" href="#">
                            zephyr
                          </Link>
                          .
                        </Callout.Text>
                      </Callout.Root>
                    </Flex>

                    <Flex direction="column" align="start" gap="4">
                      <Text color="gray" size="2">
                        All inline components with high contrast
                      </Text>

                      <Heading>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code highContrast variant="ghost">
                          kiwi bowls
                        </Code>{' '}
                        to a{' '}
                        <Link highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Heading>

                      <Text>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code highContrast variant="ghost">
                          kiwi bowls
                        </Code>{' '}
                        to a{' '}
                        <Link highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Text>

                      <Text>
                        Ambiguous voice of a heart which prefers{' '}
                        <Link highContrast href="#">
                          <Code highContrast variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Text>

                      <Text>
                        Ambiguous voice of a heart which{' '}
                        <Link highContrast href="#">
                          prefers{' '}
                          <Code highContrast variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Text>

                      <Blockquote>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code highContrast variant="ghost">
                          kiwi bowls
                        </Code>{' '}
                        to a{' '}
                        <Link highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Blockquote>

                      <Blockquote>
                        Ambiguous voice of a heart which prefers{' '}
                        <Link highContrast href="#">
                          <Code highContrast variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Blockquote>

                      <Blockquote>
                        Ambiguous voice of a heart which{' '}
                        <Link highContrast href="#">
                          prefers{' '}
                          <Code highContrast variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Blockquote>

                      <Code size="2">
                        Ambiguous voice of a heart which{' '}
                        <Link highContrast href="#">
                          prefers{' '}
                          <Code highContrast variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Code>

                      <Callout.Root>
                        <Callout.Text>
                          Ambiguous voice of a heart which prefers{' '}
                          <Code highContrast variant="ghost">
                            kiwi bowls
                          </Code>{' '}
                          to a{' '}
                          <Link highContrast href="#">
                            zephyr
                          </Link>
                          .
                        </Callout.Text>
                      </Callout.Root>
                    </Flex>

                    <Flex direction="column" align="start" gap="4">
                      <Text color="gray" size="2">
                        All inline components with {'color="indigo"'} and high contrast
                      </Text>

                      <Heading>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code color="indigo" highContrast variant="ghost">
                          kiwi bowls
                        </Code>{' '}
                        to a{' '}
                        <Link color="indigo" highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Heading>

                      <Text>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code color="indigo" highContrast variant="ghost">
                          kiwi bowls
                        </Code>{' '}
                        to a{' '}
                        <Link color="indigo" highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Text>

                      <Text>
                        Ambiguous voice of a heart which prefers{' '}
                        <Link color="indigo" highContrast href="#">
                          <Code color="indigo" highContrast variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link color="indigo" highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Text>

                      <Text>
                        Ambiguous voice of a heart which{' '}
                        <Link color="indigo" highContrast href="#">
                          prefers{' '}
                          <Code color="indigo" highContrast variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link color="indigo" highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Text>

                      <Blockquote>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code color="indigo" highContrast variant="ghost">
                          kiwi bowls
                        </Code>{' '}
                        to a{' '}
                        <Link color="indigo" highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Blockquote>

                      <Blockquote>
                        Ambiguous voice of a heart which prefers{' '}
                        <Link color="indigo" highContrast href="#">
                          <Code color="indigo" highContrast variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link color="indigo" highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Blockquote>

                      <Blockquote>
                        Ambiguous voice of a heart which{' '}
                        <Link color="indigo" highContrast href="#">
                          prefers{' '}
                          <Code color="indigo" highContrast variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link color="indigo" highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Blockquote>

                      <Code size="2">
                        Ambiguous voice of a heart which{' '}
                        <Link color="indigo" highContrast href="#">
                          prefers{' '}
                          <Code color="indigo" highContrast variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link color="indigo" highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Code>

                      <Callout.Root>
                        <Callout.Text>
                          Ambiguous voice of a heart which prefers{' '}
                          <Code color="indigo" highContrast variant="ghost">
                            kiwi bowls
                          </Code>{' '}
                          to a{' '}
                          <Link color="indigo" highContrast href="#">
                            zephyr
                          </Link>
                          .
                        </Callout.Text>
                      </Callout.Root>
                    </Flex>

                    <Flex direction="column" align="start" gap="4">
                      <Text color="gray" size="2">
                        All wrapping components with {'color="indigo"'}
                      </Text>

                      <Heading color="indigo">
                        Ambiguous voice of a heart which prefers{' '}
                        <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                      </Heading>

                      <Text color="indigo">
                        Ambiguous voice of a heart which prefers{' '}
                        <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                      </Text>

                      <Text color="indigo">
                        Ambiguous voice of a heart which prefers{' '}
                        <Link href="#">
                          <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Text>

                      <Text color="indigo">
                        Ambiguous voice of a heart which{' '}
                        <Link href="#">
                          prefers <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Text>

                      <Blockquote color="indigo">
                        Ambiguous voice of a heart which prefers{' '}
                        <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                      </Blockquote>

                      <Blockquote color="indigo">
                        Ambiguous voice of a heart which prefers{' '}
                        <Link href="#">
                          <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Blockquote>

                      <Blockquote color="indigo">
                        Ambiguous voice of a heart which{' '}
                        <Link href="#">
                          prefers <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Blockquote>

                      <Code size="2" color="indigo">
                        Ambiguous voice of a heart which{' '}
                        <Link href="#">
                          prefers <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Code>

                      <Callout.Root color="indigo">
                        <Callout.Text>
                          Ambiguous voice of a heart which prefers{' '}
                          <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                        </Callout.Text>
                      </Callout.Root>
                    </Flex>

                    <Flex direction="column" align="start" gap="4">
                      <Text color="gray" size="2">
                        All wrapping components with {'color="indigo"'} and inline components with
                        high contrast
                      </Text>

                      <Heading color="indigo">
                        Ambiguous voice of a heart which prefers{' '}
                        <Code highContrast variant="ghost">
                          kiwi bowls
                        </Code>{' '}
                        to a{' '}
                        <Link highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Heading>

                      <Text color="indigo">
                        Ambiguous voice of a heart which prefers{' '}
                        <Code highContrast variant="ghost">
                          kiwi bowls
                        </Code>{' '}
                        to a{' '}
                        <Link highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Text>

                      <Text color="indigo">
                        Ambiguous voice of a heart which prefers{' '}
                        <Link highContrast href="#">
                          <Code highContrast variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Text>

                      <Text color="indigo">
                        Ambiguous voice of a heart which{' '}
                        <Link highContrast href="#">
                          prefers{' '}
                          <Code highContrast variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Text>

                      <Blockquote color="indigo">
                        Ambiguous voice of a heart which prefers{' '}
                        <Code highContrast variant="ghost">
                          kiwi bowls
                        </Code>{' '}
                        to a{' '}
                        <Link highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Blockquote>

                      <Blockquote color="indigo">
                        Ambiguous voice of a heart which prefers{' '}
                        <Link highContrast href="#">
                          <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a{' '}
                        <Link highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Blockquote>

                      <Blockquote color="indigo">
                        Ambiguous voice of a heart which{' '}
                        <Link highContrast href="#">
                          prefers{' '}
                          <Code highContrast variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Blockquote>

                      <Code size="2" color="indigo">
                        Ambiguous voice of a heart which{' '}
                        <Link highContrast href="#">
                          prefers{' '}
                          <Code highContrast variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link highContrast href="#">
                          zephyr
                        </Link>
                        .
                      </Code>

                      <Callout.Root color="indigo">
                        <Callout.Text>
                          Ambiguous voice of a heart which prefers{' '}
                          <Code highContrast variant="ghost">
                            kiwi bowls
                          </Code>{' '}
                          to a{' '}
                          <Link highContrast href="#">
                            zephyr
                          </Link>
                          .
                        </Callout.Text>
                      </Callout.Root>
                    </Flex>

                    <Flex direction="column" align="start" gap="4">
                      <Text color="gray" size="2">
                        All wrapping components with {'color="indigo"'} and inline components with{' '}
                        {'color="indigo"'}
                      </Text>

                      <Heading color="indigo">
                        Ambiguous voice of a heart which prefers{' '}
                        <Code color="indigo" variant="ghost">
                          kiwi bowls
                        </Code>{' '}
                        to a{' '}
                        <Link color="indigo" href="#">
                          zephyr
                        </Link>
                        .
                      </Heading>

                      <Text color="indigo">
                        Ambiguous voice of a heart which prefers{' '}
                        <Code color="indigo" variant="ghost">
                          kiwi bowls
                        </Code>{' '}
                        to a{' '}
                        <Link color="indigo" href="#">
                          zephyr
                        </Link>
                        .
                      </Text>

                      <Text color="indigo">
                        Ambiguous voice of a heart which prefers{' '}
                        <Link color="indigo" href="#">
                          <Code color="indigo" variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link color="indigo" href="#">
                          zephyr
                        </Link>
                        .
                      </Text>

                      <Text color="indigo">
                        Ambiguous voice of a heart which{' '}
                        <Link color="indigo" href="#">
                          prefers{' '}
                          <Code color="indigo" variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link color="indigo" href="#">
                          zephyr
                        </Link>
                        .
                      </Text>

                      <Blockquote color="indigo">
                        Ambiguous voice of a heart which prefers{' '}
                        <Code color="indigo" variant="ghost">
                          kiwi bowls
                        </Code>{' '}
                        to a{' '}
                        <Link color="indigo" href="#">
                          zephyr
                        </Link>
                        .
                      </Blockquote>

                      <Blockquote color="indigo">
                        Ambiguous voice of a heart which prefers{' '}
                        <Link color="indigo" href="#">
                          <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a{' '}
                        <Link color="indigo" href="#">
                          zephyr
                        </Link>
                        .
                      </Blockquote>

                      <Blockquote color="indigo">
                        Ambiguous voice of a heart which{' '}
                        <Link color="indigo" href="#">
                          prefers{' '}
                          <Code color="indigo" variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link color="indigo" href="#">
                          zephyr
                        </Link>
                        .
                      </Blockquote>

                      <Code size="2" color="indigo">
                        Ambiguous voice of a heart which{' '}
                        <Link color="indigo" href="#">
                          prefers{' '}
                          <Code color="indigo" variant="ghost">
                            kiwi bowls
                          </Code>
                        </Link>{' '}
                        to a{' '}
                        <Link color="indigo" href="#">
                          zephyr
                        </Link>
                        .
                      </Code>

                      <Callout.Root color="indigo">
                        <Callout.Text>
                          Ambiguous voice of a heart which prefers{' '}
                          <Code color="indigo" variant="ghost">
                            kiwi bowls
                          </Code>{' '}
                          to a{' '}
                          <Link color="indigo" href="#">
                            zephyr
                          </Link>
                          .
                        </Callout.Text>
                      </Callout.Root>
                    </Flex>

                    <Flex direction="column" align="start" gap="4">
                      <Text color="gray" size="2">
                        All wrapping components with high contrast
                      </Text>

                      <Heading highContrast>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                      </Heading>

                      <Text highContrast>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                      </Text>

                      <Text highContrast>
                        Ambiguous voice of a heart which prefers{' '}
                        <Link href="#">
                          <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Text>

                      <Text highContrast>
                        Ambiguous voice of a heart which{' '}
                        <Link href="#">
                          prefers <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Text>

                      <Blockquote highContrast>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                      </Blockquote>

                      <Blockquote highContrast>
                        Ambiguous voice of a heart which prefers{' '}
                        <Link href="#">
                          <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Blockquote>

                      <Blockquote highContrast>
                        Ambiguous voice of a heart which{' '}
                        <Link href="#">
                          prefers <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Blockquote>

                      <Code size="2" highContrast>
                        Ambiguous voice of a heart which{' '}
                        <Link href="#">
                          prefers <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Code>

                      <Callout.Root highContrast>
                        <Callout.Text>
                          Ambiguous voice of a heart which prefers{' '}
                          <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                        </Callout.Text>
                      </Callout.Root>
                    </Flex>

                    <Flex direction="column" align="start" gap="4">
                      <Text color="gray" size="2">
                        All wrapping components with {'color="indigo"'} and high contrast
                      </Text>

                      <Heading color="indigo" highContrast>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                      </Heading>

                      <Text color="indigo" highContrast>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                      </Text>

                      <Text color="indigo" highContrast>
                        Ambiguous voice of a heart which prefers{' '}
                        <Link href="#">
                          <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Text>

                      <Text color="indigo" highContrast>
                        Ambiguous voice of a heart which{' '}
                        <Link href="#">
                          prefers <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Text>

                      <Blockquote color="indigo" highContrast>
                        Ambiguous voice of a heart which prefers{' '}
                        <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                      </Blockquote>

                      <Blockquote color="indigo" highContrast>
                        Ambiguous voice of a heart which prefers{' '}
                        <Link href="#">
                          <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Blockquote>

                      <Blockquote color="indigo" highContrast>
                        Ambiguous voice of a heart which{' '}
                        <Link href="#">
                          prefers <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Blockquote>

                      <Code size="2" color="indigo" highContrast>
                        Ambiguous voice of a heart which{' '}
                        <Link href="#">
                          prefers <Code variant="ghost">kiwi bowls</Code>
                        </Link>{' '}
                        to a <Link href="#">zephyr</Link>.
                      </Code>

                      <Callout.Root color="indigo" highContrast>
                        <Callout.Text>
                          Ambiguous voice of a heart which prefers{' '}
                          <Code variant="ghost">kiwi bowls</Code> to a <Link href="#">zephyr</Link>.
                        </Callout.Text>
                      </Callout.Root>
                    </Flex>
                  </Flex>
                </Section>
              </Container>
            </div>
          </Theme>
        </NextThemeProvider>
      </body>
    </html>
  );
}


================================================
File: apps/playground/app/test-inset/page.tsx
================================================
import * as React from 'react';
import {
  Theme,
  Container,
  Section,
  Grid,
  Card,
  Text,
  AspectRatio,
  Box,
  Inset,
  Popover,
  Button,
  Flex,
  HoverCard,
  Dialog,
  Table,
  AlertDialog,
  Separator,
  ThemePanel,
  RadioCards,
  CheckboxCards,
} from '@radix-ui/themes';
import { NextThemeProvider } from '../next-theme-provider';

export default function Test() {
  const image = (
    <img
      src="https://images.unsplash.com/photo-1479030160180-b1860951d696?&auto=format&fit=crop&w=1200&q=80"
      alt="A house in a forest"
      style={{ objectFit: 'cover', width: '100%', height: '100%' }}
    />
  );
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <NextThemeProvider>
          <Theme asChild>
            <div id="root">
              <ThemePanel />

              <Container>
                <Section>
                  <Grid columns="3" gap="9">
                    <Box>
                      <Card size="3">
                        <Text as="p" size="5" weight="bold" trim="start">
                          Title
                        </Text>
                        <Text as="p" size="2" color="gray" mb="2">
                          Subtitle
                        </Text>

                        <Text as="p" trim="end">
                          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio.
                          Praesent libero. Sed cursus ante dapibus diam. Sed nisi.
                        </Text>

                        <Inset side="bottom" clip="padding-box" pt="current">
                          <AspectRatio ratio={16 / 9}>{image}</AspectRatio>
                        </Inset>
                      </Card>

                      <Box my="5">
                        <CheckboxCards.Root columns="1" defaultValue={['1']} size="3">
                          <CheckboxCards.Item value="1">
                            <Box asChild width="64px">
                              <Inset clip="padding-box" side="left">
                                <AspectRatio ratio={1}>{image}</AspectRatio>
                              </Inset>
                            </Box>
                            <Box as="span">Checkbox Card 1</Box>
                          </CheckboxCards.Item>

                          <CheckboxCards.Item value="2">
                            <Box asChild width="64px">
                              <Inset clip="padding-box" side="left">
                                <AspectRatio ratio={1}>{image}</AspectRatio>
                              </Inset>
                            </Box>
                            <Box as="span">Checkbox Card 2</Box>
                          </CheckboxCards.Item>
                        </CheckboxCards.Root>
                      </Box>
                    </Box>

                    <Box>
                      <Card size="3">
                        <Text as="p" size="5" weight="bold" trim="start">
                          Title
                        </Text>
                        <Text as="p" size="2" color="gray" mb="2">
                          Subtitle
                        </Text>

                        <Text as="p" trim="end">
                          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio.
                          Praesent libero. Sed cursus ante dapibus diam. Sed nisi.
                        </Text>

                        <Inset side="x" py="current">
                          <Separator size="4" />
                        </Inset>

                        <Flex justify="end" gap="4">
                          <Button color="gray" variant="surface">
                            Cancel
                          </Button>
                          <Button>Save</Button>
                        </Flex>
                      </Card>

                      <Box my="5">
                        <RadioCards.Root columns="1" defaultValue="1" size="3">
                          <RadioCards.Item value="1">
                            <Box flexGrow="1">Radio Card 1</Box>
                            <Box asChild width="64px">
                              <Inset clip="padding-box" side="right">
                                <AspectRatio ratio={1}>{image}</AspectRatio>
                              </Inset>
                            </Box>
                          </RadioCards.Item>

                          <RadioCards.Item value="2">
                            <Box flexGrow="1">Radio Card 2</Box>
                            <Box asChild width="64px">
                              <Inset clip="padding-box" side="right">
                                <AspectRatio ratio={1}>{image}</AspectRatio>
                              </Inset>
                            </Box>
                          </RadioCards.Item>
                        </RadioCards.Root>
                      </Box>
                    </Box>

                    <Flex direction="column" gap="3">
                      <div>
                        <Popover.Root>
                          <Popover.Trigger>
                            <Button variant="solid">Popover</Button>
                          </Popover.Trigger>
                          <Popover.Content>
                            <Grid columns="1fr 1fr" style={{ width: 400 }}>
                              <div>
                                <Text as="p" size="3">
                                  Jan Tschichold was a German calligrapher, typographer and book
                                  designer. He played a significant role in the development of
                                  graphic design in the 20th century.
                                </Text>
                              </div>
                              <Inset side="right" pl="current">
                                {image}
                              </Inset>
                            </Grid>
                          </Popover.Content>
                        </Popover.Root>
                      </div>

                      <div>
                        <HoverCard.Root>
                          <HoverCard.Trigger>
                            <Button variant="solid">Hover Card</Button>
                          </HoverCard.Trigger>
                          <HoverCard.Content style={{ width: 400 }}>
                            <Flex>
                              <Inset side="left" pr="current">
                                {image}
                              </Inset>
                              <div>
                                <Text as="p" size="2">
                                  Jan Tschichold was a German calligrapher, typographer and book
                                  designer. He played a significant role in the development of
                                  graphic design in the 20th century.
                                </Text>
                              </div>
                            </Flex>
                          </HoverCard.Content>
                        </HoverCard.Root>
                      </div>

                      <div>
                        <Dialog.Root>
                          <Dialog.Trigger>
                            <Button variant="solid">Dialog</Button>
                          </Dialog.Trigger>
                          <Dialog.Content>
                            <Dialog.Title>Users</Dialog.Title>
                            <Dialog.Description>
                              Here are the users that have access to this project.
                            </Dialog.Description>

                            <Inset side="x" my="5">
                              <TableExample />
                            </Inset>

                            <Flex gap="3" justify="end">
                              <Dialog.Close>
                                <Button variant="soft" color="gray">
                                  Cancel
                                </Button>
                              </Dialog.Close>
                              <Dialog.Close>
                                <Button variant="solid">Share</Button>
                              </Dialog.Close>
                            </Flex>
                          </Dialog.Content>
                        </Dialog.Root>
                      </div>

                      <div>
                        <AlertDialog.Root>
                          <AlertDialog.Trigger>
                            <Button variant="solid">Alert Dialog.</Button>
                          </AlertDialog.Trigger>
                          <AlertDialog.Content style={{ maxWidth: 450 }}>
                            <AlertDialog.Title>Delete Users</AlertDialog.Title>
                            <AlertDialog.Description>
                              Are you sure you want to delete the following users? This action
                              cannot be undone.
                            </AlertDialog.Description>

                            <Inset side="x" my="5">
                              <TableExample />
                            </Inset>

                            <Flex gap="3" justify="end">
                              <AlertDialog.Cancel>
                                <Button variant="soft" color="gray">
                                  Cancel
                                </Button>
                              </AlertDialog.Cancel>
                              <AlertDialog.Action>
                                <Button variant="solid" color="red">
                                  Revoke link
                                </Button>
                              </AlertDialog.Action>
                            </Flex>
                          </AlertDialog.Content>
                        </AlertDialog.Root>
                      </div>
                    </Flex>
                  </Grid>
                </Section>
              </Container>
            </div>
          </Theme>
        </NextThemeProvider>
      </body>
    </html>
  );
}

function TableExample() {
  return (
    <Table.Root style={{ backgroundColor: 'var(--gray-a1)' }}>
      <Table.Header
        style={{ backgroundColor: 'var(--gray-a2)', borderTop: '1px solid var(--gray-a5)' }}
      >
        <Table.Row>
          <Table.ColumnHeaderCell>Full name</Table.ColumnHeaderCell>
          <Table.ColumnHeaderCell>Email</Table.ColumnHeaderCell>
          <Table.ColumnHeaderCell>Group</Table.ColumnHeaderCell>
        </Table.Row>
      </Table.Header>
      <Table.Body>
        <Table.Row>
          <Table.RowHeaderCell>Andy</Table.RowHeaderCell>
          <Table.Cell>andy@workos.com</Table.Cell>
          <Table.Cell>Developer</Table.Cell>
        </Table.Row>
        <Table.Row>
          <Table.RowHeaderCell>Benoit</Table.RowHeaderCell>
          <Table.Cell>benoit@workos.com</Table.Cell>
          <Table.Cell>Admin</Table.Cell>
        </Table.Row>
        <Table.Row>
          <Table.RowHeaderCell>Lucas</Table.RowHeaderCell>
          <Table.Cell>lucas@workos.com</Table.Cell>
          <Table.Cell>Developer</Table.Cell>
        </Table.Row>
        <Table.Row>
          <Table.RowHeaderCell>Vlad</Table.RowHeaderCell>
          <Table.Cell>vlad@workos.com</Table.Cell>
          <Table.Cell>Designer</Table.Cell>
        </Table.Row>
      </Table.Body>
    </Table.Root>
  );
}


================================================
File: apps/playground/app/test-radio-card/page.tsx
================================================
import * as React from 'react';
import {
  Theme,
  Text,
  Container,
  Section,
  RadioCards,
  Heading,
  Box,
  Separator,
} from '@radix-ui/themes';
import { radioCardsRootPropDefs } from '@radix-ui/themes/props';
import { NextThemeProvider } from '../next-theme-provider';
import { CrumpledPaperIcon, CubeIcon, GlobeIcon, VercelLogoIcon } from '@radix-ui/react-icons';

export default function Test() {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <NextThemeProvider>
          <Theme asChild>
            <div id="root">
              <Container px="8" size="3">
                {radioCardsRootPropDefs.size.values.map((size) => (
                  <React.Fragment key={size}>
                    <Section size="3">
                      <Heading mb="5">Size {size}</Heading>

                      <Box mb="7">
                        <Text as="div" color="gray" size="2" mb="3">
                          Plain text
                        </Text>
                        <RadioCards.Root size={size} defaultValue="1">
                          <RadioCards.Item value="1">Next.js</RadioCards.Item>
                          <RadioCards.Item value="2">Remix</RadioCards.Item>
                          <RadioCards.Item value="3">Astro</RadioCards.Item>
                          <RadioCards.Item value="4">HTMX</RadioCards.Item>
                        </RadioCards.Root>
                      </Box>

                      <Box>
                        <Text as="div" color="gray" size="2" mb="3">
                          With icons
                        </Text>
                        <RadioCards.Root size={size} defaultValue="1">
                          <RadioCards.Item value="1">
                            <VercelLogoIcon />
                            Next.js
                          </RadioCards.Item>
                          <RadioCards.Item value="2">
                            <CubeIcon />
                            Remix
                          </RadioCards.Item>
                          <RadioCards.Item value="3">
                            <GlobeIcon />
                            Astro
                          </RadioCards.Item>
                          <RadioCards.Item value="4">
                            <CrumpledPaperIcon />
                            HTMX
                          </RadioCards.Item>
                        </RadioCards.Root>
                      </Box>
                    </Section>

                    <Separator size="4" />
                  </React.Fragment>
                ))}
              </Container>
            </div>
          </Theme>
        </NextThemeProvider>
      </body>
    </html>
  );
}


================================================
File: apps/playground/app/test-reset/page.tsx
================================================
import * as React from 'react';
import { Theme, Container, Section, Reset } from '@radix-ui/themes';
import { NextThemeProvider } from '../next-theme-provider';

export default function Test() {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <NextThemeProvider>
          <Theme asChild>
            <div id="root">
              <Container size="1" px="8">
                <Section size="3">
                  <ResetChildren>
                    <RadixLogo />
                    <a href="https://example.com">Anchor</a>
                    <abbr>Abbreviation</abbr>
                    <address>Contact information</address>
                    <article>Article</article>
                    <aside>Aside content</aside>
                    <audio>Audio content</audio>
                    <b>Bold text</b>
                    <bdi>Bi-directional Isolation</bdi>
                    <bdo>Bi-directional Override</bdo>
                    <blockquote>Block quote</blockquote>
                    <button>Button</button>
                    <cite>Cited text</cite>
                    <code>Computer code</code>
                    <data>Machine-readable equivalent</data>
                    <dd>Description in a description list</dd>
                    <del>Deleted text</del>
                    <details>
                      Additional details
                      <summary>Summary for a details element</summary>
                    </details>
                    <dfn>Defining term</dfn>
                    <div>Div</div>
                    <dl>Description list</dl>
                    <dt>Term in a description list</dt>
                    <em>Emphasized text</em>
                    <fieldset>Group of form-related elements</fieldset>
                    <figcaption>Caption for a figure element</figcaption>
                    <figure>Self-contained content</figure>
                    <footer>Document or section footer</footer>
                    <form>HTML form</form>
                    <h1>HTML heading 1</h1>
                    <h2>HTML heading 2</h2>
                    <h3>HTML heading 3</h3>
                    <h4>HTML heading 4</h4>
                    <h5>HTML heading 5</h5>
                    <h6>HTML heading 6</h6>
                    <header>Document or section header</header>
                    <hr />
                    <i>Italic text</i>
                    <iframe src="https://example.com" />
                    <img src="https://source.unsplash.com/random" />

                    {/* All input types: */}
                    <input placeholder="Input control" />
                    {/* <input placeholder="Input control" type="button" /> */}
                    {/* <input placeholder="Input control" type="image" /> */}
                    {/* <input placeholder="Input control" type="text" /> */}
                    {/* <input placeholder="Input control" type="checkbox" /> */}
                    {/* <input placeholder="Input control" type="color" /> */}
                    {/* <input placeholder="Input control" type="date" /> */}
                    {/* <input placeholder="Input control" type="datetime-local" /> */}
                    {/* <input placeholder="Input control" type="email" /> */}
                    {/* <input placeholder="Input control" type="file" /> */}
                    {/* <input placeholder="Input control" type="hidden" /> */}
                    {/* <input placeholder="Input control" type="month" /> */}
                    {/* <input placeholder="Input control" type="number" /> */}
                    {/* <input placeholder="Input control" type="password" /> */}
                    {/* <input placeholder="Input control" type="radio" /> */}
                    {/* <input placeholder="Input control" type="range" /> */}
                    {/* <input placeholder="Input control" type="reset" /> */}
                    {/* <input placeholder="Input control" type="search" /> */}
                    {/* <input placeholder="Input control" type="submit" /> */}
                    {/* <input placeholder="Input control" type="tel" /> */}
                    {/* <input placeholder="Input control" type="time" /> */}
                    {/* <input placeholder="Input control" type="url" /> */}
                    {/* <input placeholder="Input control" type="week" /> */}

                    <ins>Inserted text</ins>
                    <kbd>Keyboard input</kbd>
                    <label>Form field label text</label>
                    <legend>Caption for a fieldset element</legend>
                    <li>List item</li>
                    <main>Main content</main>
                    <mark>Marked or highlighted text</mark>
                    <nav>Navigation links</nav>
                    <ol>
                      <li>Coffee</li>
                      <li>Tea</li>
                      <li>Milk</li>
                    </ol>
                    <output>Result of a calculation</output>
                    <p>Paragraph</p>
                    <picture>Container for multiple image sources</picture>
                    <pre>Preformatted text: {'"    "'}</pre>
                    <q>Short quote</q>
                    <s>Text that is no longer correct</s>
                    <samp>Sample output</samp>
                    <section>Section in a document</section>
                    <select name="select" id="select">
                      <option value="1">Select Option 1</option>
                      <option value="2">Select Option 2</option>
                      <option value="3">Select Option 3</option>
                      <option value="4">Select Option 4</option>
                    </select>
                    <small>Smaller text</small>
                    <span>Inline element</span>
                    <strong>Important text</strong>
                    <sub>Subscripted text</sub>
                    <sup>Superscripted text</sup>
                    <table>
                      <ResetChildren>
                        <caption>Table</caption>
                        <thead>
                          <ResetChildren>
                            <tr>
                              <ResetChildren>
                                <th scope="col">Person</th>
                                <th scope="col">Most interest in</th>
                                <th scope="col">Age</th>
                              </ResetChildren>
                            </tr>
                          </ResetChildren>
                        </thead>
                        <tbody>
                          <ResetChildren>
                            <tr>
                              <ResetChildren>
                                <th scope="row">Chris</th>
                                <td>HTML tables</td>
                                <td>22</td>
                              </ResetChildren>
                            </tr>
                            <tr>
                              <ResetChildren>
                                <th scope="row">Dennis</th>
                                <td>Web accessibility</td>
                                <td>45</td>
                              </ResetChildren>
                            </tr>
                            <tr>
                              <ResetChildren>
                                <th scope="row">Sarah</th>
                                <td>JavaScript frameworks</td>
                                <td>29</td>
                              </ResetChildren>
                            </tr>
                            <tr>
                              <ResetChildren>
                                <th scope="row">Karen</th>
                                <td>Web performance</td>
                                <td>36</td>
                              </ResetChildren>
                            </tr>
                          </ResetChildren>
                        </tbody>
                        <tfoot>
                          <ResetChildren>
                            <tr>
                              <ResetChildren>
                                <th scope="row" colSpan={2}>
                                  Average age
                                </th>
                                <td>33</td>
                              </ResetChildren>
                            </tr>
                          </ResetChildren>
                        </tfoot>
                      </ResetChildren>
                    </table>

                    <textarea placeholder="Multi-line textarea" />
                    <ul>
                      <li>Coffee</li>
                      <li>Tea</li>
                      <li>Milk</li>
                    </ul>
                    <u>Text with unarticulated annotation</u>
                    <var>Variable</var>
                    <video
                      autoPlay
                      loop
                      muted
                      src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4"
                    />
                  </ResetChildren>
                </Section>
              </Container>
            </div>
          </Theme>
        </NextThemeProvider>
      </body>
    </html>
  );
}

const ResetChildren = ({ children }: { children: React.ReactNode }) => {
  return React.Children.map(children, (child) => <Reset>{child}</Reset>);
};

const RadixLogo = (props: React.ComponentPropsWithoutRef<'svg'>) => {
  return (
    <svg
      width="76"
      height="24"
      viewBox="0 0 76 24"
      fill="currentcolor"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path d="M43.9022 20.0061H46.4499C46.2647 19.0375 46.17 18.1161 46.17 17.0058V12.3753C46.17 9.25687 44.3893 7.72127 41.1943 7.72127C38.3003 7.72127 36.3324 9.23324 36.0777 11.8083H38.9254C39.0181 10.698 39.8052 9.96561 41.1017 9.96561C42.4446 9.96561 43.3243 10.6743 43.3243 12.1391V12.7061L39.8052 13.1077C37.4206 13.3912 35.5684 14.3834 35.5684 16.7931C35.5684 18.9666 37.2353 20.2659 39.5274 20.2659C41.4027 20.2659 42.9845 19.4863 43.6401 18.1161C43.6689 18.937 43.9022 20.0061 43.9022 20.0061ZM40.3377 18.1634C39.157 18.1634 38.5087 17.5727 38.5087 16.6278C38.5087 15.3757 39.4579 15.0922 40.7082 14.9268L43.3243 14.6197V15.352C43.3243 17.242 41.8658 18.1634 40.3377 18.1634ZM56.2588 20.0061H59.176V3H56.2125V9.96561C55.6569 8.76075 54.3141 7.72127 52.4851 7.72127C49.3058 7.72127 47.099 10.2963 47.099 14.0054C47.099 17.7381 49.3058 20.2896 52.4851 20.2896C54.2678 20.2896 55.68 19.2973 56.2588 18.0925V20.0061ZM56.282 14.218C56.282 16.5569 55.1938 18.0689 53.3185 18.0689C51.3969 18.0689 50.1856 16.486 50.1856 14.0054C50.1856 11.5485 51.3969 9.94198 53.3185 9.94198C55.1938 9.94198 56.282 11.454 56.282 13.7928V14.218ZM60.9066 5.97304H64.0553V3.01996H60.9066V5.97304ZM60.9992 20.0061H63.9627V8.00476H60.9992V20.0061ZM67.6638 20.0061L70.6041 15.8954L73.5212 20.0061H76.9246L72.3636 13.7219L76.5542 8.00476H73.3823L70.7661 11.7138L68.1731 8.00476H64.7697L69.0066 13.8637L64.4919 20.0061H67.6638Z"></path>
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M24.9132 20V14.0168H28.7986L32.4513 20H35.7006L31.6894 13.5686C33.5045 12.986 35.0955 11.507 35.0955 9.01961C35.0955 5.7479 32.7994 4 28.9571 4H22V20H24.9132ZM24.9132 6.35294V11.6863H28.821C31.0395 11.6863 32.1599 10.7675 32.1599 9.01961C32.1599 7.27171 30.9395 6.35294 28.621 6.35294H24.9132Z"
      ></path>
      <path d="M7 23C3.13401 23 0 19.6422 0 15.5C0 11.3578 3.13401 8 7 8V23Z"></path>
      <path d="M7 0H0V7H7V0Z"></path>
      <path d="M11.5 7C13.433 7 15 5.433 15 3.5C15 1.567 13.433 0 11.5 0C9.56704 0 8 1.567 8 3.5C8 5.433 9.56704 7 11.5 7Z"></path>
    </svg>
  );
};


================================================
File: apps/playground/app/test-responsive/page.tsx
================================================
import * as React from 'react';
import {
  Theme,
  Flex,
  Grid,
  TextField,
  Text,
  Select,
  TextArea,
  Button,
  Container,
  Section,
  Card,
  IconButton,
} from '@radix-ui/themes';
import { NextThemeProvider } from '../next-theme-provider';
import { SunIcon } from '@radix-ui/react-icons';

export default function Test() {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <NextThemeProvider>
          <Theme asChild>
            <div id="root">
              <Container px="8">
                <Section size="3">
                  <Card
                    size={{ initial: '3', sm: '4', lg: '5' }}
                    style={{ maxWidth: 500 }}
                    mx="auto"
                  >
                    <Flex direction="column" gap={{ initial: '3', sm: '4', lg: '5' }}>
                      <Grid gap={{ initial: '1', sm: '2', lg: '3' }}>
                        <Text size={{ initial: '1', sm: '2', lg: '3' }} weight="bold">
                          Email
                        </Text>
                        <TextField.Root
                          size={{ initial: '1', sm: '2', lg: '3' }}
                          variant="classic"
                          placeholder="Your email"
                        />
                      </Grid>
                      <Grid gap={{ initial: '1', sm: '2', lg: '3' }}>
                        <Text size={{ initial: '1', sm: '2', lg: '3' }} weight="bold">
                          Subject
                        </Text>
                        <Select.Root
                          defaultValue="customer"
                          size={{ initial: '1', sm: '2', lg: '3' }}
                        >
                          <Select.Trigger variant="classic" />
                          <Select.Content>
                            <Select.Item value="customer">Customer feedback</Select.Item>
                            <Select.Item value="help">Help</Select.Item>
                          </Select.Content>
                        </Select.Root>
                      </Grid>
                      <Grid gap={{ initial: '1', sm: '2', lg: '3' }}>
                        <Text size={{ initial: '1', sm: '2', lg: '3' }} weight="bold">
                          Feedback
                        </Text>
                        <TextArea
                          size={{ initial: '1', sm: '2', lg: '3' }}
                          variant="classic"
                          placeholder="Your feedback"
                        />
                      </Grid>
                      <Grid columns="2" gap="2">
                        <Button size={{ initial: '1', sm: '2', lg: '3' }} variant="surface">
                          Back
                        </Button>
                        <Button size={{ initial: '1', sm: '2', lg: '3' }} variant="classic">
                          Submit
                        </Button>
                      </Grid>
                    </Flex>
                  </Card>
                </Section>

                <Section size="3">
                  <Flex align="center" gap={{ initial: '3', sm: '4', lg: '5' }}>
                    <IconButton variant="ghost" size={{ initial: '1', sm: '2', lg: '3' }}>
                      <SunIcon />
                    </IconButton>
                    <Button variant="ghost" size={{ initial: '1', sm: '2', lg: '3' }}>
                      Change theme
                    </Button>
                    <Button size={{ initial: '1', sm: '2', lg: '3' }}>Change theme</Button>
                  </Flex>
                </Section>
              </Container>
            </div>
          </Theme>
        </NextThemeProvider>
      </body>
    </html>
  );
}


================================================
File: apps/playground/app/test-skeleton/page.tsx
================================================
'use client';

import * as React from 'react';
import {
  Theme,
  Container,
  Section,
  Card,
  Text,
  Box,
  Button,
  Flex,
  Link,
  ThemePanel,
  Heading,
  TextField,
  Skeleton,
} from '@radix-ui/themes';
import { NextThemeProvider } from '../next-theme-provider';

export default function Test() {
  const [isLoading, setIsLoading] = React.useState(true);
  const loadingTimeoutRef = React.useRef<number>(undefined);

  React.useEffect(() => {
    loadingTimeoutRef.current = window.setTimeout(() => {
      setIsLoading(false);
    }, 2000);
    return () => {
      window.clearTimeout(loadingTimeoutRef.current!);
    };
  }, []);

  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <NextThemeProvider>
          <Theme asChild>
            <div id="root">
              <ThemePanel />

              <Container size="1">
                <Section>
                  <Card asChild variant="classic" size="4">
                    <form action="/">
                      <Box height="40px" mb="4">
                        <Heading as="h3" size="6" mt="-1">
                          <Skeleton loading={isLoading}>Sign up</Skeleton>
                        </Heading>
                      </Box>

                      <Box mb="5">
                        <Flex direction="column">
                          <Text as="label" size="2" weight="medium" mb="2" htmlFor="email">
                            <Skeleton loading={isLoading}>Email address</Skeleton>
                          </Text>
                          <Skeleton loading={isLoading}>
                            <TextField.Root
                              id="email"
                              type="email"
                              variant="classic"
                              placeholder="Enter your email"
                            />
                          </Skeleton>
                        </Flex>
                      </Box>

                      <Box mb="5" position="relative">
                        <Box position="absolute" top="0" right="0" style={{ marginTop: -2 }}>
                          <Link href="#" size="2">
                            <Skeleton loading={isLoading}>Forgot password?</Skeleton>
                          </Link>
                        </Box>

                        <Flex direction="column">
                          <Text as="label" size="2" weight="medium" mb="2" htmlFor="password">
                            <Skeleton loading={isLoading}>Password</Skeleton>
                          </Text>
                          <Skeleton loading={isLoading}>
                            <TextField.Root
                              id="password"
                              variant="classic"
                              type="password"
                              placeholder="Enter your password"
                            />
                          </Skeleton>
                        </Flex>
                      </Box>

                      <Flex mt="6" justify="end" gap="3">
                        <Skeleton loading={isLoading}>
                          <Button variant="surface" highContrast color="gray">
                            Create an account
                          </Button>
                        </Skeleton>
                        <Skeleton loading={isLoading}>
                          <Button variant="solid" type="submit">
                            Sign in
                          </Button>
                        </Skeleton>
                      </Flex>
                    </form>
                  </Card>
                </Section>
              </Container>
            </div>
          </Theme>
        </NextThemeProvider>
      </body>
    </html>
  );
}


================================================
File: apps/playground/app/test-tabnav/layout.tsx
================================================
import * as React from 'react';
import { Theme, Container, Section, Box } from '@radix-ui/themes';
import { NextThemeProvider } from '../next-theme-provider';
import { Nav } from './nav';

export default function Test({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <NextThemeProvider>
          <Theme asChild>
            <div id="root">
              <Container>
                <Section>
                  <Nav />
                  <Box my="9">{children}</Box>
                </Section>
              </Container>
            </div>
          </Theme>
        </NextThemeProvider>
      </body>
    </html>
  );
}


================================================
File: apps/playground/app/test-tabnav/nav.tsx
================================================
'use client';

import NextLink from 'next/link';
import { usePathname } from 'next/navigation';
import { TabNav, Heading, Flex } from '@radix-ui/themes';

export function Nav() {
  const pathname = usePathname();
  return (
    <Flex direction="column" gap="9">
      <Flex direction="column" gap="2">
        <Heading size="3">Straight up `TabNav.Link`</Heading>
        <TabNav.Root>
          <TabNav.Link href="/test-tabnav" active={pathname === '/test-tabnav'}>
            Accounts
          </TabNav.Link>
          <TabNav.Link href="/test-tabnav/documents" active={pathname === '/test-tabnav/documents'}>
            Documents
          </TabNav.Link>
          <TabNav.Link href="/test-tabnav/settings" active={pathname === '/test-tabnav/settings'}>
            Settings
          </TabNav.Link>
        </TabNav.Root>
      </Flex>

      <Flex direction="column" gap="2">
        <Heading size="3">{`<TabNav.Link asChild>`} with `NextLink`</Heading>
        <TabNav.Root>
          <TabNav.Link asChild active={pathname === '/test-tabnav'}>
            <NextLink href="/test-tabnav">Accounts</NextLink>
          </TabNav.Link>
          <TabNav.Link asChild active={pathname === '/test-tabnav/documents'}>
            <NextLink href="/test-tabnav/documents">Documents</NextLink>
          </TabNav.Link>
          <TabNav.Link asChild active={pathname === '/test-tabnav/settings'}>
            <NextLink href="/test-tabnav/settings">Settings</NextLink>
          </TabNav.Link>
        </TabNav.Root>
      </Flex>

      <Flex direction="column" gap="2">
        <Heading size="3">{`<NextLink passHref legacyBehavior>`} with `TabNav.Link`</Heading>
        <TabNav.Root>
          <NextLink passHref legacyBehavior href="/test-tabnav">
            <TabNav.Link active={pathname === '/test-tabnav'}>Accounts</TabNav.Link>
          </NextLink>
          <NextLink passHref legacyBehavior href="/test-tabnav/documents">
            <TabNav.Link active={pathname === '/test-tabnav/documents'}>Documents</TabNav.Link>
          </NextLink>
          <NextLink passHref legacyBehavior href="/test-tabnav/settings">
            <TabNav.Link active={pathname === '/test-tabnav/settings'}>Settings</TabNav.Link>
          </NextLink>
        </TabNav.Root>
      </Flex>
    </Flex>
  );
}


================================================
File: apps/playground/app/test-tabnav/(accounts)/page.tsx
================================================
import { Heading } from '@radix-ui/themes';

export default function Accounts() {
  return <Heading>Accounts</Heading>;
}


================================================
File: apps/playground/app/test-tabnav/documents/page.tsx
================================================
import { Heading } from '@radix-ui/themes';

export default function Documents() {
  return <Heading>Documents</Heading>;
}


================================================
File: apps/playground/app/test-tabnav/settings/page.tsx
================================================
import { Heading } from '@radix-ui/themes';

export default function Settings() {
  return <Heading>Settings</Heading>;
}


================================================
File: apps/playground/app/test-text-wrap/page.tsx
================================================
import * as React from 'react';
import {
  Theme,
  Grid,
  Text,
  Container,
  Section,
  Card,
  Heading,
  Code,
  ScrollArea,
} from '@radix-ui/themes';
import { NextThemeProvider } from '../next-theme-provider';

export default function Test() {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <NextThemeProvider>
          <Theme asChild>
            <div id="root">
              <Container px="8">
                <Section size="3">
                  <Grid columns="3" gap="5">
                    <Card size="3">
                      <ScrollArea>
                        <Heading size="3" mb="2">
                          Default
                        </Heading>
                        <Text size="3" as="p">
                          Under a sky as clear as a sapphire, the audacious wind embarked on yet
                          another sojourn.
                        </Text>
                      </ScrollArea>
                    </Card>

                    <Card size="3">
                      <Heading size="3" mb="2">
                        <Code variant="ghost" color="gray" highContrast>
                          {'wrap="wrap"'}
                        </Code>
                      </Heading>
                      <Text size="3" as="p" wrap="wrap">
                        Under a sky as clear as a sapphire, the audacious wind embarked on yet
                        another sojourn.
                      </Text>
                    </Card>

                    <Card size="3">
                      <Heading size="3" mb="2">
                        <Code variant="ghost" color="gray" highContrast>
                          {'wrap="nowrap"'}
                        </Code>
                      </Heading>
                      <Text size="3" as="p" wrap="nowrap">
                        Under a sky as clear as a sapphire, the audacious wind embarked on yet
                        another sojourn.
                      </Text>
                    </Card>

                    <Card size="3">
                      <Heading size="3" mb="2">
                        <Code variant="ghost" color="gray" highContrast>
                          {'wrap="balance"'}
                        </Code>
                      </Heading>
                      <Text size="3" as="p" wrap="balance">
                        Under a sky as clear as a sapphire, the audacious wind embarked on yet
                        another sojourn.
                      </Text>
                    </Card>

                    <Card size="3">
                      <Heading size="3" mb="2">
                        <Code variant="ghost" color="gray" highContrast>
                          {'wrap="pretty"'}
                        </Code>
                      </Heading>
                      <Text size="3" as="p" wrap="pretty">
                        Under a sky as clear as a sapphire, the audacious wind embarked on yet
                        another sojourn.
                      </Text>
                    </Card>

                    <Card size="3">
                      <Heading size="3" mb="2">
                        <Code variant="ghost" color="gray" highContrast>
                          {'truncate'}
                        </Code>
                      </Heading>
                      <Text size="3" as="p" truncate>
                        Under a sky as clear as a sapphire, the audacious wind embarked on yet
                        another sojourn.
                      </Text>
                    </Card>
                  </Grid>
                </Section>
              </Container>
            </div>
          </Theme>
        </NextThemeProvider>
      </body>
    </html>
  );
}


================================================
File: apps/playground/app/test-textfield/page.tsx
================================================
import * as React from 'react';
import {
  Theme,
  ThemePanel,
  Container,
  Section,
  Grid,
  Flex,
  TextField,
  Heading,
  IconButton,
  Button,
  Text,
  Tooltip,
  Spinner,
} from '@radix-ui/themes';
import {
  StarIcon,
  ExclamationTriangleIcon,
  EyeClosedIcon,
  InfoCircledIcon,
  MagnifyingGlassIcon,
  Share2Icon,
  EnvelopeOpenIcon,
  PaperPlaneIcon,
  LockClosedIcon,
} from '@radix-ui/react-icons';

export default function Test() {
  return (
    <html lang="en">
      <body>
        <Theme asChild>
          <div id="root">
            <ThemePanel defaultOpen={false} />
            <Container>
              <Section>
                <Grid columns="3" gapX="6" gapY="9">
                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Just the input
                    </Heading>

                    <TextField.Root size="1" placeholder="Search" />
                    <TextField.Root size="2" placeholder="Search" />
                    <TextField.Root size="3" placeholder="Search" />
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Spinner
                    </Heading>

                    <TextField.Root size="1" placeholder="Your password">
                      <TextField.Slot side="right">
                        <Spinner size="1" />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="2" placeholder="Your password">
                      <TextField.Slot side="right">
                        <Spinner size="2" />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" placeholder="Your password">
                      <TextField.Slot side="right">
                        <Spinner size="3" />
                      </TextField.Slot>
                    </TextField.Root>
                  </Flex>

                  <div />

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Slot
                    </Heading>

                    <TextField.Root size="1" placeholder="Search">
                      <TextField.Slot>
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="2" placeholder="Search">
                      <TextField.Slot>
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" placeholder="Search">
                      <TextField.Slot>
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                    </TextField.Root>
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Slot {'side="left"'}
                    </Heading>

                    <TextField.Root size="1" placeholder="Search">
                      <TextField.Slot side="left">
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="2" placeholder="Search">
                      <TextField.Slot side="left">
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" placeholder="Search">
                      <TextField.Slot side="left">
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                    </TextField.Root>
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Slot {'side="right"'}
                    </Heading>

                    <TextField.Root size="1" placeholder="Search">
                      <TextField.Slot color="red" side="right">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="2" placeholder="Search">
                      <TextField.Slot color="red" side="right">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" placeholder="Search">
                      <TextField.Slot color="red" side="right">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                    </TextField.Root>
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Slots without sides
                    </Heading>

                    <TextField.Root size="1" placeholder="Search">
                      <TextField.Slot>
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                      <TextField.Slot color="red">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="2" placeholder="Search">
                      <TextField.Slot>
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                      <TextField.Slot color="red">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" placeholder="Search">
                      <TextField.Slot>
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                      <TextField.Slot color="red">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                    </TextField.Root>
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Slot {'side="left", side="right"'}
                    </Heading>

                    <TextField.Root size="1" placeholder="Search">
                      <TextField.Slot side="left">
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                      <TextField.Slot color="red" side="right">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="2" placeholder="Search">
                      <TextField.Slot side="left">
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                      <TextField.Slot color="red" side="right">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" placeholder="Search">
                      <TextField.Slot side="left">
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                      <TextField.Slot color="red" side="right">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                    </TextField.Root>
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Slot {'side="right", side="left"'}
                    </Heading>

                    <TextField.Root size="1" placeholder="Search">
                      <TextField.Slot color="red" side="right">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                      <TextField.Slot side="left">
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="2" placeholder="Search">
                      <TextField.Slot color="red" side="right">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                      <TextField.Slot side="left">
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" placeholder="Search">
                      <TextField.Slot color="red" side="right">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                      <TextField.Slot side="left">
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                    </TextField.Root>
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Slot {'side="left", no side'}
                    </Heading>

                    <TextField.Root size="1" placeholder="Search">
                      <TextField.Slot side="left">
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                      <TextField.Slot color="red">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="2" placeholder="Search">
                      <TextField.Slot side="left">
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                      <TextField.Slot color="red">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" placeholder="Search">
                      <TextField.Slot side="left">
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                      <TextField.Slot color="red">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                    </TextField.Root>
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Slot {'side="right", no side'}
                    </Heading>

                    <TextField.Root size="1" placeholder="Search">
                      <TextField.Slot color="red" side="right">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                      <TextField.Slot>
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="2" placeholder="Search">
                      <TextField.Slot color="red" side="right">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                      <TextField.Slot>
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" placeholder="Search">
                      <TextField.Slot color="red" side="right">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                      <TextField.Slot>
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                    </TextField.Root>
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Slot {'no side, side="right"'}
                    </Heading>

                    <TextField.Root size="1" placeholder="Search">
                      <TextField.Slot>
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                      <TextField.Slot color="red" side="right">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="2" placeholder="Search">
                      <TextField.Slot>
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                      <TextField.Slot color="red" side="right">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" placeholder="Search">
                      <TextField.Slot>
                        <MagnifyingGlassIcon />
                      </TextField.Slot>
                      <TextField.Slot color="red" side="right">
                        <ExclamationTriangleIcon />
                      </TextField.Slot>
                    </TextField.Root>
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Ghost buttons
                    </Heading>

                    <TextField.Root size="1" placeholder="Your password">
                      <TextField.Slot>
                        <IconButton size="1" variant="ghost" color="gray">
                          <LockClosedIcon />
                        </IconButton>
                      </TextField.Slot>
                      <TextField.Slot>
                        <IconButton size="1" variant="ghost" color="gray">
                          <EyeClosedIcon />
                        </IconButton>
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="2" placeholder="Your password">
                      <TextField.Slot>
                        <IconButton size="1" variant="ghost" color="gray">
                          <LockClosedIcon />
                        </IconButton>
                      </TextField.Slot>
                      <TextField.Slot>
                        <IconButton size="1" variant="ghost" color="gray">
                          <EyeClosedIcon />
                        </IconButton>
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" placeholder="Your password">
                      <TextField.Slot>
                        <IconButton size="2" variant="ghost" color="gray">
                          <LockClosedIcon />
                        </IconButton>
                      </TextField.Slot>
                      <TextField.Slot>
                        <IconButton size="2" variant="ghost" color="gray">
                          <EyeClosedIcon />
                        </IconButton>
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" placeholder="Your password">
                      <TextField.Slot>
                        <IconButton size="3" variant="ghost" color="gray">
                          <LockClosedIcon />
                        </IconButton>
                      </TextField.Slot>
                      <TextField.Slot>
                        <IconButton size="3" variant="ghost" color="gray">
                          <EyeClosedIcon />
                        </IconButton>
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" disabled placeholder="Your password">
                      <TextField.Slot>
                        <IconButton size="3" variant="ghost" color="gray">
                          <LockClosedIcon />
                        </IconButton>
                      </TextField.Slot>
                      <TextField.Slot>
                        <IconButton size="3" variant="ghost" color="gray">
                          <EyeClosedIcon />
                        </IconButton>
                      </TextField.Slot>
                    </TextField.Root>
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Mixed content
                    </Heading>

                    <TextField.Root size="1" placeholder="Search">
                      <TextField.Slot>
                        <InfoCircledIcon />
                      </TextField.Slot>
                      <TextField.Slot>
                        <IconButton size="1" variant="ghost" color="gray">
                          <Share2Icon />
                        </IconButton>
                        <IconButton size="1" variant="ghost" color="gray">
                          <StarIcon />
                        </IconButton>
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="2" placeholder="Search">
                      <TextField.Slot>
                        <InfoCircledIcon />
                      </TextField.Slot>
                      <TextField.Slot>
                        <IconButton size="1" variant="ghost" color="gray">
                          <Share2Icon />
                        </IconButton>
                        <IconButton size="1" variant="ghost" color="gray">
                          <StarIcon />
                        </IconButton>
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" placeholder="Search">
                      <TextField.Slot>
                        <InfoCircledIcon />
                      </TextField.Slot>
                      <TextField.Slot>
                        <IconButton size="2" variant="ghost" color="gray">
                          <Share2Icon />
                        </IconButton>
                        <IconButton size="2" variant="ghost" color="gray">
                          <StarIcon />
                        </IconButton>
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" placeholder="Search">
                      <TextField.Slot>
                        <InfoCircledIcon />
                      </TextField.Slot>
                      <TextField.Slot gap="4">
                        <IconButton size="3" variant="ghost" color="gray">
                          <Share2Icon />
                        </IconButton>
                        <IconButton size="3" variant="ghost" color="gray">
                          <StarIcon />
                        </IconButton>
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" disabled placeholder="Search">
                      <TextField.Slot>
                        <InfoCircledIcon />
                      </TextField.Slot>
                      <TextField.Slot gap="4">
                        <IconButton size="3" variant="ghost" color="gray">
                          <Share2Icon />
                        </IconButton>
                        <IconButton size="3" variant="ghost" color="gray">
                          <StarIcon />
                        </IconButton>
                      </TextField.Slot>
                    </TextField.Root>
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Fringe (overrides)
                    </Heading>

                    <TextField.Root size="1" placeholder="Search">
                      <TextField.Slot>
                        <InfoCircledIcon />
                      </TextField.Slot>
                      <TextField.Slot pr="0" gap="1">
                        <IconButton size="1" variant="soft" color="gray">
                          <Share2Icon />
                        </IconButton>
                        <IconButton size="1" variant="soft" color="gray">
                          <StarIcon />
                        </IconButton>
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="2" placeholder="Search">
                      <TextField.Slot>
                        <InfoCircledIcon />
                      </TextField.Slot>
                      <TextField.Slot px="1" gap="1">
                        <IconButton size="1" variant="soft" color="gray">
                          <Share2Icon />
                        </IconButton>
                        <IconButton size="1" variant="soft" color="gray">
                          <StarIcon />
                        </IconButton>
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" placeholder="Search">
                      <TextField.Slot>
                        <InfoCircledIcon />
                      </TextField.Slot>
                      <TextField.Slot px="1" gap="1">
                        <IconButton size="2" variant="soft" radius="full">
                          <Share2Icon />
                        </IconButton>
                        <IconButton size="2" variant="soft" radius="full">
                          <StarIcon />
                        </IconButton>
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root size="3" placeholder="your.email" defaultValue="benoit">
                      <TextField.Slot>
                        <EnvelopeOpenIcon />
                      </TextField.Slot>
                      <TextField.Slot px="1" gap="2">
                        <Text size="3">@workos.com</Text>
                        <Tooltip content="Send email">
                          <IconButton variant="solid">
                            <PaperPlaneIcon />
                          </IconButton>
                        </Tooltip>
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root
                      size="3"
                      radius="full"
                      placeholder="your.email"
                      defaultValue="benoit"
                    >
                      <TextField.Slot>
                        <EnvelopeOpenIcon />
                      </TextField.Slot>
                      <TextField.Slot px="1" gap="2">
                        <Text size="3">@workos.com</Text>
                        <Button variant="solid">Send</Button>
                      </TextField.Slot>
                    </TextField.Root>

                    <TextField.Root
                      size="3"
                      radius="full"
                      disabled
                      placeholder="your.email"
                      defaultValue="benoit"
                    >
                      <TextField.Slot>
                        <EnvelopeOpenIcon />
                      </TextField.Slot>
                      <TextField.Slot px="1" gap="2">
                        <Text size="3">@workos.com</Text>
                        <Button variant="solid">Send</Button>
                      </TextField.Slot>
                    </TextField.Root>
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Type date
                    </Heading>

                    <TextField.Root size="1" placeholder="Date" type="date" />
                    <TextField.Root size="2" placeholder="Date" type="date" />
                    <TextField.Root size="3" placeholder="Date" type="date" />
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Type datetime-local
                    </Heading>

                    <TextField.Root size="1" placeholder="Local datetime" type="datetime-local" />
                    <TextField.Root size="2" placeholder="Local datetime" type="datetime-local" />
                    <TextField.Root size="3" placeholder="Local datetime" type="datetime-local" />
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Type month
                    </Heading>

                    <TextField.Root size="1" placeholder="Month" type="month" />
                    <TextField.Root size="2" placeholder="Month" type="month" />
                    <TextField.Root size="3" placeholder="Month" type="month" />
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Type number
                    </Heading>

                    <TextField.Root size="1" placeholder="Number" type="number" />
                    <TextField.Root size="2" placeholder="Number" type="number" />
                    <TextField.Root size="3" placeholder="Number" type="number" />
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Type search
                    </Heading>

                    <TextField.Root size="1" placeholder="Search" type="search" />
                    <TextField.Root size="2" placeholder="Search" type="search" />
                    <TextField.Root size="3" placeholder="Search" type="search" />
                  </Flex>

                  <Flex direction="column" align="start" gap="3">
                    <Heading size="3" mb="2">
                      Type time
                    </Heading>

                    <TextField.Root size="1" placeholder="Time" type="time" />

                    <Flex gap="4">
                      <TextField.Root size="2" placeholder="Time" type="time" />

                      <TextField.Root size="2" placeholder="Time" type="time">
                        <TextField.Slot side="right" pr="1">
                          <Button size="1">Submit</Button>
                        </TextField.Slot>
                      </TextField.Root>
                    </Flex>

                    <Flex gap="4">
                      <TextField.Root size="3" placeholder="Time" type="time" />

                      <TextField.Root size="3" placeholder="Time" type="time">
                        <TextField.Slot side="right" pr="2">
                          <Button size="1">Submit</Button>
                        </TextField.Slot>
                      </TextField.Root>
                    </Flex>
                  </Flex>
                </Grid>
              </Section>
            </Container>
          </div>
        </Theme>
      </body>
    </html>
  );
}


================================================
File: apps/playground/app/test-theme-toggle/page.tsx
================================================
'use client';

import * as React from 'react';
import { Theme, Flex, ThemePanel, IconButton } from '@radix-ui/themes';
import { useTheme } from 'next-themes';
import { SunIcon, MoonIcon } from '@radix-ui/react-icons';
import { NextThemeProvider } from '../next-theme-provider';

export default function Test() {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <NextThemeProvider>
          <Theme asChild>
            <div id="root">
              <ThemeTogglePanel />
              <Flex height="100vh" width="100vw" align="center" justify="center">
                <ThemeToggle />
              </Flex>
            </div>
          </Theme>
        </NextThemeProvider>
      </body>
    </html>
  );
}

function ThemeTogglePanel() {
  const { systemTheme, setTheme } = useTheme();
  return (
    <ThemePanel
      onAppearanceChange={(newTheme) => {
        const newThemeMatchesSystem = newTheme === systemTheme;
        setTheme(newThemeMatchesSystem ? 'system' : (newTheme as 'light' | 'dark'));
      }}
    />
  );
}

function ThemeToggle({ children, ...props }: React.ComponentPropsWithoutRef<typeof IconButton>) {
  const { theme, systemTheme, setTheme } = useTheme();

  return (
    <>
      <style>{`
        :root, .light, .light-theme {
          --theme-toggle-sun-icon-display: block;
          --theme-toggle-moon-icon-display: none;
        }
        .dark, .dark-theme {
          --theme-toggle-sun-icon-display: none;
          --theme-toggle-moon-icon-display: block;
        }
      `}</style>

      <IconButton
        size="3"
        variant="ghost"
        color="gray"
        onClick={() => {
          // Set 'system' theme if the next theme matches the system theme
          const resolvedTheme = theme === 'system' ? systemTheme : theme;
          const newTheme = resolvedTheme === 'dark' ? 'light' : 'dark';
          const newThemeMatchesSystem = newTheme === systemTheme;
          setTheme(newThemeMatchesSystem ? 'system' : newTheme);
        }}
        {...props}
      >
        <SunIcon
          width="16"
          height="16"
          style={{ display: 'var(--theme-toggle-sun-icon-display)' }}
        />
        <MoonIcon
          width="16"
          height="16"
          style={{ display: 'var(--theme-toggle-moon-icon-display)' }}
        />
      </IconButton>
    </>
  );
}


================================================
File: apps/playground/app/test-webkit-tap-highlight-color/page.tsx
================================================
'use client';
import * as React from 'react';
import {
  Theme,
  Container,
  Section,
  Card,
  Text,
  Box,
  Button,
  Flex,
  ThemePanel,
  RadioCards,
  CheckboxCards,
  DropdownMenu,
  Link,
  CheckboxGroup,
} from '@radix-ui/themes';
import { NextThemeProvider } from '../next-theme-provider';
import { TrashIcon } from '@radix-ui/react-icons';

export default function Test() {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <NextThemeProvider>
          <Theme asChild>
            <div id="root">
              <ThemePanel defaultOpen={false} />

              <Container size="1" px="5">
                <Section>
                  <Flex align="start" direction="column" gap="5">
                    <Button variant="classic">Click me</Button>
                    <Button variant="solid">Click me</Button>
                    <Button variant="outline">Click me</Button>
                    <Button variant="surface">Click me</Button>
                    <Button variant="soft">Click me</Button>
                    <Button variant="ghost">Click me</Button>

                    <Card asChild>
                      <button>
                        <Text as="p" size="2" weight="bold" trim="start">
                          Button
                        </Text>
                        <Text as="p" color="gray" size="2" trim="end">
                          That looks like card
                        </Text>
                      </button>
                    </Card>

                    <DropdownMenu.Root>
                      <DropdownMenu.Trigger>
                        <Button>
                          Dropdown Menu <DropdownMenu.TriggerIcon />
                        </Button>
                      </DropdownMenu.Trigger>
                      <DropdownMenuContentDemo />
                    </DropdownMenu.Root>

                    <Link href="#" onClick={(event) => event.preventDefault()}>
                      Link
                    </Link>

                    <CheckboxGroup.Root defaultValue={['1']}>
                      <CheckboxGroup.Item value="1">Checkbox 1</CheckboxGroup.Item>
                      <CheckboxGroup.Item value="2">Checkbox 2</CheckboxGroup.Item>
                      <CheckboxGroup.Item value="3">Checkbox 3</CheckboxGroup.Item>
                    </CheckboxGroup.Root>

                    <Box width="100%">
                      <CheckboxCards.Root defaultValue={['0']} size="2" gap="2" columns="1">
                        <CheckboxCards.Item value="0">Node.js</CheckboxCards.Item>
                        <CheckboxCards.Item value="1">Ruby</CheckboxCards.Item>
                        <CheckboxCards.Item value="2">Go</CheckboxCards.Item>
                      </CheckboxCards.Root>
                    </Box>

                    <Box width="100%">
                      <RadioCards.Root defaultValue="0" size="2" gap="2" columns="1">
                        <RadioCards.Item value="0">Node.js</RadioCards.Item>
                        <RadioCards.Item value="1">Ruby</RadioCards.Item>
                        <RadioCards.Item value="2">Go</RadioCards.Item>
                      </RadioCards.Root>
                    </Box>
                  </Flex>
                </Section>
              </Container>
            </div>
          </Theme>
        </NextThemeProvider>
      </body>
    </html>
  );
}

function DropdownMenuContentDemo(props: React.ComponentProps<typeof DropdownMenu.Content>) {
  return (
    <DropdownMenu.Content {...props}>
      <DropdownMenu.Item shortcut="⌘+T">New Tab</DropdownMenu.Item>
      <DropdownMenu.Item shortcut="⌘+N">New Window</DropdownMenu.Item>
      <DropdownMenu.Item shortcut="⇧+⌘+N" disabled>
        New Private Window
      </DropdownMenu.Item>
      <DropdownMenu.Sub>
        <DropdownMenu.SubTrigger>More Tools</DropdownMenu.SubTrigger>

        <DropdownMenu.SubContent>
          <DropdownMenu.Item shortcut="⌘+S">Save Page As…</DropdownMenu.Item>
          <DropdownMenu.Item>Create Shortcut…</DropdownMenu.Item>
          <DropdownMenu.Item>Name Window…</DropdownMenu.Item>
          <DropdownMenu.Separator />
          <DropdownMenu.Item>Developer Tools</DropdownMenu.Item>
          <DropdownMenu.Item color="red">
            <Box asChild mx="-3px">
              <TrashIcon />
            </Box>
            Delete
          </DropdownMenu.Item>
        </DropdownMenu.SubContent>
      </DropdownMenu.Sub>

      <DropdownMenu.Separator />
      <DropdownMenu.Group>
        <DropdownMenu.Label>Other</DropdownMenu.Label>
        <DropdownMenu.Item shortcut="⌘+P">Print</DropdownMenu.Item>
        <DropdownMenu.Item shortcut="⌘+Q" asChild>
          <a href="#logout">Logout</a>
        </DropdownMenu.Item>
      </DropdownMenu.Group>

      {props.variant === 'solid' && (
        <>
          <DropdownMenu.Separator />

          <DropdownMenu.CheckboxItem shortcut="⌘+B" checked>
            Show Bookmarks
          </DropdownMenu.CheckboxItem>
          <DropdownMenu.CheckboxItem>Show Full URLs</DropdownMenu.CheckboxItem>

          <DropdownMenu.Separator />

          <DropdownMenu.Label>People</DropdownMenu.Label>
          <DropdownMenu.RadioGroup value="pedro">
            <DropdownMenu.RadioItem value="pedro">Pedro Duarte</DropdownMenu.RadioItem>
            <DropdownMenu.RadioItem value="colm">Colm Tuite</DropdownMenu.RadioItem>
          </DropdownMenu.RadioGroup>

          <DropdownMenu.Separator />

          <DropdownMenu.Item color="red">Delete</DropdownMenu.Item>
        </>
      )}
    </DropdownMenu.Content>
  );
}


================================================
File: apps/playground/components/loading-buttons.tsx
================================================
'use client';

import * as React from 'react';
import { ArrowRightIcon, StarIcon } from '@radix-ui/react-icons';
import { Button, Em, Flex, IconButton, Spinner, Text } from '@radix-ui/themes';
import { buttonPropDefs } from '@radix-ui/themes/props';
import { mapButtonSizeToSpinnerSize, mapResponsiveProp } from '@radix-ui/themes/helpers';

export function LoadingButtons() {
  const [loading1, onClick1] = useLoading();
  const [loading2, onClick2] = useLoading();
  const [loading3, onClick3] = useLoading();
  const [loading4, onClick4] = useLoading();

  return (
    <Flex direction="column" gap="5">
      {buttonPropDefs.size.values.map((size) => (
        <Flex key={size} gap="5">
          <Flex direction="column" align="center" gap="5">
            {([undefined, 'ghost'] as const).map((variant, i) => (
              <IconButton
                key={i}
                loading={loading1}
                onClick={onClick1}
                size={size}
                variant={variant}
              >
                <StarIcon
                  width={mapButtonSizeToIconSize(size)}
                  height={mapButtonSizeToIconSize(size)}
                />
              </IconButton>
            ))}
          </Flex>

          <Flex direction="column" align="center" gap="5">
            {([undefined, 'ghost'] as const).map((variant, i) => (
              <Button key={i} loading={loading2} onClick={onClick2} size={size} variant={variant}>
                Continue
              </Button>
            ))}
          </Flex>

          <Flex direction="column" align="center" gap="5">
            {([undefined, 'ghost'] as const).map((variant, i) => (
              <Button key={i} loading={loading3} onClick={onClick3} size={size} variant={variant}>
                Continue
                <ArrowRightIcon
                  width={mapButtonSizeToIconSize(size)}
                  height={mapButtonSizeToIconSize(size)}
                />
              </Button>
            ))}
          </Flex>

          <Flex direction="column" align="center" gap="5">
            {([undefined, 'ghost'] as const).map((variant, i) => (
              <Button key={i} disabled={loading4} onClick={onClick4} size={size} variant={variant}>
                Continue
                <Spinner
                  loading={loading4}
                  size={mapResponsiveProp(size, mapButtonSizeToSpinnerSize)}
                >
                  <ArrowRightIcon
                    width={mapButtonSizeToIconSize(size)}
                    height={mapButtonSizeToIconSize(size)}
                  />
                </Spinner>
              </Button>
            ))}
          </Flex>
        </Flex>
      ))}

      <Text as="p">
        Lorem ipsum, dolor sit amet{' '}
        <span style={{ display: 'inline-block' }}>
          <Spinner>
            <Em>consectetur</Em>
          </Spinner>
        </span>{' '}
        adipisicing elit. Eum veritatis, cupiditate inventore recusandae sapiente corporis non
        similique facere esse praesentium? Dolorum pariatur omnis doloremque unde nam rem ipsa velit
        vitae.
      </Text>
    </Flex>
  );
}

function mapButtonSizeToIconSize(size: (typeof buttonPropDefs.size.values)[number]) {
  switch (size) {
    case '1':
    case '2':
      return '16';
    case '3':
      return '18';
    case '4':
      return '20';
  }
}

function useLoading() {
  const [loading, setLoading] = React.useState(false);
  const handleClick = React.useCallback(() => {
    setLoading(true);
    setTimeout(() => setLoading(false), 2000);
  }, []);
  return [loading, handleClick] as const;
}


================================================
File: apps/playground/components/snapshot-logo.tsx
================================================
export function SnapshotLogo(props: any) {
  return (
    <svg
      width="559"
      height="191"
      viewBox="0 0 559 191"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M106.396 60H74.3965V50H106.396C117.442 50 126.396 58.9543 126.396 70V102H116.396V70C116.396 64.4772 111.919 60 106.396 60Z"
        fill="var(--accent-9)"
      />
      <path
        d="M70.3965 116H102.396V126H70.3965C59.3508 126 50.3965 117.046 50.3965 106L50.3965 74H60.3965L60.3965 106C60.3965 111.523 64.8736 116 70.3965 116Z"
        fill="var(--accent-9)"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M108.396 88C108.396 99.0457 99.4422 108 88.3965 108C77.3508 108 68.3965 99.0457 68.3965 88C68.3965 76.9543 77.3508 68 88.3965 68C99.4422 68 108.396 76.9543 108.396 88ZM98.3965 88C98.3965 93.5229 93.9193 98 88.3965 98C82.8736 98 78.3965 93.5229 78.3965 88C78.3965 82.4772 82.8736 78 88.3965 78C93.9193 78 98.3965 82.4772 98.3965 88Z"
        fill="var(--accent-9)"
      />
      <path
        d="M169.071 119.631C165.284 119.631 161.875 118.982 158.844 117.683C155.814 116.33 153.433 114.437 151.702 112.002C149.97 109.567 149.104 106.726 149.104 103.479H159.007C159.223 105.914 160.17 107.916 161.848 109.485C163.579 111.055 165.987 111.839 169.071 111.839C172.264 111.839 174.753 111.082 176.539 109.567C178.324 107.997 179.217 105.995 179.217 103.56C179.217 101.666 178.649 100.124 177.513 98.9338C176.43 97.7434 175.051 96.8235 173.373 96.1742C171.75 95.5248 169.477 94.8214 166.555 94.0639C162.876 93.0899 159.873 92.1159 157.546 91.1419C155.273 90.1138 153.325 88.5445 151.702 86.4342C150.078 84.3239 149.267 81.5101 149.267 77.9929C149.267 74.7463 150.078 71.9054 151.702 69.4705C153.325 67.0355 155.598 65.1686 158.52 63.87C161.442 62.5713 164.824 61.922 168.666 61.922C174.131 61.922 178.595 63.3018 182.058 66.0615C185.575 68.767 187.523 72.5007 187.902 77.2624H177.675C177.513 75.2062 176.539 73.4476 174.753 71.9866C172.967 70.5256 170.614 69.7951 167.692 69.7951C165.04 69.7951 162.876 70.4715 161.198 71.8243C159.521 73.1771 158.682 75.125 158.682 77.6683C158.682 79.3998 159.196 80.8337 160.224 81.9701C161.306 83.0523 162.659 83.9181 164.283 84.5674C165.906 85.2167 168.124 85.9202 170.938 86.6777C174.672 87.7058 177.702 88.7339 180.029 89.762C182.41 90.7901 184.412 92.3864 186.035 94.5508C187.713 96.6612 188.551 99.502 188.551 103.073C188.551 105.941 187.767 108.647 186.198 111.19C184.682 113.733 182.437 115.789 179.461 117.359C176.539 118.874 173.076 119.631 169.071 119.631Z"
        fill="var(--accent-12)"
      />
      <path
        d="M217.975 73.6099C221.493 73.6099 224.631 74.3404 227.391 75.8014C230.204 77.2624 232.396 79.4269 233.965 82.2947C235.534 85.1626 236.319 88.6257 236.319 92.684V119.063H227.147V94.0639C227.147 90.0596 226.146 87.0024 224.144 84.8921C222.142 82.7276 219.409 81.6454 215.946 81.6454C212.483 81.6454 209.723 82.7276 207.667 84.8921C205.665 87.0024 204.664 90.0596 204.664 94.0639V119.063H195.411V74.3404H204.664V79.4539C206.179 77.6141 208.1 76.1802 210.427 75.1521C212.808 74.124 215.324 73.6099 217.975 73.6099Z"
        fill="var(--accent-12)"
      />
      <path
        d="M240.979 96.4988C240.979 92.0076 241.899 88.0305 243.739 84.5674C245.633 81.1043 248.176 78.4258 251.368 76.5319C254.615 74.5839 258.186 73.6099 262.082 73.6099C265.6 73.6099 268.657 74.3134 271.254 75.7203C273.906 77.073 276.016 78.7775 277.585 80.8337V74.3404H286.919V119.063H277.585V112.407C276.016 114.518 273.878 116.276 271.173 117.683C268.467 119.09 265.383 119.794 261.92 119.794C258.078 119.794 254.561 118.82 251.368 116.872C248.176 114.869 245.633 112.11 243.739 108.593C241.899 105.021 240.979 100.99 240.979 96.4988ZM277.585 96.6612C277.585 93.5769 276.936 90.8984 275.637 88.6257C274.393 86.3531 272.742 84.6215 270.686 83.4311C268.63 82.2406 266.411 81.6454 264.03 81.6454C261.649 81.6454 259.431 82.2406 257.375 83.4311C255.318 84.5674 253.641 86.2719 252.342 88.5445C251.098 90.7631 250.476 93.4145 250.476 96.4988C250.476 99.5832 251.098 102.289 252.342 104.615C253.641 106.942 255.318 108.728 257.375 109.972C259.485 111.163 261.704 111.758 264.03 111.758C266.411 111.758 268.63 111.163 270.686 109.972C272.742 108.782 274.393 107.05 275.637 104.778C276.936 102.451 277.585 99.7455 277.585 96.6612Z"
        fill="var(--accent-12)"
      />
      <path
        d="M304.267 80.9149C305.836 78.8587 307.974 77.1271 310.679 75.7203C313.385 74.3134 316.442 73.6099 319.851 73.6099C323.747 73.6099 327.291 74.5839 330.484 76.5319C333.731 78.4258 336.274 81.1043 338.114 84.5674C339.953 88.0305 340.873 92.0076 340.873 96.4988C340.873 100.99 339.953 105.021 338.114 108.593C336.274 112.11 333.731 114.869 330.484 116.872C327.291 118.82 323.747 119.794 319.851 119.794C316.442 119.794 313.412 119.117 310.761 117.764C308.109 116.358 305.945 114.626 304.267 112.57V140.329H295.014V74.3404H304.267V80.9149ZM331.458 96.4988C331.458 93.4145 330.809 90.7631 329.51 88.5445C328.265 86.2719 326.588 84.5674 324.478 83.4311C322.421 82.2406 320.203 81.6454 317.822 81.6454C315.495 81.6454 313.277 82.2406 311.166 83.4311C309.11 84.6215 307.433 86.3531 306.134 88.6257C304.89 90.8984 304.267 93.5769 304.267 96.6612C304.267 99.7455 304.89 102.451 306.134 104.778C307.433 107.05 309.11 108.782 311.166 109.972C313.277 111.163 315.495 111.758 317.822 111.758C320.203 111.758 322.421 111.163 324.478 109.972C326.588 108.728 328.265 106.942 329.51 104.615C330.809 102.289 331.458 99.5832 331.458 96.4988Z"
        fill="var(--accent-12)"
      />
      <path
        d="M364.552 119.631C360.765 119.631 357.356 118.982 354.325 117.683C351.295 116.33 348.914 114.437 347.183 112.002C345.451 109.567 344.585 106.726 344.585 103.479H354.488C354.704 105.914 355.651 107.916 357.328 109.485C359.06 111.055 361.468 111.839 364.552 111.839C367.745 111.839 370.234 111.082 372.02 109.567C373.805 107.997 374.698 105.995 374.698 103.56C374.698 101.666 374.13 100.124 372.994 98.9338C371.911 97.7434 370.532 96.8235 368.854 96.1742C367.231 95.5248 364.958 94.8214 362.036 94.0639C358.357 93.0899 355.353 92.1159 353.027 91.1419C350.754 90.1138 348.806 88.5445 347.183 86.4342C345.559 84.3239 344.748 81.5101 344.748 77.9929C344.748 74.7463 345.559 71.9054 347.183 69.4705C348.806 67.0355 351.079 65.1686 354.001 63.87C356.923 62.5713 360.305 61.922 364.146 61.922C369.612 61.922 374.076 63.3018 377.539 66.0615C381.056 68.767 383.004 72.5007 383.383 77.2624H373.156C372.994 75.2062 372.02 73.4476 370.234 71.9866C368.448 70.5256 366.094 69.7951 363.172 69.7951C360.521 69.7951 358.357 70.4715 356.679 71.8243C355.002 73.1771 354.163 75.125 354.163 77.6683C354.163 79.3998 354.677 80.8337 355.705 81.9701C356.787 83.0523 358.14 83.9181 359.763 84.5674C361.387 85.2167 363.605 85.9202 366.419 86.6777C370.153 87.7058 373.183 88.7339 375.51 89.762C377.891 90.7901 379.893 92.3864 381.516 94.5508C383.194 96.6612 384.032 99.502 384.032 103.073C384.032 105.941 383.248 108.647 381.678 111.19C380.163 113.733 377.918 115.789 374.942 117.359C372.02 118.874 368.557 119.631 364.552 119.631Z"
        fill="var(--accent-12)"
      />
      <path
        d="M414.024 73.6099C417.433 73.6099 420.464 74.3404 423.115 75.8014C425.821 77.2624 427.931 79.4269 429.446 82.2947C431.015 85.1626 431.8 88.6257 431.8 92.684V119.063H422.628V94.0639C422.628 90.0596 421.627 87.0024 419.625 84.8921C417.623 82.7276 414.89 81.6454 411.427 81.6454C407.964 81.6454 405.204 82.7276 403.148 84.8921C401.146 87.0024 400.145 90.0596 400.145 94.0639V119.063H390.892V59H400.145V79.5351C401.714 77.6412 403.689 76.1802 406.07 75.1521C408.505 74.124 411.157 73.6099 414.024 73.6099Z"
        fill="var(--accent-12)"
      />
      <path
        d="M458.943 119.794C454.722 119.794 450.908 118.847 447.499 116.953C444.09 115.005 441.411 112.299 439.463 108.836C437.515 105.319 436.541 101.261 436.541 96.6612C436.541 92.1159 437.542 88.0846 439.544 84.5674C441.546 81.0502 444.279 78.3446 447.742 76.4508C451.205 74.5569 455.074 73.6099 459.349 73.6099C463.624 73.6099 467.493 74.5569 470.956 76.4508C474.419 78.3446 477.151 81.0502 479.153 84.5674C481.156 88.0846 482.157 92.1159 482.157 96.6612C482.157 101.206 481.129 105.238 479.072 108.755C477.016 112.272 474.202 115.005 470.631 116.953C467.114 118.847 463.218 119.794 458.943 119.794ZM458.943 111.758C461.324 111.758 463.542 111.19 465.599 110.054C467.709 108.917 469.413 107.213 470.712 104.94C472.011 102.667 472.66 99.9078 472.66 96.6612C472.66 93.4145 472.038 90.6819 470.793 88.4634C469.549 86.1907 467.898 84.4862 465.842 83.3499C463.786 82.2136 461.567 81.6454 459.187 81.6454C456.806 81.6454 454.587 82.2136 452.531 83.3499C450.529 84.4862 448.933 86.1907 447.742 88.4634C446.552 90.6819 445.956 93.4145 445.956 96.6612C445.956 101.477 447.174 105.211 449.609 107.862C452.098 110.459 455.209 111.758 458.943 111.758Z"
        fill="var(--accent-12)"
      />
      <path
        d="M498.04 81.8889V106.645C498.04 108.322 498.419 109.54 499.177 110.297C499.988 111.001 501.341 111.352 503.235 111.352H508.917V119.063H501.612C497.445 119.063 494.253 118.089 492.034 116.141C489.816 114.193 488.706 111.028 488.706 106.645V81.8889H483.431V74.3404H488.706V63.2206H498.04V74.3404H508.917V81.8889H498.04Z"
        fill="var(--accent-12)"
      />
    </svg>
  );
}


================================================
File: packages/radix-ui-themes/README.md
================================================
[![Radix Themes Logo](https://radix-ui.com/social/themes.png)](https://radix-ui.com/themes)

# Radix Themes

**An open-source component library optimized for fast development, easy maintenance, and accessibility.**

---

## Documentation

For full documentation, visit [radix-ui.com/themes/docs](https://radix-ui.com/themes/docs).

## Releases

For changelog, visit [radix-ui.com/themes/docs/overview/releases](https://radix-ui.com/themes/docs/overview/releases).

## Authors

- Benoît Grélard ([@benoitgrelard](https://twitter.com/benoitgrelard))
- Vlad Moroz ([@vladyslavmoroz](https://twitter.com/vladyslavmoroz))
- Andy Hook ([@Andy_Hook](https://twitter.com/Andy_Hook))
- Lucas Motta ([@elmotta](https://twitter.com/elmotta))

---

## Community

See our [contribution guidelines](../../.github/CONTRIBUTING.md) for information on local development and creating a pull request.

- [Github Discussions](https://github.com/radix-ui/themes/discussions) - Ask questions and get answers from other community members.
- [Discord](https://discord.com/invite/7Xb99uG) - To get involved with the Radix community, ask questions and share tips.
- [Twitter](https://twitter.com/radix_ui) - To receive updates, announcements, blog posts, and general Radix tips.

## License

Licensed under the MIT License, Copyright © 2023-present [WorkOS](https://workos.com).

See [LICENSE](./LICENSE) for more information.


================================================
File: packages/radix-ui-themes/eslint.config.mjs
================================================
// @ts-check
import globals from 'globals';
import eslint from '@eslint/js';
import tseslint from 'typescript-eslint';
import reactHooks from 'eslint-plugin-react-hooks';
import jsxA11y from 'eslint-plugin-jsx-a11y';

export default tseslint.config(
  { ignores: ['node_modules', 'dist'] },
  {
    extends: [eslint.configs.recommended, ...tseslint.configs.recommended],
    languageOptions: {
      ecmaVersion: 2020,
      globals: {
        ...globals.browser,
        ...globals.node,
      },
    },
    plugins: {
      // @ts-expect-error
      'react-hooks': reactHooks,
      'jsx-a11y': jsxA11y,
    },
  },
  {
    rules: {
      ...reactHooks.configs.recommended.rules,
      ...jsxA11y.flatConfigs.recommended.rules,
      '@typescript-eslint/ban-ts-comment': 'off',
      '@typescript-eslint/no-empty-object-type': 'off',
      '@typescript-eslint/no-explicit-any': 'off',
      '@typescript-eslint/no-use-before-define': [
        'warn',
        {
          functions: false,
          classes: false,
          variables: false,
          typedefs: false,
        },
      ],
      '@typescript-eslint/no-unused-expressions': [
        'warn',
        {
          allowShortCircuit: true,
          allowTernary: true,
          allowTaggedTemplates: true,
        },
      ],
      '@typescript-eslint/no-unused-vars': [
        'warn',
        {
          args: 'after-used',
          ignoreRestSiblings: true,
          argsIgnorePattern: '^_',
          caughtErrorsIgnorePattern: '^_',
          destructuredArrayIgnorePattern: '^_',
          varsIgnorePattern: '^_',
        },
      ],
      'no-empty': 'off',
      'prefer-const': 'off',
      // TODO: fix issues then re-enable
      'jsx-a11y/label-has-associated-control': 'off',
      'no-irregular-whitespace': 'off',
    },
  }
);


================================================
File: packages/radix-ui-themes/package.json
================================================
{
  "name": "@radix-ui/themes",
  "version": "3.2.0",
  "type": "commonjs",
  "main": "./dist/cjs/index.js",
  "types": "./dist/cjs/index.d.ts",
  "module": "./dist/esm/index.js",
  "style": "./styles.css",
  "exports": {
    ".": {
      "require": {
        "types": "./dist/cjs/index.d.ts",
        "default": "./dist/cjs/index.js"
      },
      "import": {
        "types": "./dist/esm/index.d.ts",
        "default": "./dist/esm/index.js"
      }
    },
    "./components/*": {
      "require": {
        "types": "./dist/cjs/components/*.d.ts",
        "default": "./dist/cjs/components/*.js"
      },
      "import": {
        "types": "./dist/esm/components/*.d.ts",
        "default": "./dist/esm/components/*.js"
      }
    },
    "./helpers": {
      "require": {
        "types": "./dist/cjs/helpers/index.d.ts",
        "default": "./dist/cjs/helpers/index.js"
      },
      "import": {
        "types": "./dist/esm/helpers/index.d.ts",
        "default": "./dist/esm/helpers/index.js"
      }
    },
    "./props": {
      "require": {
        "types": "./dist/cjs/props/index.d.ts",
        "default": "./dist/cjs/props/index.js"
      },
      "import": {
        "types": "./dist/esm/props/index.d.ts",
        "default": "./dist/esm/props/index.js"
      }
    },
    "./*": "./*"
  },
  "publishConfig": {
    "access": "public"
  },
  "sideEffects": [
    "*.css"
  ],
  "license": "MIT",
  "files": [
    "src/**",
    "dist/**",
    "tokens/**",
    "layout/**",
    "*.css",
    "postcss-breakpoints.cjs",
    "postcss-whitespace.cjs"
  ],
  "scripts": {
    "build": "pnpm build:js && pnpm build:css",
    "build:js": "pnpm build:js:cjs && pnpm build:js:esm && pnpm build:js:cjs:types && pnpm build:js:esm:types",
    "build:js:cjs": "node scripts/esbuild-cjs.js",
    "build:js:cjs:types": "tsc --outdir dist/cjs",
    "build:js:esm": "node scripts/esbuild-esm.js",
    "build:js:esm:types": "tsc --outdir dist/esm",
    "build:css": "pnpm build:css:index && pnpm build:css:tokens && pnpm build:css:components && pnpm build:css:utilities && pnpm build:css:layout",
    "build:css:index": "postcss src/styles/index.css -o styles.css",
    "build:css:components": "postcss src/components/index.css -o components.css",
    "build:css:utilities": "postcss src/styles/utilities/index.css -o utilities.css",
    "build:css:tokens": "pnpm build:css:tokens:index && pnpm build:css:tokens:base && pnpm build:css:tokens:colors",
    "build:css:tokens:index": "postcss src/styles/tokens/index.css -o tokens.css",
    "build:css:tokens:base": "postcss src/styles/tokens/base.css -o tokens/base.css",
    "build:css:tokens:colors": "postcss src/styles/tokens/colors/*.css --dir tokens/colors",
    "build:css:layout": "pnpm build:css:layout:index && pnpm build:css:layout:tokens && pnpm build:css:layout:components && pnpm build:css:layout:utilities",
    "build:css:layout:index": "postcss src/styles/layout.css -o layout.css",
    "build:css:layout:tokens": "postcss src/styles/tokens/layout.css -o layout/tokens.css",
    "build:css:layout:components": "postcss src/components/layout.css -o layout/components.css",
    "build:css:layout:utilities": "postcss src/styles/utilities/layout.css -o layout/utilities.css",
    "dev": "pnpm dev:js & pnpm dev:css",
    "dev:js": "pnpm dev:js:cjs & pnpm dev:js:esm & pnpm dev:js:cjs:types & pnpm dev:js:esm:types",
    "dev:js:cjs": "node scripts/esbuild-cjs.js watch=true",
    "dev:js:cjs:types": "tsc --watch --incremental --outdir dist/cjs",
    "dev:js:esm": "node scripts/esbuild-esm.js watch=true",
    "dev:js:esm:types": "tsc --watch --incremental --outdir dist/esm >/dev/null",
    "dev:css": "postcss src/styles/index.css -o styles.css --watch",
    "lint": "pnpm lint:js && pnpm lint:css && pnpm lint:ts",
    "lint:js": "eslint \"src/**/*.ts*\"",
    "lint:ts": "tsc --noEmit",
    "lint:css": "stylelint \"src/**/*.css\"",
    "clean": "rm -rf .turbo node_modules dist tokens layout *.css",
    "prepublishOnly": "pnpm lint"
  },
  "dependencies": {
    "@radix-ui/colors": "^3.0.0",
    "classnames": "^2.3.2",
    "radix-ui": "^1.1.2",
    "react-remove-scroll-bar": "^2.3.8"
  },
  "peerDependencies": {
    "@types/react": "*",
    "@types/react-dom": "*",
    "react": "16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
    "react-dom": "16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
  },
  "peerDependenciesMeta": {
    "@types/react": {
      "optional": true
    },
    "@types/react-dom": {
      "optional": true
    }
  },
  "devDependencies": {
    "@eslint/js": "^9.18.0",
    "autoprefixer": "10.4.19",
    "esbuild": "0.20.0",
    "eslint": "^9.18.0",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-react": "^7.37.4",
    "eslint-plugin-react-hooks": "^5.1.0",
    "globals": "^15.14.0",
    "postcss": "8.4.33",
    "postcss-cli": "11.0.0",
    "postcss-combine-duplicated-selectors": "10.0.3",
    "postcss-custom-media": "10.0.2",
    "postcss-discard-empty": "6.0.1",
    "postcss-import": "16.0.0",
    "postcss-nesting": "12.0.2",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "stylelint": "16.6.1",
    "typescript": "^5.7.2",
    "typescript-eslint": "^8.18.1"
  },
  "homepage": "https://radix-ui.com/themes",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/radix-ui/themes.git"
  },
  "bugs": {
    "url": "https://github.com/radix-ui/themes/issues"
  }
}


================================================
File: packages/radix-ui-themes/postcss-breakpoints.cjs
================================================
const fs = require('fs');
const path = require('path');
const postcss = require('postcss');

// Build a list of breakpoints from "@custom media" rules in "breakpoints.css"
const breakpointsFile = path.resolve('./src/styles/breakpoints.css');
const breakpointsCss = fs.readFileSync(breakpointsFile, 'utf-8');
const breakpoints = postcss
  .parse(breakpointsCss)
  .nodes.map((node) => {
    if (node.type === 'atrule' && node.name === 'custom-media') {
      const [_match, name, params] = node.params.match(/--(\w+)\s+(.+)/);
      return { name, params };
    }

    return null;
  })
  .filter(Boolean);

const cache = new WeakMap();

module.exports = () => ({
  postcssPlugin: 'postcss-breakpoints',
  Rule(rule) {
    if (rule.parent.name === 'breakpoints') {
      const breakpointsRule = rule.parent;

      // when we first meet a given @breakpoints at-rule
      if (!cache.has(breakpointsRule)) {
        // create the final media rules for this @breakpoints at-rule
        const medias = breakpoints.reduce((breakpointsMedias, breakpoint) => {
          breakpointsMedias[breakpoint.name] = new postcss.AtRule({
            name: 'media',
            params: breakpoint.params,
          });
          return breakpointsMedias;
        }, {});

        // add an entry to the cache
        cache.set(breakpointsRule, medias);

        // add final media rules after the @breakpoints at-rule
        const mediaRules = Object.values(medias).reverse();
        mediaRules.forEach((media) => {
          breakpointsRule.after(media);
        });
      }

      // move the rule itself before @breakpoints at-rule
      breakpointsRule.before(rule);

      // save clone of the rule before we modify it
      const originalRule = rule.clone();
      // clean up the extra indentation
      rule.selector = rule.selector.replace(/\n\s\s/g, '\n');
      rule.cleanRaws();

      // add breakpoint-level rules
      breakpoints.forEach((breakpoint) => {
        const clone = originalRule.clone();
        addPrefix(clone, breakpoint.name);
        cache.get(breakpointsRule)[breakpoint.name].append(clone);
      });

      // remove @breakpoints at-rule and clear cache if it has no rules
      if (breakpointsRule.nodes.length === 0) {
        breakpointsRule.remove();
        cache.delete(breakpointsRule);
      }
    }
  },
});

module.exports.postcss = true;

function addPrefix(node, prefix) {
  if (node.type === 'atrule') {
    node.each((child) => addPrefix(child, prefix));
  }

  /**
   * Should match responsive classes (rt-r- prefix):
   * ```
   * .rt-r-size-1
   * .rt-m-2
   * .-rt-m-2
   * .rt-Button.rt-r-size-1 (captures "rt-r-size-1")
   * ```
   *
   * Should not match:
   * .rt-Button
   */
  const classNameRegexp = /\.(-?rt-r-[a-z0-9-]+)/g;

  // Check for rules that use compound props on a component:
  // - a component name (prefixed with "rt-" and pascal cased)
  // - followed by 2 or more prop selectors (lowercase, numbers, -)
  //
  // e.g. ".rt-DialogContent.rt-r-size-2.gray"
  if (/\.rt-(?:[A-Z][a-z]+)+(?:\.[a-z0-9-]+){2,}/.test(node.selector)) {
    throw Error(`
      "${node.selector}" looks like it uses compound props on a component.
      "@breakpoints" does not support compound props yet.
    `);
  }

  if (classNameRegexp.test(node.selector)) {
    node.selector = node.selector.replace(classNameRegexp, `.${prefix}\\:$1`);
  }
}


================================================
File: packages/radix-ui-themes/postcss-whitespace.cjs
================================================
// Clean up the whitespace mess left behind by other plugins
module.exports = () => ({
  postcssPlugin: 'postcss-whitespace',
  Comment(comment) {
    // Remove all comments
    comment.remove();
  },
  Declaration(decl) {
    if (decl.value.includes('\n')) {
      // Remove line breaks and consequent spaces
      decl.value = decl.value.replace(/\s+/g, ' ');
      // Collapse whitespace around round brackets
      decl.value = decl.value.replace(/\(\s/g, '(');
      decl.value = decl.value.replace(/\s\)/g, ')');
    }
  },
  AtRule(rule) {
    // Remove line breaks before and after the rule
    delete rule.raws.before;
    delete rule.raws.after;
  },
  Rule(rule) {
    rule.cleanRaws();
  },
});

module.exports.postcss = true;


================================================
File: packages/radix-ui-themes/postcss.config.cjs
================================================
const path = require('path');

module.exports = {
  plugins: [
    require('postcss-import')({
      path: [path.relative(process.cwd(), '../')],
    }),
    require('postcss-nesting'),
    require('./postcss-breakpoints.cjs'),
    require('postcss-custom-media'),
    require('postcss-combine-duplicated-selectors'),
    require('postcss-discard-empty'),
    require('./postcss-whitespace.cjs'),
    require('autoprefixer'),
  ],
};


================================================
File: packages/radix-ui-themes/tsconfig.json
================================================
{
  "compilerOptions": {
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "lib": ["DOM", "ESNext", "DOM.Iterable"],
    "jsx": "react",
    "declaration": true,
    "declarationMap": true,
    "emitDeclarationOnly": true,
    "outDir": "dist",
    "strict": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "verbatimModuleSyntax": true
  }
}


================================================
File: packages/radix-ui-themes/.browserslistrc
================================================
last 2 years


================================================
File: packages/radix-ui-themes/.stylelintrc.cjs
================================================
module.exports = {
  rules: {
    // Disallow element type selector.
    'selector-max-type': 0,
    // Allow 0,1,1 specificity for pseudo elements and effectively cap at 0,1,0 in all other cases.
    // This is so that Tailwind classes work as expected.
    'selector-max-specificity': ['0,1,1'],
    // Enforce prefixes on classnames and keyframes
    'selector-class-pattern': /^((xs|sm|md|lg|xl):)?-?rt-|^radix-themes$|^(light|dark)(-theme)?$/,
    'keyframes-name-pattern': /^rt-([a-z]|-)+$/,
  },
};


================================================
File: packages/radix-ui-themes/scripts/esbuild-cjs.js
================================================
import esbuild from 'esbuild';

const dir = 'dist/cjs';

/** @type {import('esbuild').BuildOptions} */
const options = {
  entryPoints: ['src/**/*.ts*'],
  outdir: dir,
  format: 'cjs',
  target: 'es2020',
  sourcemap: true,
  minify: true,
};

// Check if "watch=true" flag is passed
if (process.argv[2]) {
  const [key, value] = process.argv[2].split('=');
  if (key === 'watch' && value === 'true') {
    const ctx = await esbuild.context(options);
    await ctx.watch();
  }
}

esbuild.build(options).catch(() => process.exit(1));


================================================
File: packages/radix-ui-themes/scripts/esbuild-esm.js
================================================
import esbuild from 'esbuild';
import fs from 'fs';
import path from 'path';
import pkg from '../package.json' with { type: 'json' };

const dir = 'dist/esm';

/** @type {import('esbuild').BuildOptions} */
const options = {
  entryPoints: ['src/**/*.ts*'],
  outdir: dir,
  format: 'esm',
  target: 'es2020',
  sourcemap: true,
  minify: true,
};

// Check if "watch=true" flag is passed
if (process.argv[2]) {
  const [key, value] = process.argv[2].split('=');
  if (key === 'watch' && value === 'true') {
    const ctx = await esbuild.context(options);
    await ctx.watch();
  }
}

esbuild.build(options).catch(() => process.exit(1));

// Create a package.json file in the dist/esm directory with "type": "module" field
if (!fs.existsSync(dir)) {
  fs.mkdirSync(dir, { recursive: true });
}
fs.writeFileSync(
  path.join(dir, 'package.json'),
  JSON.stringify({ type: 'module', sideEffects: pkg.sideEffects }, null, 2) + '\n',
  'utf-8',
);


================================================
File: packages/radix-ui-themes/scripts/package.json
================================================
{
  "type": "module"
}


================================================
File: packages/radix-ui-themes/src/index.ts
================================================
export * from './components/index.js';


================================================
File: packages/radix-ui-themes/src/components/accessible-icon.tsx
================================================
import { AccessibleIcon as AccessibleIconPrimitive } from 'radix-ui';
export const AccessibleIcon = AccessibleIconPrimitive.Root;
export type AccessibleIconProps = AccessibleIconPrimitive.AccessibleIconProps;


================================================
File: packages/radix-ui-themes/src/components/alert-dialog.css
================================================
@import './_internal/base-dialog.css';


================================================
File: packages/radix-ui-themes/src/components/alert-dialog.props.tsx
================================================
export { dialogContentPropDefs as alertDialogContentPropDefs } from './dialog.props.js';
export type { DialogContentOwnProps as AlertDialogContentOwnProps } from './dialog.props.js';


================================================
File: packages/radix-ui-themes/src/components/alert-dialog.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { AlertDialog as AlertDialogPrimitive } from 'radix-ui';

import { alertDialogContentPropDefs } from './alert-dialog.props.js';
import { Heading } from './heading.js';
import { Text } from './text.js';
import { Theme } from './theme.js';
import { extractProps } from '../helpers/extract-props.js';
import { requireReactElement } from '../helpers/require-react-element.js';

import type { AlertDialogContentOwnProps } from './alert-dialog.props.js';
import type {
  ComponentPropsWithout,
  RemovedProps,
  ComponentPropsAs,
} from '../helpers/component-props.js';

interface AlertDialogRootProps
  extends React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Root> {}
const AlertDialogRoot: React.FC<AlertDialogRootProps> = (props) => (
  <AlertDialogPrimitive.Root {...props} />
);
AlertDialogRoot.displayName = 'AlertDialog.Root';

type AlertDialogTriggerElement = React.ElementRef<typeof AlertDialogPrimitive.Trigger>;
interface AlertDialogTriggerProps
  extends ComponentPropsWithout<typeof AlertDialogPrimitive.Trigger, RemovedProps> {}
const AlertDialogTrigger = React.forwardRef<AlertDialogTriggerElement, AlertDialogTriggerProps>(
  ({ children, ...props }, forwardedRef) => (
    <AlertDialogPrimitive.Trigger {...props} ref={forwardedRef} asChild>
      {requireReactElement(children)}
    </AlertDialogPrimitive.Trigger>
  )
);
AlertDialogTrigger.displayName = 'AlertDialog.Trigger';

type AlertDialogContentElement = React.ElementRef<typeof AlertDialogPrimitive.Content>;
interface AlertDialogContentProps
  extends ComponentPropsWithout<typeof AlertDialogPrimitive.Content, RemovedProps>,
    AlertDialogContentOwnProps {
  container?: React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Portal>['container'];
}
const AlertDialogContent = React.forwardRef<AlertDialogContentElement, AlertDialogContentProps>(
  ({ align, ...props }, forwardedRef) => {
    const { align: alignPropDef, ...propDefs } = alertDialogContentPropDefs;
    const { className: alignClassName } = extractProps({ align }, { align: alignPropDef });
    const { className, forceMount, container, ...contentProps } = extractProps(props, propDefs);
    return (
      <AlertDialogPrimitive.Portal container={container} forceMount={forceMount}>
        <Theme asChild>
          <AlertDialogPrimitive.Overlay className="rt-BaseDialogOverlay rt-AlertDialogOverlay">
            <div className="rt-BaseDialogScroll rt-AlertDialogScroll">
              <div
                className={`rt-BaseDialogScrollPadding rt-AlertDialogScrollPadding ${alignClassName}`}
              >
                <AlertDialogPrimitive.Content
                  {...contentProps}
                  ref={forwardedRef}
                  className={classNames('rt-BaseDialogContent', 'rt-AlertDialogContent', className)}
                />
              </div>
            </div>
          </AlertDialogPrimitive.Overlay>
        </Theme>
      </AlertDialogPrimitive.Portal>
    );
  }
);
AlertDialogContent.displayName = 'AlertDialog.Content';

type AlertDialogTitleElement = React.ElementRef<typeof Heading>;
type AlertDialogTitleProps = ComponentPropsWithout<typeof Heading, 'asChild'>;
const AlertDialogTitle = React.forwardRef<AlertDialogTitleElement, AlertDialogTitleProps>(
  (props, forwardedRef) => (
    <AlertDialogPrimitive.Title asChild>
      <Heading size="5" mb="3" trim="start" {...props} asChild={false} ref={forwardedRef} />
    </AlertDialogPrimitive.Title>
  )
);
AlertDialogTitle.displayName = 'AlertDialog.Title';

type AlertDialogDescriptionElement = HTMLParagraphElement;
type AlertDialogDescriptionProps = ComponentPropsAs<typeof Text, 'p'>;
const AlertDialogDescription = React.forwardRef<
  AlertDialogDescriptionElement,
  AlertDialogDescriptionProps
>((props, forwardedRef) => (
  <AlertDialogPrimitive.Description asChild>
    <Text as="p" size="3" {...props} asChild={false} ref={forwardedRef} />
  </AlertDialogPrimitive.Description>
));
AlertDialogDescription.displayName = 'AlertDialog.Description';

type AlertDialogActionElement = React.ElementRef<typeof AlertDialogPrimitive.Action>;
interface AlertDialogActionProps
  extends ComponentPropsWithout<typeof AlertDialogPrimitive.Action, RemovedProps> {}
const AlertDialogAction = React.forwardRef<AlertDialogActionElement, AlertDialogActionProps>(
  ({ children, ...props }, forwardedRef) => (
    <AlertDialogPrimitive.Action {...props} ref={forwardedRef} asChild>
      {requireReactElement(children)}
    </AlertDialogPrimitive.Action>
  )
);
AlertDialogAction.displayName = 'AlertDialog.Action';

type AlertDialogCancelElement = React.ElementRef<typeof AlertDialogPrimitive.Cancel>;
interface AlertDialogCancelProps
  extends ComponentPropsWithout<typeof AlertDialogPrimitive.Cancel, RemovedProps> {}
const AlertDialogCancel = React.forwardRef<AlertDialogCancelElement, AlertDialogCancelProps>(
  ({ children, ...props }, forwardedRef) => (
    <AlertDialogPrimitive.Cancel {...props} ref={forwardedRef} asChild>
      {requireReactElement(children)}
    </AlertDialogPrimitive.Cancel>
  )
);
AlertDialogCancel.displayName = 'AlertDialog.Cancel';

export {
  AlertDialogRoot as Root,
  AlertDialogTrigger as Trigger,
  AlertDialogContent as Content,
  AlertDialogTitle as Title,
  AlertDialogDescription as Description,
  AlertDialogAction as Action,
  AlertDialogCancel as Cancel,
};

export type {
  AlertDialogRootProps as RootProps,
  AlertDialogTriggerProps as TriggerProps,
  AlertDialogContentProps as ContentProps,
  AlertDialogTitleProps as TitleProps,
  AlertDialogDescriptionProps as DescriptionProps,
  AlertDialogActionProps as ActionProps,
  AlertDialogCancelProps as CancelProps,
};


================================================
File: packages/radix-ui-themes/src/components/animations.css
================================================
@keyframes rt-fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes rt-fade-out {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

@keyframes rt-slide-from-top {
  from {
    transform: translateY(4px) scale(0.97);
  }
  to {
    transform: translateY(0) scale(1);
  }
}

@keyframes rt-slide-to-top {
  from {
    transform: translateY(0) scale(1);
  }
  to {
    transform: translateY(4px) scale(0.97);
  }
}

@keyframes rt-slide-from-bottom {
  from {
    transform: translateY(-4px) scale(0.97);
  }
  to {
    transform: translateY(0) scale(1);
  }
}

@keyframes rt-slide-to-bottom {
  from {
    transform: translateY(0) scale(1);
  }
  to {
    transform: translateY(-4px) scale(0.97);
  }
}

@keyframes rt-slide-from-left {
  from {
    transform: translateX(4px) scale(0.97);
  }
  to {
    transform: translateX(0) scale(1);
  }
}

@keyframes rt-slide-to-left {
  from {
    transform: translateX(0) scale(1);
  }
  to {
    transform: translateX(4px) scale(0.97);
  }
}

@keyframes rt-slide-from-right {
  from {
    transform: translateX(-4px) scale(0.97);
  }
  to {
    transform: translateX(0) scale(1);
  }
}

@keyframes rt-slide-to-right {
  from {
    transform: translateX(0) scale(1);
  }
  to {
    transform: translateX(-4px) scale(0.97);
  }
}

@media (prefers-reduced-motion: no-preference) {
  .rt-PopperContent {
    animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);

    &:where([data-state='open']) {
      animation-duration: 160ms;

      &:where([data-side='top']) {
        animation-name: rt-slide-from-top, rt-fade-in;
      }
      &:where([data-side='bottom']) {
        animation-name: rt-slide-from-bottom, rt-fade-in;
      }
      &:where([data-side='left']) {
        animation-name: rt-slide-from-left, rt-fade-in;
      }
      &:where([data-side='right']) {
        animation-name: rt-slide-from-right, rt-fade-in;
      }
    }

    &:where([data-state='closed']) {
      animation-duration: 100ms;

      &:where([data-side='top']) {
        animation-name: rt-slide-to-top, rt-fade-out;
      }
      &:where([data-side='bottom']) {
        animation-name: rt-slide-to-bottom, rt-fade-out;
      }
      &:where([data-side='left']) {
        animation-name: rt-slide-to-left, rt-fade-out;
      }
      &:where([data-side='right']) {
        animation-name: rt-slide-to-right, rt-fade-out;
      }
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/aspect-ratio.tsx
================================================
import { AspectRatio as AspectRatioPrimitive } from 'radix-ui';
export const AspectRatio = AspectRatioPrimitive.Root;
export type AspectRatioProps = AspectRatioPrimitive.AspectRatioProps;


================================================
File: packages/radix-ui-themes/src/components/avatar.css
================================================
.rt-AvatarRoot {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  vertical-align: middle;
  user-select: none;
  width: var(--avatar-size);
  height: var(--avatar-size);
  flex-shrink: 0;
}

.rt-AvatarImage {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: inherit;
}

.rt-AvatarFallback {
  font-family: var(--default-font-family);
  font-weight: var(--font-weight-medium);
  font-style: normal;
  z-index: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  line-height: 1;
  border-radius: inherit;
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

.rt-AvatarFallback {
  text-transform: uppercase;

  &:where(.rt-one-letter) {
    font-size: var(--avatar-fallback-one-letter-font-size);
  }
  &:where(.rt-two-letters) {
    /* prettier-ignore */
    font-size: var(--avatar-fallback-two-letters-font-size, var(--avatar-fallback-one-letter-font-size));
  }
}

@breakpoints {
  .rt-AvatarRoot {
    &:where(.rt-r-size-1) {
      --avatar-size: var(--space-5);
      --avatar-fallback-one-letter-font-size: var(--font-size-2);
      --avatar-fallback-two-letters-font-size: var(--font-size-1);
      border-radius: max(var(--radius-2), var(--radius-full));
      letter-spacing: var(--letter-spacing-1);
    }
    &:where(.rt-r-size-2) {
      --avatar-size: var(--space-6);
      --avatar-fallback-one-letter-font-size: var(--font-size-3);
      --avatar-fallback-two-letters-font-size: var(--font-size-2);
      border-radius: max(var(--radius-2), var(--radius-full));
      letter-spacing: var(--letter-spacing-2);
    }
    &:where(.rt-r-size-3) {
      --avatar-size: var(--space-7);
      --avatar-fallback-one-letter-font-size: var(--font-size-4);
      --avatar-fallback-two-letters-font-size: var(--font-size-3);
      border-radius: max(var(--radius-3), var(--radius-full));
      letter-spacing: var(--letter-spacing-3);
    }
    &:where(.rt-r-size-4) {
      --avatar-size: var(--space-8);
      --avatar-fallback-one-letter-font-size: var(--font-size-5);
      --avatar-fallback-two-letters-font-size: var(--font-size-4);
      border-radius: max(var(--radius-3), var(--radius-full));
      letter-spacing: var(--letter-spacing-4);
    }
    &:where(.rt-r-size-5) {
      --avatar-size: var(--space-9);
      --avatar-fallback-one-letter-font-size: var(--font-size-6);
      border-radius: max(var(--radius-4), var(--radius-full));
      letter-spacing: var(--letter-spacing-6);
    }
    &:where(.rt-r-size-6) {
      --avatar-size: 80px;
      --avatar-fallback-one-letter-font-size: var(--font-size-7);
      border-radius: max(var(--radius-5), var(--radius-full));
      letter-spacing: var(--letter-spacing-7);
    }
    &:where(.rt-r-size-7) {
      --avatar-size: 96px;
      --avatar-fallback-one-letter-font-size: var(--font-size-7);
      border-radius: max(var(--radius-5), var(--radius-full));
      letter-spacing: var(--letter-spacing-7);
    }
    &:where(.rt-r-size-8) {
      --avatar-size: 128px;
      --avatar-fallback-one-letter-font-size: var(--font-size-8);
      border-radius: max(var(--radius-6), var(--radius-full));
      letter-spacing: var(--letter-spacing-8);
    }
    &:where(.rt-r-size-9) {
      --avatar-size: 160px;
      --avatar-fallback-one-letter-font-size: var(--font-size-9);
      border-radius: max(var(--radius-6), var(--radius-full));
      letter-spacing: var(--letter-spacing-9);
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

/* solid */

.rt-AvatarRoot:where(.rt-variant-solid) {
  & :where(.rt-AvatarFallback) {
    background-color: var(--accent-9);
    color: var(--accent-contrast);
  }
  &:where(.rt-high-contrast) :where(.rt-AvatarFallback) {
    background-color: var(--accent-12);
    color: var(--accent-1);
  }
}

/* soft */

.rt-AvatarRoot:where(.rt-variant-soft) {
  & :where(.rt-AvatarFallback) {
    background-color: var(--accent-a3);
    color: var(--accent-a11);
  }
  &:where(.rt-high-contrast) :where(.rt-AvatarFallback) {
    color: var(--accent-12);
  }
}


================================================
File: packages/radix-ui-themes/src/components/avatar.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { accentColorPropDef } from '../props/color.prop.js';
import { highContrastPropDef } from '../props/high-contrast.prop.js';
import { radiusPropDef } from '../props/radius.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3', '4', '5', '6', '7', '8', '9'] as const;
const variants = ['solid', 'soft'] as const;

const avatarPropDefs = {
  ...asChildPropDef,
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '3', responsive: true },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'soft' },
  ...accentColorPropDef,
  ...highContrastPropDef,
  ...radiusPropDef,
  fallback: { type: 'ReactNode', required: true },
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
  fallback: PropDef<React.ReactNode>;
};

export { avatarPropDefs };


================================================
File: packages/radix-ui-themes/src/components/avatar.tsx
================================================
'use client';

import * as React from 'react';
import classNames from 'classnames';
import { Avatar as AvatarPrimitive } from 'radix-ui';

import { avatarPropDefs } from './avatar.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { getSubtree } from '../helpers/get-subtree.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

interface AvatarProps extends MarginProps, AvatarImplProps {}
const Avatar = React.forwardRef<AvatarImplElement, AvatarProps>((props, forwardedRef) => {
  const { asChild, children, className, style, color, radius, ...imageProps } = extractProps(
    props,
    avatarPropDefs,
    marginPropDefs
  );

  return (
    // TODO as a rule, should we rather spread the props on root?
    <AvatarPrimitive.Root
      data-accent-color={color}
      data-radius={radius}
      className={classNames('rt-reset', 'rt-AvatarRoot', className)}
      style={style}
      asChild={asChild}
    >
      {getSubtree({ asChild, children }, <AvatarImpl ref={forwardedRef} {...imageProps} />)}
    </AvatarPrimitive.Root>
  );
});
Avatar.displayName = 'Avatar';

type AvatarImplElement = React.ElementRef<typeof AvatarPrimitive.Image>;
type AvatarOwnProps = GetPropDefTypes<typeof avatarPropDefs>;

interface AvatarImplProps
  extends ComponentPropsWithout<typeof AvatarPrimitive.Image, RemovedProps>,
    AvatarOwnProps {
  // TODO: See if we can automate making prop defs with `required: true` non nullable
  fallback: NonNullable<AvatarOwnProps['fallback']>;
}

const AvatarImpl = React.forwardRef<AvatarImplElement, AvatarImplProps>(
  ({ fallback, ...imageProps }, forwardedRef) => {
    const [status, setStatus] = React.useState<'idle' | 'loading' | 'loaded' | 'error'>('idle');
    return (
      <>
        {status === 'idle' || status === 'loading' ? <span className="rt-AvatarFallback" /> : null}

        {status === 'error' ? (
          <AvatarPrimitive.Fallback
            className={classNames('rt-AvatarFallback', {
              'rt-one-letter': typeof fallback === 'string' && fallback.length === 1,
              'rt-two-letters': typeof fallback === 'string' && fallback.length === 2,
            })}
            delayMs={0}
          >
            {fallback}
          </AvatarPrimitive.Fallback>
        ) : null}

        <AvatarPrimitive.Image
          ref={forwardedRef}
          className="rt-AvatarImage"
          {...imageProps}
          onLoadingStatusChange={(status) => {
            imageProps.onLoadingStatusChange?.(status);
            setStatus(status);
          }}
        />
      </>
    );
  }
);

AvatarImpl.displayName = 'AvatarImpl';

export { Avatar };
export type { AvatarProps };


================================================
File: packages/radix-ui-themes/src/components/badge.css
================================================
.rt-Badge {
  display: inline-flex;
  align-items: center;
  white-space: nowrap;
  font-family: var(--default-font-family);
  font-weight: var(--font-weight-medium);
  font-style: normal;
  flex-shrink: 0;
  line-height: 1;

  /* Make sure that the height is not stretched in a Flex/Grid layout */
  height: fit-content;
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-Badge {
    &:where(.rt-r-size-1) {
      font-size: var(--font-size-1);
      line-height: var(--line-height-1);
      letter-spacing: var(--letter-spacing-1);
      padding: calc(var(--space-1) * 0.5) calc(var(--space-1) * 1.5);
      gap: calc(var(--space-1) * 1.5);
      border-radius: max(var(--radius-1), var(--radius-full));
    }
    &:where(.rt-r-size-2) {
      font-size: var(--font-size-1);
      line-height: var(--line-height-1);
      letter-spacing: var(--letter-spacing-1);
      padding: var(--space-1) var(--space-2);
      gap: calc(var(--space-1) * 1.5);
      border-radius: max(var(--radius-2), var(--radius-full));
    }
    &:where(.rt-r-size-3) {
      font-size: var(--font-size-2);
      line-height: var(--line-height-2);
      letter-spacing: var(--letter-spacing-2);
      padding: var(--space-1) calc(var(--space-2) * 1.25);
      gap: var(--space-2);
      border-radius: max(var(--radius-2), var(--radius-full));
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

/* solid */

.rt-Badge:where(.rt-variant-solid) {
  background-color: var(--accent-9);
  color: var(--accent-contrast);

  &::selection {
    background-color: var(--accent-7);
    color: var(--accent-12);
  }

  &:where(.rt-high-contrast) {
    background-color: var(--accent-12);
    color: var(--accent-1);

    &::selection {
      background-color: var(--accent-a11);
      color: var(--accent-1);
    }
  }
}

/* surface */

.rt-Badge:where(.rt-variant-surface) {
  background-color: var(--accent-surface);
  box-shadow: inset 0 0 0 1px var(--accent-a6);
  color: var(--accent-a11);

  &:where(.rt-high-contrast) {
    color: var(--accent-12);
  }
}

/* soft */

.rt-Badge:where(.rt-variant-soft) {
  background-color: var(--accent-a3);
  color: var(--accent-a11);
  &:where(.rt-high-contrast) {
    color: var(--accent-12);
  }
}

/* outline */

.rt-Badge:where(.rt-variant-outline) {
  box-shadow: inset 0 0 0 1px var(--accent-a8);
  color: var(--accent-a11);
  &:where(.rt-high-contrast) {
    box-shadow: inset 0 0 0 1px var(--accent-a7), inset 0 0 0 1px var(--gray-a11);
    color: var(--accent-12);
  }
}


================================================
File: packages/radix-ui-themes/src/components/badge.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { accentColorPropDef } from '../props/color.prop.js';
import { highContrastPropDef } from '../props/high-contrast.prop.js';
import { radiusPropDef } from '../props/radius.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;
const variants = ['solid', 'soft', 'surface', 'outline'] as const;

const badgePropDefs = {
  ...asChildPropDef,
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '1', responsive: true },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'soft' },
  ...accentColorPropDef,
  ...highContrastPropDef,
  ...radiusPropDef,
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
};

export { badgePropDefs };


================================================
File: packages/radix-ui-themes/src/components/badge.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { badgePropDefs } from './badge.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type BadgeElement = React.ElementRef<'span'>;
type BadgeOwnProps = GetPropDefTypes<typeof badgePropDefs>;
interface BadgeProps
  extends ComponentPropsWithout<'span', RemovedProps>,
    MarginProps,
    BadgeOwnProps {}
const Badge = React.forwardRef<BadgeElement, BadgeProps>((props, forwardedRef) => {
  const { asChild, className, color, radius, ...badgeProps } = extractProps(
    props,
    badgePropDefs,
    marginPropDefs
  );
  const Comp = asChild ? Slot.Root : 'span';
  return (
    <Comp
      data-accent-color={color}
      data-radius={radius}
      {...badgeProps}
      ref={forwardedRef}
      className={classNames('rt-reset', 'rt-Badge', className)}
    />
  );
});
Badge.displayName = 'Badge';

export { Badge };
export type { BadgeProps };


================================================
File: packages/radix-ui-themes/src/components/blockquote.css
================================================
.rt-Blockquote {
  box-sizing: border-box;
  border-left: max(var(--space-1), 0.25em) solid var(--accent-a6);
  padding-left: min(var(--space-5), max(var(--space-3), 0.5em));
}


================================================
File: packages/radix-ui-themes/src/components/blockquote.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { colorPropDef } from '../props/color.prop.js';
import { highContrastPropDef } from '../props/high-contrast.prop.js';
import { textWrapPropDef } from '../props/text-wrap.prop.js';
import { truncatePropDef } from '../props/truncate.prop.js';
import { weightPropDef } from '../props/weight.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3', '4', '5', '6', '7', '8', '9'] as const;

const blockquotePropDefs = {
  ...asChildPropDef,
  size: {
    type: 'enum',
    className: 'rt-r-size',
    values: sizes,
    responsive: true,
  },
  ...weightPropDef,
  ...colorPropDef,
  ...highContrastPropDef,
  ...truncatePropDef,
  ...textWrapPropDef,
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
};

export { blockquotePropDefs };


================================================
File: packages/radix-ui-themes/src/components/blockquote.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { Text } from './text.js';

import type { blockquotePropDefs } from './blockquote.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { MarginProps } from '../props/margin.props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type BlockquoteElement = React.ElementRef<'blockquote'>;
type BlockQuoteOwnProps = GetPropDefTypes<typeof blockquotePropDefs>;
interface BlockquoteProps
  extends ComponentPropsWithout<'blockquote', RemovedProps>,
    MarginProps,
    BlockQuoteOwnProps {}
const Blockquote = React.forwardRef<BlockquoteElement, BlockquoteProps>((props, forwardedRef) => {
  const { asChild, children, className, ...blockquoteProps } = props;
  const Comp = asChild ? Slot.Root : 'blockquote';
  return (
    <Text
      asChild
      {...blockquoteProps}
      ref={forwardedRef}
      className={classNames('rt-Blockquote', className)}
    >
      <Comp>{children}</Comp>
    </Text>
  );
});
Blockquote.displayName = 'Blockquote';

export { Blockquote };
export type { BlockquoteProps };


================================================
File: packages/radix-ui-themes/src/components/box.css
================================================
.rt-Box {
  box-sizing: border-box;
  display: block;
}


================================================
File: packages/radix-ui-themes/src/components/box.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';

import type { PropDef, GetPropDefTypes } from '../props/prop-def.js';

const as = ['div', 'span'] as const;
const displayValues = ['none', 'inline', 'inline-block', 'block'] as const;

const boxPropDefs = {
  /**
   * Controls whether to render **div** or **span**
   *
   * @example
   * as="div"
   * as="span"
   */
  as: { type: 'enum', values: as, default: 'div' },
  ...asChildPropDef,
  /**
   * Sets the CSS **display** property.
   * Supports a subset of the corresponding CSS values and responsive objects.
   *
   * @example
   * display="inline-block"
   * display={{ sm: 'none', lg: 'block' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/display
   */
  display: {
    type: 'enum',
    className: 'rt-r-display',
    values: displayValues,
    responsive: true,
  },
} satisfies {
  as: PropDef<(typeof as)[number]>;
  display: PropDef<(typeof displayValues)[number]>;
};

// Use all of the imported prop defs to ensure that JSDoc works
type BoxOwnProps = GetPropDefTypes<typeof boxPropDefs & typeof asChildPropDef>;

export { boxPropDefs };
export type { BoxOwnProps };


================================================
File: packages/radix-ui-themes/src/components/box.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';

import { Slot } from './slot.js';
import { boxPropDefs } from './box.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { layoutPropDefs } from '../props/layout.props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { LayoutProps } from '../props/layout.props.js';
import type { MarginProps } from '../props/margin.props.js';
import type { BoxOwnProps } from './box.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';

type BoxElement = React.ElementRef<'div'>;
interface CommonBoxProps extends MarginProps, LayoutProps, BoxOwnProps {}
type BoxDivProps = { as?: 'div' } & ComponentPropsWithout<'div', RemovedProps>;
type BoxSpanProps = { as: 'span' } & ComponentPropsWithout<'span', RemovedProps>;
type BoxProps = CommonBoxProps & (BoxSpanProps | BoxDivProps);

const Box = React.forwardRef<BoxElement, BoxProps>((props, forwardedRef) => {
  const {
    className,
    asChild,
    as: Tag = 'div',
    ...boxProps
  } = extractProps(props, boxPropDefs, layoutPropDefs, marginPropDefs);
  const Comp = asChild ? Slot : Tag;
  return <Comp {...boxProps} ref={forwardedRef} className={classNames('rt-Box', className)} />;
});
Box.displayName = 'Box';

export { Box };
export type { BoxProps };


================================================
File: packages/radix-ui-themes/src/components/button.css
================================================
@import './_internal/base-button.css';

.rt-Button {
  &:where(:not(.rt-variant-ghost)) {
    /* stylelint-disable-next-line selector-max-type */
    & :where(svg) {
      opacity: 0.9;
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

.rt-Button {
  &:where(.rt-variant-ghost) {
    padding: var(--button-ghost-padding-y) var(--button-ghost-padding-x);

    /* We reset the defined margin variables to avoid inheriting them from a higher component */
    /* If a margin IS defined on the component itself, the utility class will win and reset it */
    --margin-top: 0px;
    --margin-right: 0px;
    --margin-bottom: 0px;
    --margin-left: 0px;

    /* Define the overrides to incorporate the negative margins */
    --margin-top-override: calc(var(--margin-top) - var(--button-ghost-padding-y));
    --margin-right-override: calc(var(--margin-right) - var(--button-ghost-padding-x));
    --margin-bottom-override: calc(var(--margin-bottom) - var(--button-ghost-padding-y));
    --margin-left-override: calc(var(--margin-left) - var(--button-ghost-padding-x));

    /* Reset the overrides on direct children */
    :where(&) > * {
      --margin-top-override: initial;
      --margin-right-override: initial;
      --margin-bottom-override: initial;
      --margin-left-override: initial;
    }

    margin: var(--margin-top-override) var(--margin-right-override) var(--margin-bottom-override)
      var(--margin-left-override);
  }
}

@breakpoints {
  .rt-Button {
    &:where(.rt-r-size-1) {
      gap: var(--space-1);
      font-size: var(--font-size-1);
      line-height: var(--line-height-1);
      letter-spacing: var(--letter-spacing-1);

      &:where(:not(.rt-variant-ghost)) {
        padding-left: var(--space-2);
        padding-right: var(--space-2);
      }
      &:where(.rt-variant-ghost) {
        gap: var(--space-1);
        --button-ghost-padding-x: var(--space-2);
        --button-ghost-padding-y: var(--space-1);
      }
    }
    &:where(.rt-r-size-2) {
      gap: var(--space-2);
      font-size: var(--font-size-2);
      line-height: var(--line-height-2);
      letter-spacing: var(--letter-spacing-2);

      &:where(:not(.rt-variant-ghost)) {
        padding-left: var(--space-3);
        padding-right: var(--space-3);
      }
      &:where(.rt-variant-ghost) {
        gap: var(--space-1);
        --button-ghost-padding-x: var(--space-2);
        --button-ghost-padding-y: var(--space-1);
      }
    }
    &:where(.rt-r-size-3) {
      gap: var(--space-3);
      font-size: var(--font-size-3);
      line-height: var(--line-height-3);
      letter-spacing: var(--letter-spacing-3);

      &:where(:not(.rt-variant-ghost)) {
        padding-left: var(--space-4);
        padding-right: var(--space-4);
      }
      &:where(.rt-variant-ghost) {
        gap: var(--space-2);
        --button-ghost-padding-x: var(--space-3);
        --button-ghost-padding-y: calc(var(--space-1) * 1.5);
      }
    }
    &:where(.rt-r-size-4) {
      gap: var(--space-3);
      font-size: var(--font-size-4);
      line-height: var(--line-height-4);
      letter-spacing: var(--letter-spacing-4);

      &:where(:not(.rt-variant-ghost)) {
        padding-left: var(--space-5);
        padding-right: var(--space-5);
      }
      &:where(.rt-variant-ghost) {
        gap: var(--space-2);
        --button-ghost-padding-x: var(--space-4);
        --button-ghost-padding-y: var(--space-2);
      }
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

.rt-Button:where(:not(.rt-variant-ghost)) {
  font-weight: var(--font-weight-medium);
}


================================================
File: packages/radix-ui-themes/src/components/button.props.tsx
================================================
export { baseButtonPropDefs as buttonPropDefs } from './_internal/base-button.props.js';


================================================
File: packages/radix-ui-themes/src/components/button.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';

import { BaseButton } from './_internal/base-button.js';

type ButtonElement = React.ElementRef<typeof BaseButton>;
interface ButtonProps extends React.ComponentPropsWithoutRef<typeof BaseButton> {}
const Button = React.forwardRef<ButtonElement, ButtonProps>(
  ({ className, ...props }, forwardedRef) => (
    <BaseButton {...props} ref={forwardedRef} className={classNames('rt-Button', className)} />
  )
);
Button.displayName = 'Button';

export { Button };
export type { ButtonProps };


================================================
File: packages/radix-ui-themes/src/components/callout.css
================================================
.rt-CalloutRoot {
  box-sizing: border-box;
  display: grid;
  align-items: flex-start;
  justify-content: flex-start;
  text-align: left;
  color: var(--accent-a11);

  &:where(.rt-high-contrast) {
    color: var(--accent-12);
  }
}

.rt-CalloutIcon {
  display: flex;
  align-items: center;
  grid-column-start: -2;
  height: var(--callout-icon-height);
}

/* Anything that’s not an icon goes to the right of the icon */
.rt-CalloutRoot > :where(:not(.rt-CalloutIcon)) {
  grid-column-start: -1;
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-CalloutRoot {
    &:where(.rt-r-size-1) {
      row-gap: var(--space-2);
      column-gap: var(--space-2);
      padding: var(--space-3);
      border-radius: var(--radius-3);
      --callout-icon-height: var(--line-height-2);
    }
    &:where(.rt-r-size-2) {
      row-gap: var(--space-2);
      column-gap: var(--space-3);
      padding: var(--space-4);
      border-radius: var(--radius-4);
      --callout-icon-height: var(--line-height-2);
    }
    &:where(.rt-r-size-3) {
      row-gap: var(--space-3);
      column-gap: var(--space-4);
      padding: var(--space-5);
      border-radius: var(--radius-5);
      --callout-icon-height: var(--line-height-3);
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

/* soft */

.rt-CalloutRoot:where(.rt-variant-soft) {
  background-color: var(--accent-a3);
}

/* surface */

.rt-CalloutRoot:where(.rt-variant-surface) {
  box-shadow: inset 0 0 0 1px var(--accent-a6);
  background-color: var(--accent-a2);
}

/* outline */

.rt-CalloutRoot:where(.rt-variant-outline) {
  box-shadow: inset 0 0 0 1px var(--accent-a7);
}


================================================
File: packages/radix-ui-themes/src/components/callout.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { accentColorPropDef } from '../props/color.prop.js';
import { highContrastPropDef } from '../props/high-contrast.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;
const variants = ['soft', 'surface', 'outline'] as const;

const calloutRootPropDefs = {
  ...asChildPropDef,
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '2', responsive: true },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'soft' },
  ...accentColorPropDef,
  ...highContrastPropDef,
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
};

export { calloutRootPropDefs };


================================================
File: packages/radix-ui-themes/src/components/callout.tsx
================================================
'use client';

import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { Text } from './text.js';
import { calloutRootPropDefs } from './callout.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { mapResponsiveProp, mapCalloutSizeToTextSize } from '../helpers/map-prop-values.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type {
  ComponentPropsWithout,
  RemovedProps,
  ComponentPropsAs,
} from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type CalloutRootOwnProps = GetPropDefTypes<typeof calloutRootPropDefs>;

type CalloutContextValue = { size?: CalloutRootOwnProps['size'] };
const CalloutContext = React.createContext<CalloutContextValue>({});

type CalloutRootElement = React.ElementRef<'div'>;
interface CalloutRootProps
  extends ComponentPropsWithout<'div', RemovedProps>,
    MarginProps,
    CalloutRootOwnProps {}
const CalloutRoot = React.forwardRef<CalloutRootElement, CalloutRootProps>(
  (props, forwardedRef) => {
    const { size = calloutRootPropDefs.size.default } = props;
    const { asChild, children, className, color, ...rootProps } = extractProps(
      props,
      calloutRootPropDefs,
      marginPropDefs
    );
    const Comp = asChild ? Slot.Root : 'div';
    return (
      <Comp
        data-accent-color={color}
        {...rootProps}
        className={classNames('rt-CalloutRoot', className)}
        ref={forwardedRef}
      >
        <CalloutContext.Provider value={React.useMemo(() => ({ size }), [size])}>
          {children}
        </CalloutContext.Provider>
      </Comp>
    );
  }
);
CalloutRoot.displayName = 'Callout.Root';

type CalloutIconElement = React.ElementRef<'div'>;
interface CalloutIconProps extends ComponentPropsWithout<'div', RemovedProps> {}
const CalloutIcon = React.forwardRef<CalloutIconElement, CalloutIconProps>(
  ({ className, ...props }, forwardedRef) => {
    return (
      <div {...props} className={classNames('rt-CalloutIcon', className)} ref={forwardedRef} />
    );
  }
);
CalloutIcon.displayName = 'Callout.Icon';

type CalloutTextElement = React.ElementRef<'p'>;
type CalloutTextProps = ComponentPropsAs<typeof Text, 'p'>;
const CalloutText = React.forwardRef<CalloutTextElement, CalloutTextProps>(
  ({ className, ...props }, forwardedRef) => {
    const { size } = React.useContext(CalloutContext);
    return (
      <Text
        as="p"
        size={mapResponsiveProp(size, mapCalloutSizeToTextSize)}
        {...props}
        asChild={false}
        ref={forwardedRef}
        className={classNames('rt-CalloutText', className)}
      />
    );
  }
);
CalloutText.displayName = 'Callout.Text';

export { CalloutRoot as Root, CalloutIcon as Icon, CalloutText as Text };
export type {
  CalloutRootProps as RootProps,
  CalloutIconProps as IconProps,
  CalloutTextProps as TextProps,
};


================================================
File: packages/radix-ui-themes/src/components/card.css
================================================
@import './_internal/base-card.css';

/* stylelint-disable selector-max-type */
/* Disable selector-max-type rule to target `button` and `a` tags. */
/* Make sure these tags are wrapped in `:where()` for 0 specificity. */

.rt-Card {
  --base-card-padding-top: var(--card-padding);
  --base-card-padding-right: var(--card-padding);
  --base-card-padding-bottom: var(--card-padding);
  --base-card-padding-left: var(--card-padding);
  --base-card-border-radius: var(--card-border-radius);
  --base-card-border-width: var(--card-border-width);

  &:where(:focus-visible) {
    outline: 2px solid var(--focus-8);
    outline-offset: -1px;

    &::after {
      outline: inherit;
    }
    &:where(:active:not([data-state='open'])) {
      &::before {
        background-image: linear-gradient(var(--focus-a2), var(--focus-a2));
      }
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*                Sizes                */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-Card {
    &:where(.rt-r-size-1) {
      --card-padding: var(--space-3);
      --card-border-radius: var(--radius-4);
    }
    &:where(.rt-r-size-2) {
      --card-padding: var(--space-4);
      --card-border-radius: var(--radius-4);
    }
    &:where(.rt-r-size-3) {
      --card-padding: var(--space-5);
      --card-border-radius: var(--radius-5);
    }
    &:where(.rt-r-size-4) {
      --card-padding: var(--space-6);
      --card-border-radius: var(--radius-5);
    }
    &:where(.rt-r-size-5) {
      --card-padding: var(--space-8);
      --card-border-radius: var(--radius-6);
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*         Variants / Surface          */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.rt-Card:where(.rt-variant-surface) {
  --card-border-width: 1px;
  --card-background-color: var(--color-panel);

  &::before {
    background-color: var(--card-background-color);
    backdrop-filter: var(--backdrop-filter-panel);
  }
  &::after {
    box-shadow: var(--base-card-surface-box-shadow);
  }
  &:where(:any-link, button, label) {
    @media (hover: hover) {
      &:where(:hover) {
        &::after {
          box-shadow: var(--base-card-surface-hover-box-shadow);
        }
      }
    }
    &:where([data-state='open']) {
      &::after {
        box-shadow: var(--base-card-surface-hover-box-shadow);
      }
    }
    &:where(:active:not([data-state='open'])) {
      &::after {
        box-shadow: var(--base-card-surface-active-box-shadow);
      }
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*         Variants / Classic          */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.rt-Card:where(.rt-variant-classic) {
  --card-border-width: 1px;
  --card-background-color: var(--color-panel);

  transition: box-shadow 120ms;
  box-shadow: var(--base-card-classic-box-shadow-outer);

  &::before {
    background-color: var(--card-background-color);
    backdrop-filter: var(--backdrop-filter-panel);
  }
  &::after {
    box-shadow: var(--base-card-classic-box-shadow-inner);
  }
  &:where(:any-link, button, label) {
    @media (hover: hover) {
      &:where(:hover) {
        transition-duration: 40ms;
        box-shadow: var(--base-card-classic-hover-box-shadow-outer);
        &::after {
          box-shadow: var(--base-card-classic-hover-box-shadow-inner);
        }
      }
    }
    &:where([data-state='open']) {
      transition-duration: 40ms;
      box-shadow: var(--base-card-classic-hover-box-shadow-outer);
      &::after {
        box-shadow: var(--base-card-classic-hover-box-shadow-inner);
      }
    }
    &:where(:active:not([data-state='open'])) {
      transition-duration: 40ms;
      box-shadow: var(--base-card-classic-active-box-shadow-outer);
      &::after {
        box-shadow: var(--base-card-classic-active-box-shadow-inner);
      }
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*          Variants / Ghost           */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.rt-Card:where(.rt-variant-ghost) {
  --card-border-width: 0px;

  /* We reset the defined margin variables to avoid inheriting them from a higher component */
  /* If a margin IS defined on the component itself, the utility class will win and reset it */
  --margin-top: 0px;
  --margin-right: 0px;
  --margin-bottom: 0px;
  --margin-left: 0px;

  /* Define the overrides to incorporate the negative margins */
  --margin-top-override: calc(var(--margin-top) - var(--card-padding));
  --margin-right-override: calc(var(--margin-right) - var(--card-padding));
  --margin-bottom-override: calc(var(--margin-bottom) - var(--card-padding));
  --margin-left-override: calc(var(--margin-left) - var(--card-padding));

  margin-top: var(--margin-top-override);
  margin-right: var(--margin-right-override);
  margin-bottom: var(--margin-bottom-override);
  margin-left: var(--margin-left-override);

  /* Reset the overrides on direct children */
  :where(&) > * {
    --margin-top-override: initial;
    --margin-right-override: initial;
    --margin-bottom-override: initial;
    --margin-left-override: initial;
  }
  &:where(:any-link, button, label) {
    @media (hover: hover) {
      &:where(:hover) {
        background-color: var(--gray-a3);
        &:where(:focus-visible) {
          background-color: var(--focus-a2);
        }
      }
    }
    &:where([data-state='open']) {
      background-color: var(--gray-a3);
      &:where(:focus-visible) {
        background-color: var(--focus-a2);
      }
    }
    &:where(:active:not([data-state='open'])) {
      background-color: var(--gray-a4);
      &:where(:focus-visible) {
        background-color: var(--focus-a2);
      }
    }
  }
}

/* Better -webkit-tap-highlight-color */
.rt-Card:where(:any-link, button, label) {
  @media (pointer: coarse) {
    &:where(:active:not(:focus-visible, [data-state='open'])) {
      &::before {
        background-image: linear-gradient(var(--gray-a4), var(--gray-a4));
      }
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/card.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3', '4', '5'] as const;
const variants = ['surface', 'classic', 'ghost'] as const;

const cardPropDefs = {
  ...asChildPropDef,
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '1', responsive: true },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'surface' },
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
};

export { cardPropDefs };


================================================
File: packages/radix-ui-themes/src/components/card.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { cardPropDefs } from './card.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type CardElement = React.ElementRef<'div'>;
type CardOwnProps = GetPropDefTypes<typeof cardPropDefs>;
interface CardProps extends ComponentPropsWithout<'div', RemovedProps>, MarginProps, CardOwnProps {}
const Card = React.forwardRef<CardElement, CardProps>((props, forwardedRef) => {
  const { asChild, className, ...cardProps } = extractProps(props, cardPropDefs, marginPropDefs);
  const Comp = asChild ? Slot.Root : 'div';
  return (
    <Comp
      ref={forwardedRef}
      {...cardProps}
      className={classNames('rt-reset', 'rt-BaseCard', 'rt-Card', className)}
    />
  );
});
Card.displayName = 'Card';

export { Card };
export type { CardProps };


================================================
File: packages/radix-ui-themes/src/components/checkbox-cards.css
================================================
@import './_internal/base-card.css';
@import './_internal/base-checkbox.css';

.rt-CheckboxCardsRoot {
  line-height: var(--line-height);
  letter-spacing: var(--letter-spacing);
  cursor: default;
}

.rt-CheckboxCardsItem {
  --base-card-padding-top: var(--checkbox-cards-item-padding-top);
  --base-card-padding-right: var(--checkbox-cards-item-padding-right);
  --base-card-padding-bottom: var(--checkbox-cards-item-padding-bottom);
  --base-card-padding-left: var(--checkbox-cards-item-padding-left);
  --base-card-border-radius: var(--checkbox-cards-item-border-radius);
  --base-card-border-width: var(--checkbox-cards-item-border-width);

  display: flex;
  align-items: center;
  gap: var(--space-2);
  cursor: var(--cursor-button);
  -webkit-tap-highlight-color: transparent;

  &:where(:has(:focus-visible)) {
    outline: 2px solid var(--focus-8);
    outline-offset: -1px;

    &::after {
      outline: inherit;
    }
  }

  & > * {
    /* Avoid unintentional drag interactions (e.g. on images) */
    pointer-events: none;
  }
  /* stylelint-disable-next-line selector-max-type */
  & > :where(svg) {
    /* Don’t squish icons */
    flex-shrink: 0;
  }
}

.rt-CheckboxCardCheckbox {
  position: absolute;
  right: var(--checkbox-cards-item-padding-left);
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*                Sizes                */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.rt-CheckboxCardsItem {
  --checkbox-cards-item-padding-right: calc(
    var(--checkbox-cards-item-padding-left) * 2 + var(--checkbox-cards-item-checkbox-size)
  );
}

@breakpoints {
  .rt-CheckboxCardsRoot {
    /* 40px height for the card with one line of text */
    &:where(.rt-r-size-1) {
      font-size: var(--font-size-2);
      --line-height: var(--line-height-2);
      --letter-spacing: var(--letter-spacing-2);
      --checkbox-cards-item-padding-top: calc(var(--space-3) / 1.2);
      --checkbox-cards-item-padding-bottom: calc(var(--space-3) / 1.2);
      --checkbox-cards-item-padding-left: var(--space-3);
      --checkbox-cards-item-border-radius: var(--radius-3);
      /* keep in sync with checkbox */
      --checkbox-cards-item-checkbox-size: calc(var(--space-4) * 0.875);
    }
    /* 48px height for the card with one line of text */
    &:where(.rt-r-size-2) {
      font-size: var(--font-size-2);
      --line-height: var(--line-height-2);
      --letter-spacing: var(--letter-spacing-2);
      --checkbox-cards-item-padding-top: calc(var(--space-4) * 0.875);
      --checkbox-cards-item-padding-bottom: calc(var(--space-4) * 0.875);
      --checkbox-cards-item-padding-left: var(--space-4);
      --checkbox-cards-item-border-radius: var(--radius-3);
      /* keep in sync with checkbox */
      --checkbox-cards-item-checkbox-size: var(--space-4);
    }
    /* 64px height for the card with one line of text */
    &:where(.rt-r-size-3) {
      font-size: var(--font-size-3);
      --line-height: var(--line-height-3);
      --letter-spacing: var(--letter-spacing-3);
      --checkbox-cards-item-padding-top: calc(var(--space-5) / 1.2);
      --checkbox-cards-item-padding-bottom: calc(var(--space-5) / 1.2);
      --checkbox-cards-item-padding-left: var(--space-5);
      --checkbox-cards-item-border-radius: var(--radius-4);
      /* keep in sync with checkbox */
      --checkbox-cards-item-checkbox-size: calc(var(--space-4) * 1.25);
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*         Variants / Surface          */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

:where(.rt-CheckboxCardsRoot.rt-variant-surface) {
  .rt-CheckboxCardsItem {
    --checkbox-cards-item-border-width: 1px;
    --checkbox-cards-item-background-color: var(--color-surface);

    &::before {
      background-color: var(--checkbox-cards-item-background-color);
    }
    &::after {
      box-shadow: var(--base-card-surface-box-shadow);
    }
    @media (hover: hover) {
      &:where(:not(:has(:disabled)):hover) {
        &::after {
          box-shadow: var(--base-card-surface-hover-box-shadow);
        }
      }
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*         Variants / Classic          */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

:where(.rt-CheckboxCardsRoot.rt-variant-classic) {
  .rt-CheckboxCardsItem {
    --checkbox-cards-item-border-width: 1px;
    --checkbox-cards-item-background-color: var(--color-surface);

    transition: box-shadow 120ms;
    box-shadow: var(--base-card-classic-box-shadow-outer);

    &::before {
      background-color: var(--checkbox-cards-item-background-color);
    }
    &::after {
      box-shadow: var(--base-card-classic-box-shadow-inner);
    }
    @media (hover: hover) {
      &:where(:not(:has(:disabled)):hover) {
        transition-duration: 40ms;
        box-shadow: var(--base-card-classic-hover-box-shadow-outer);
        &::after {
          box-shadow: var(--base-card-classic-hover-box-shadow-inner);
        }
      }
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*         All tap highlights          */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

/* Better -webkit-tap-highlight-color */
.rt-CheckboxCardsItem {
  @media (pointer: coarse) {
    &:where(:active:not(:focus-visible)) {
      &::before {
        background-image: linear-gradient(var(--gray-a4), var(--gray-a4));
      }
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*            All disabled             */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.rt-CheckboxCardsItem:where(:has(:disabled)) {
  cursor: var(--cursor-disabled);
  color: var(--gray-a9);

  &::before {
    background-image: linear-gradient(var(--gray-a2), var(--gray-a2));
  }
  &::selection {
    background-color: var(--gray-a5);
  }
}


================================================
File: packages/radix-ui-themes/src/components/checkbox-cards.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { colorPropDef } from '../props/color.prop.js';
import { highContrastPropDef } from '../props/high-contrast.prop.js';
import { gridPropDefs } from './grid.props.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;
const variants = ['surface', 'classic'] as const;

const checkboxCardsRootPropDefs = {
  ...asChildPropDef,
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '2', responsive: true },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'surface' },
  ...colorPropDef,
  ...highContrastPropDef,
  columns: { ...gridPropDefs.columns, default: 'repeat(auto-fit, minmax(200px, 1fr))' },
  gap: { ...gridPropDefs.gap, default: '4' },
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
  columns: PropDef<(typeof gridPropDefs.columns.values)[number]>;
  gap: PropDef<(typeof gridPropDefs.gap.values)[number]>;
};

export { checkboxCardsRootPropDefs };


================================================
File: packages/radix-ui-themes/src/components/checkbox-cards.tsx
================================================
'use client';

import * as React from 'react';
import classNames from 'classnames';
import { Context } from 'radix-ui/internal';

import * as CheckboxGroupPrimitive from './checkbox-group.primitive.js';
import { createCheckboxGroupScope } from './checkbox-group.primitive.js';
import { checkboxCardsRootPropDefs } from './checkbox-cards.props.js';
import { baseCheckboxPropDefs } from './_internal/base-checkbox.props.js';
import { Grid } from './grid.js';
import { ThickCheckIcon } from './icons.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { MarginProps } from '../props/margin.props.js';
import type { Responsive, GetPropDefTypes } from '../props/prop-def.js';

const CHECKBOX_CARD_GROUP_NAME = 'CheckboxCards';

type ScopedProps<P> = P & { __scopeCheckboxCards?: Context.Scope };
const [createCheckboxCardsContext] = Context.createContextScope(CHECKBOX_CARD_GROUP_NAME, [
  createCheckboxGroupScope,
]);
const useCheckboxGroupScope = createCheckboxGroupScope();

type CheckboxCardsContextValue = {
  size?: Responsive<(typeof checkboxCardsRootPropDefs.size.values)[number]>;
  highContrast?: boolean;
};

const [CheckboxCardsProvider, useCheckboxCardsContext] =
  createCheckboxCardsContext<CheckboxCardsContextValue>(CHECKBOX_CARD_GROUP_NAME);

type CheckboxCardsRootElement = React.ElementRef<typeof CheckboxGroupPrimitive.Root>;
type CheckboxCardsRootOwnProps = GetPropDefTypes<typeof checkboxCardsRootPropDefs>;
interface CheckboxCardsRootProps
  extends ComponentPropsWithout<
      typeof CheckboxGroupPrimitive.Root,
      'asChild' | 'color' | 'defaultChecked'
    >,
    MarginProps,
    CheckboxCardsRootOwnProps {}
const CheckboxCardsRoot = React.forwardRef<CheckboxCardsRootElement, CheckboxCardsRootProps>(
  (props: ScopedProps<CheckboxCardsRootProps>, forwardedRef) => {
    const { __scopeCheckboxCards, className, color, ...rootProps } = extractProps(
      props,
      checkboxCardsRootPropDefs,
      marginPropDefs
    );
    const checkboxGroupScope = useCheckboxGroupScope(__scopeCheckboxCards);
    return (
      <CheckboxCardsProvider
        scope={__scopeCheckboxCards}
        size={props.size}
        highContrast={props.highContrast}
      >
        <Grid asChild>
          <CheckboxGroupPrimitive.Root
            {...checkboxGroupScope}
            data-accent-color={color}
            {...rootProps}
            ref={forwardedRef}
            className={classNames('rt-CheckboxCardsRoot', className)}
          />
        </Grid>
      </CheckboxCardsProvider>
    );
  }
);
CheckboxCardsRoot.displayName = 'CheckboxCards.Root';

type CheckboxCardsItemElement = React.ElementRef<typeof CheckboxGroupPrimitive.Item>;
interface CheckboxCardsItemProps
  extends ComponentPropsWithout<typeof CheckboxGroupPrimitive.Item, RemovedProps>,
    MarginProps {}
const CheckboxCardsItem = React.forwardRef<
  CheckboxCardsItemElement,
  ScopedProps<CheckboxCardsItemProps>
>(({ __scopeCheckboxCards, children, className, style, ...props }, forwardedRef) => {
  const context = useCheckboxCardsContext('CheckboxCardsItem', __scopeCheckboxCards);
  const checkboxGroupScope = useCheckboxGroupScope(__scopeCheckboxCards);
  const { className: checkboxClassName } = extractProps(
    // Pass size / highContrast values from the context and static variant to generate styles
    { size: context?.size, variant: 'surface', highContrast: context?.highContrast },
    // Pass size & variant prop defs to allow it to be extracted
    baseCheckboxPropDefs
  );
  return (
    <label className={classNames('rt-BaseCard', 'rt-CheckboxCardsItem', className)} style={style}>
      {children}
      <CheckboxGroupPrimitive.Item
        {...checkboxGroupScope}
        {...props}
        ref={forwardedRef}
        className={classNames(
          'rt-reset',
          'rt-BaseCheckboxRoot',
          'rt-CheckboxCardCheckbox',
          checkboxClassName
        )}
      >
        <CheckboxGroupPrimitive.Indicator
          {...checkboxGroupScope}
          asChild
          className="rt-BaseCheckboxIndicator"
        >
          <ThickCheckIcon />
        </CheckboxGroupPrimitive.Indicator>
      </CheckboxGroupPrimitive.Item>
    </label>
  );
});
CheckboxCardsItem.displayName = 'CheckboxCards.Item';

export { CheckboxCardsRoot as Root, CheckboxCardsItem as Item };
export type { CheckboxCardsRootProps as RootProps, CheckboxCardsItemProps as ItemProps };


================================================
File: packages/radix-ui-themes/src/components/checkbox-group.css
================================================
.rt-CheckboxGroupRoot {
  display: flex;
  flex-direction: column;
  gap: var(--space-1);
}

.rt-CheckboxGroupItem {
  display: flex;
  gap: 0.5em;

  /* Make sure whitespace to the right of the text is not clickable */
  width: fit-content;
}

.rt-CheckboxGroupItemCheckbox {
  &:where(:focus-visible) {
    &::before {
      outline: 2px solid var(--focus-8);
      outline-offset: 2px;
    }
  }

  &:where(:disabled) {
    cursor: var(--cursor-disabled);

    &::before {
      background-color: var(--gray-a3);
    }
  }
}

.rt-CheckboxGroupItemInner {
  /* Make layouts with text truncation possible */
  min-width: 0;
}


================================================
File: packages/radix-ui-themes/src/components/checkbox-group.primitive.tsx
================================================
'use client';

import * as React from 'react';
import { Checkbox as CheckboxPrimitive, Direction } from 'radix-ui';
import {
  Context,
  Primitive,
  useComposedRefs,
  RovingFocus,
  useControllableState,
} from 'radix-ui/internal';

const { useDirection } = Direction;

/* -------------------------------------------------------------------------------------------------
 * CheckboxGroup
 * -----------------------------------------------------------------------------------------------*/
const CHECKBOX_GROUP_NAME = 'CheckboxGroup';

type ScopedProps<P> = P & { __scopeCheckboxGroup?: Context.Scope };
const [createCheckboxGroupContext, createCheckboxGroupScope] = Context.createContextScope(
  CHECKBOX_GROUP_NAME,
  [RovingFocus.createRovingFocusGroupScope, CheckboxPrimitive.createCheckboxScope]
);
const useRovingFocusGroupScope = RovingFocus.createRovingFocusGroupScope();
const useCheckboxScope = CheckboxPrimitive.createCheckboxScope();

type CheckboxGroupContextValue = {
  name?: string;
  required: boolean;
  disabled: boolean;
  value?: string[];
  onItemCheck(value: string): void;
  onItemUncheck(value: string): void;
};

const [CheckboxGroupProvider, useCheckboxGroupContext] =
  createCheckboxGroupContext<CheckboxGroupContextValue>(CHECKBOX_GROUP_NAME);

type CheckboxGroupElement = React.ElementRef<typeof Primitive.div>;
type RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocus.Root>;
type PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;
interface CheckboxGroupProps extends PrimitiveDivProps {
  name?: CheckboxGroupContextValue['name'];
  required?: React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>['required'];
  disabled?: React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>['disabled'];
  dir?: RovingFocusGroupProps['dir'];
  orientation?: RovingFocusGroupProps['orientation'];
  loop?: RovingFocusGroupProps['loop'];
  defaultValue?: string[];
  value?: CheckboxGroupContextValue['value'];
  onValueChange?: (value: string[]) => void;
}

const CheckboxGroup = React.forwardRef<CheckboxGroupElement, CheckboxGroupProps>(
  (props: ScopedProps<CheckboxGroupProps>, forwardedRef) => {
    const {
      __scopeCheckboxGroup,
      name,
      defaultValue,
      value: valueProp,
      required = false,
      disabled = false,
      orientation,
      dir,
      loop = true,
      onValueChange,
      ...groupProps
    } = props;
    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeCheckboxGroup);
    const direction = useDirection(dir);
    const [value = [], setValue] = useControllableState({
      prop: valueProp,
      defaultProp: defaultValue,
      onChange: onValueChange,
    });

    const handleItemCheck = React.useCallback(
      (itemValue: string) => setValue((prevValue = []) => [...prevValue, itemValue]),
      [setValue]
    );

    const handleItemUncheck = React.useCallback(
      (itemValue: string) =>
        setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),
      [setValue]
    );

    return (
      <CheckboxGroupProvider
        scope={__scopeCheckboxGroup}
        name={name}
        required={required}
        disabled={disabled}
        value={value}
        onItemCheck={handleItemCheck}
        onItemUncheck={handleItemUncheck}
      >
        <RovingFocus.Root
          asChild
          {...rovingFocusGroupScope}
          orientation={orientation}
          dir={direction}
          loop={loop}
        >
          <Primitive.div
            role="group"
            data-disabled={disabled ? '' : undefined}
            dir={direction}
            {...groupProps}
            ref={forwardedRef}
          />
        </RovingFocus.Root>
      </CheckboxGroupProvider>
    );
  }
);

CheckboxGroup.displayName = CHECKBOX_GROUP_NAME;

/* -------------------------------------------------------------------------------------------------
 * CheckboxGroupItem
 * -----------------------------------------------------------------------------------------------*/

const ITEM_NAME = 'CheckboxGroupItem';

type CheckboxGroupItemElement = React.ElementRef<typeof CheckboxPrimitive.Root>;
type CheckboxProps = React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>;
interface CheckboxGroupItemProps
  extends Omit<CheckboxProps, 'checked' | 'defaultChecked' | 'onCheckedChange' | 'name'> {
  value: string;
}

const CheckboxGroupItem = React.forwardRef<CheckboxGroupItemElement, CheckboxGroupItemProps>(
  (props: ScopedProps<CheckboxGroupItemProps>, forwardedRef) => {
    const { __scopeCheckboxGroup, disabled, ...itemProps } = props;
    const context = useCheckboxGroupContext(ITEM_NAME, __scopeCheckboxGroup);
    const isDisabled = context.disabled || disabled;
    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeCheckboxGroup);
    const checkboxScope = useCheckboxScope(__scopeCheckboxGroup);
    const ref = React.useRef<React.ElementRef<typeof CheckboxPrimitive.Root>>(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const checked = context.value?.includes(itemProps.value);

    return (
      <RovingFocus.Item asChild {...rovingFocusGroupScope} focusable={!isDisabled} active={checked}>
        <CheckboxPrimitive.Root
          name={context.name}
          disabled={isDisabled}
          required={context.required}
          checked={checked}
          {...checkboxScope}
          {...itemProps}
          ref={composedRefs}
          onCheckedChange={(checked) => {
            if (checked) {
              context.onItemCheck(props.value);
            } else {
              context.onItemUncheck(props.value);
            }
          }}
        />
      </RovingFocus.Item>
    );
  }
);

CheckboxGroupItem.displayName = ITEM_NAME;

/* -------------------------------------------------------------------------------------------------
 * CheckboxGroupIndicator
 * -----------------------------------------------------------------------------------------------*/

const INDICATOR_NAME = 'CheckboxGroupIndicator';

type CheckboxGroupIndicatorElement = React.ElementRef<typeof CheckboxPrimitive.Indicator>;
type CheckboxIndicatorProps = React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Indicator>;
interface CheckboxGroupIndicatorProps extends CheckboxIndicatorProps {}

const CheckboxGroupIndicator = React.forwardRef<
  CheckboxGroupIndicatorElement,
  CheckboxGroupIndicatorProps
>((props: ScopedProps<CheckboxGroupIndicatorProps>, forwardedRef) => {
  const { __scopeCheckboxGroup, ...indicatorProps } = props;
  const checkboxScope = useCheckboxScope(__scopeCheckboxGroup);
  return <CheckboxPrimitive.Indicator {...checkboxScope} {...indicatorProps} ref={forwardedRef} />;
});

CheckboxGroupIndicator.displayName = INDICATOR_NAME;

/* ---------------------------------------------------------------------------------------------- */

const Root = CheckboxGroup;
const Item = CheckboxGroupItem;
const Indicator = CheckboxGroupIndicator;

export {
  createCheckboxGroupScope,
  //
  CheckboxGroup,
  CheckboxGroupItem,
  CheckboxGroupIndicator,
  //
  Root,
  Item,
  Indicator,
};
export type { CheckboxGroupProps, CheckboxGroupItemProps, CheckboxGroupIndicatorProps };


================================================
File: packages/radix-ui-themes/src/components/checkbox-group.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { baseCheckboxPropDefs } from './_internal/base-checkbox.props.js';

const checkboxGroupRootPropDefs = {
  ...asChildPropDef,
  ...baseCheckboxPropDefs,
};

export { checkboxGroupRootPropDefs };


================================================
File: packages/radix-ui-themes/src/components/checkbox-group.tsx
================================================
'use client';

import * as React from 'react';
import classNames from 'classnames';
import { Context } from 'radix-ui/internal';

import * as CheckboxGroupPrimitive from './checkbox-group.primitive.js';
import { createCheckboxGroupScope } from './checkbox-group.primitive.js';
import { checkboxGroupRootPropDefs } from './checkbox-group.props.js';
import { ThickCheckIcon } from './icons.js';
import { Text } from './text.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { MarginProps } from '../props/margin.props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

const CHECKBOX_GROUP_NAME = 'CheckboxGroup';

type ScopedProps<P> = P & { __scopeCheckboxGroup?: Context.Scope };
const [createCheckboxGroupContext] = Context.createContextScope(CHECKBOX_GROUP_NAME, [
  createCheckboxGroupScope,
]);
const useCheckboxGroupScope = createCheckboxGroupScope();

type CheckboxGroupRootOwnProps = GetPropDefTypes<typeof checkboxGroupRootPropDefs>;
type CheckboxGroupContextValue = CheckboxGroupRootOwnProps;

const [CheckboxGroupProvider, useCheckboxGroupContext] =
  createCheckboxGroupContext<CheckboxGroupContextValue>(CHECKBOX_GROUP_NAME);

type CheckboxGroupRootElement = React.ElementRef<typeof CheckboxGroupPrimitive.Root>;
interface CheckboxGroupRootProps
  extends ComponentPropsWithout<
      typeof CheckboxGroupPrimitive.Root,
      'asChild' | 'color' | 'defaultChecked'
    >,
    MarginProps,
    CheckboxGroupRootOwnProps {}
const CheckboxGroupRoot = React.forwardRef<CheckboxGroupRootElement, CheckboxGroupRootProps>(
  (
    {
      color = checkboxGroupRootPropDefs.color.default,
      highContrast = checkboxGroupRootPropDefs.highContrast.default,
      size = checkboxGroupRootPropDefs.size.default,
      variant = checkboxGroupRootPropDefs.variant.default,
      ...props
    }: ScopedProps<CheckboxGroupRootProps>,
    forwardedRef
  ) => {
    const { __scopeCheckboxGroup, className, ...rootProps } = extractProps(props, marginPropDefs);
    const checkboxGroupScope = useCheckboxGroupScope(__scopeCheckboxGroup);
    return (
      <CheckboxGroupProvider
        scope={__scopeCheckboxGroup}
        color={color}
        size={size}
        highContrast={highContrast}
        variant={variant}
      >
        <CheckboxGroupPrimitive.Root
          {...checkboxGroupScope}
          {...rootProps}
          ref={forwardedRef}
          className={classNames('rt-CheckboxGroupRoot', className)}
        />
      </CheckboxGroupProvider>
    );
  }
);
CheckboxGroupRoot.displayName = 'CheckboxGroup.Root';

type CheckboxGroupItemElement = React.ElementRef<typeof CheckboxGroupPrimitive.Item>;
interface CheckboxGroupItemProps
  extends ComponentPropsWithout<typeof CheckboxGroupPrimitive.Item, RemovedProps>,
    MarginProps {}
const CheckboxGroupItem = React.forwardRef<CheckboxGroupItemElement, CheckboxGroupItemProps>(
  (_props: ScopedProps<CheckboxGroupItemProps>, forwardedRef) => {
    const { __scopeCheckboxGroup, children, className, style, ...props } = _props;
    const { size } = useCheckboxGroupContext('CheckboxGroupItem', __scopeCheckboxGroup);

    // Render `<Text as="label">` if children are provided, otherwise render
    // the solo checkbox to allow building out your custom layouts with it.
    if (children) {
      return (
        <Text
          as="label"
          size={size}
          className={classNames('rt-CheckboxGroupItem', className)}
          style={style}
        >
          <CheckboxGroupItemCheckbox
            __scopeCheckboxGroup={__scopeCheckboxGroup}
            {...props}
            ref={forwardedRef}
          />
          {children && <span className="rt-CheckboxGroupItemInner">{children}</span>}
        </Text>
      );
    }

    return (
      <CheckboxGroupItemCheckbox
        __scopeCheckboxGroup={__scopeCheckboxGroup}
        {...props}
        ref={forwardedRef}
        className={className}
        style={style}
      />
    );
  }
);
CheckboxGroupItem.displayName = 'CheckboxGroup.Item';

type CheckboxGroupItemCheckboxElement = React.ElementRef<typeof CheckboxGroupPrimitive.Item>;
interface CheckboxGroupItemCheckboxProps
  extends ComponentPropsWithout<typeof CheckboxGroupPrimitive.Item, RemovedProps> {}
const CheckboxGroupItemCheckbox = React.forwardRef<
  CheckboxGroupItemCheckboxElement,
  ScopedProps<CheckboxGroupItemCheckboxProps>
>(({ __scopeCheckboxGroup, ...props }, forwardedRef) => {
  const context = useCheckboxGroupContext('CheckboxGroupItemCheckbox', __scopeCheckboxGroup);
  const checkboxGroupScope = useCheckboxGroupScope(__scopeCheckboxGroup);
  const { color, className } = extractProps(
    { ...props, ...context },
    checkboxGroupRootPropDefs,
    marginPropDefs
  );
  return (
    <CheckboxGroupPrimitive.Item
      {...checkboxGroupScope}
      data-accent-color={color}
      {...props}
      ref={forwardedRef}
      className={classNames(
        'rt-reset',
        'rt-BaseCheckboxRoot',
        'rt-CheckboxGroupItemCheckbox',
        className
      )}
    >
      <CheckboxGroupPrimitive.Indicator
        {...checkboxGroupScope}
        asChild
        className="rt-BaseCheckboxIndicator"
      >
        <ThickCheckIcon />
      </CheckboxGroupPrimitive.Indicator>
    </CheckboxGroupPrimitive.Item>
  );
});
CheckboxGroupItemCheckbox.displayName = 'CheckboxGroup.ItemCheckbox';

export { CheckboxGroupRoot as Root, CheckboxGroupItem as Item };
export type { CheckboxGroupRootProps as RootProps, CheckboxGroupItemProps as ItemProps };


================================================
File: packages/radix-ui-themes/src/components/checkbox.css
================================================
@import './_internal/base-checkbox.css';

.rt-CheckboxRoot {
  &:where(:focus-visible) {
    &::before {
      outline: 2px solid var(--focus-8);
      outline-offset: 2px;
    }
  }

  &:where(:disabled) {
    cursor: var(--cursor-disabled);

    &::before {
      background-color: var(--gray-a3);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/checkbox.props.tsx
================================================
export { baseCheckboxPropDefs as checkboxPropDefs } from './_internal/base-checkbox.props.js';


================================================
File: packages/radix-ui-themes/src/components/checkbox.tsx
================================================
'use client';

import * as React from 'react';
import classNames from 'classnames';
import { Checkbox as CheckboxPrimitive } from 'radix-ui';
import { useControllableState } from 'radix-ui/internal';

import { checkboxPropDefs } from './checkbox.props.js';
import { ThickCheckIcon, ThickDividerHorizontalIcon } from './icons.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type CheckboxElement = React.ElementRef<typeof CheckboxPrimitive.Root>;
type CheckboxOwnProps = GetPropDefTypes<typeof checkboxPropDefs>;
interface CheckboxProps
  extends ComponentPropsWithout<
      typeof CheckboxPrimitive.Root,
      'asChild' | 'color' | 'defaultValue' | 'children'
    >,
    MarginProps,
    CheckboxOwnProps {}
const Checkbox = React.forwardRef<CheckboxElement, CheckboxProps>((props, forwardedRef) => {
  const {
    className,
    color,
    checked: checkedProp,
    defaultChecked: defaultCheckedProp,
    onCheckedChange,
    ...checkboxProps
  } = extractProps(props, checkboxPropDefs, marginPropDefs);

  const [checked, setChecked] = useControllableState({
    prop: checkedProp,
    defaultProp: defaultCheckedProp,
    onChange: onCheckedChange,
  });

  return (
    <CheckboxPrimitive.Root
      data-accent-color={color}
      {...checkboxProps}
      defaultChecked={defaultCheckedProp}
      checked={checked}
      onCheckedChange={setChecked}
      asChild={false}
      ref={forwardedRef}
      className={classNames('rt-reset', 'rt-BaseCheckboxRoot', 'rt-CheckboxRoot', className)}
    >
      <CheckboxPrimitive.Indicator
        asChild
        className="rt-BaseCheckboxIndicator rt-CheckboxIndicator"
      >
        {checked === 'indeterminate' ? <ThickDividerHorizontalIcon /> : <ThickCheckIcon />}
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  );
});
Checkbox.displayName = 'Checkbox';

export { Checkbox };
export type { CheckboxProps };


================================================
File: packages/radix-ui-themes/src/components/code.css
================================================
/* stylelint-disable selector-max-type */
/* Disable selector-max-type rule to target individual element types. */

.rt-Code {
  --code-variant-font-size-adjust: calc(var(--code-font-size-adjust) * 0.95);
  font-family: var(--code-font-family);
  font-size: calc(var(--code-variant-font-size-adjust) * 1em);
  font-style: var(--code-font-style);
  font-weight: var(--code-font-weight);
  line-height: 1.25;
  letter-spacing: calc(var(--code-letter-spacing) + var(--letter-spacing, var(--default-letter-spacing)));
  border-radius: calc((0.5px + 0.2em) * var(--radius-factor));

  box-sizing: border-box;
  padding-top: var(--code-padding-top);
  padding-left: var(--code-padding-left);
  padding-bottom: var(--code-padding-bottom);
  padding-right: var(--code-padding-right);

  /* Make sure that the height is not stretched in a Flex/Grid layout */
  height: fit-content;

  & :where(&) {
    font-size: inherit;
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-Code {
    &:where(.rt-r-size-1) {
      font-size: calc(var(--font-size-1) * var(--code-variant-font-size-adjust));
      line-height: var(--line-height-1);
      --letter-spacing: var(--letter-spacing-1);
    }
    &:where(.rt-r-size-2) {
      font-size: calc(var(--font-size-2) * var(--code-variant-font-size-adjust));
      line-height: var(--line-height-2);
      --letter-spacing: var(--letter-spacing-2);
    }
    &:where(.rt-r-size-3) {
      font-size: calc(var(--font-size-3) * var(--code-variant-font-size-adjust));
      line-height: var(--line-height-3);
      --letter-spacing: var(--letter-spacing-3);
    }
    &:where(.rt-r-size-4) {
      font-size: calc(var(--font-size-4) * var(--code-variant-font-size-adjust));
      line-height: var(--line-height-4);
      --letter-spacing: var(--letter-spacing-4);
    }
    &:where(.rt-r-size-5) {
      font-size: calc(var(--font-size-5) * var(--code-variant-font-size-adjust));
      line-height: var(--line-height-5);
      --letter-spacing: var(--letter-spacing-5);
    }
    &:where(.rt-r-size-6) {
      font-size: calc(var(--font-size-6) * var(--code-variant-font-size-adjust));
      line-height: var(--line-height-6);
      --letter-spacing: var(--letter-spacing-6);
    }
    &:where(.rt-r-size-7) {
      font-size: calc(var(--font-size-7) * var(--code-variant-font-size-adjust));
      line-height: var(--line-height-7);
      --letter-spacing: var(--letter-spacing-7);
    }
    &:where(.rt-r-size-8) {
      font-size: calc(var(--font-size-8) * var(--code-variant-font-size-adjust));
      line-height: var(--line-height-8);
      --letter-spacing: var(--letter-spacing-8);
    }
    &:where(.rt-r-size-9) {
      font-size: calc(var(--font-size-9) * var(--code-variant-font-size-adjust));
      line-height: var(--line-height-9);
      --letter-spacing: var(--letter-spacing-9);
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

/* ghost */

.rt-Code:where(.rt-variant-ghost) {
  --code-variant-font-size-adjust: var(--code-font-size-adjust);
  padding: 0;

  &:where([data-accent-color]) {
    color: var(--accent-a11);
  }

  &:where([data-accent-color].rt-high-contrast),
  :where([data-accent-color]:not(.radix-themes)) &:where(.rt-high-contrast) {
    color: var(--accent-12);
  }
}

/* solid */

.rt-Code:where(.rt-variant-solid) {
  background-color: var(--accent-a9);
  color: var(--accent-contrast);

  &::selection {
    background-color: var(--accent-7);
    color: var(--accent-12);
  }

  &:where(.rt-high-contrast) {
    background-color: var(--accent-12);
    color: var(--accent-1);

    &::selection {
      background-color: var(--accent-a11);
      color: var(--accent-1);
    }
  }

  :where(.rt-Link) &,
  &:where(:any-link, button) {
    /* Create a new stacking context (otherwise, `filter` may do it on hover) */
    isolation: isolate;
    @media (hover: hover) {
      &:where(:hover) {
        background-color: var(--accent-10);
      }
      &:where(.rt-high-contrast:hover) {
        background-color: var(--accent-12);
        /* Re-use base button hover filter */
        filter: var(--base-button-solid-high-contrast-hover-filter);
      }
    }
  }
}

/* soft */

.rt-Code:where(.rt-variant-soft) {
  background-color: var(--accent-a3);
  color: var(--accent-a11);

  &:where(.rt-high-contrast) {
    color: var(--accent-12);
  }

  :where(.rt-Link) &,
  &:where(:any-link, button) {
    isolation: isolate;
    @media (hover: hover) {
      &:where(:hover) {
        background-color: var(--accent-a4);
      }
    }
  }
}

/* outline */

.rt-Code:where(.rt-variant-outline) {
  box-shadow: inset 0 0 0 max(1px, 0.033em) var(--accent-a8);
  color: var(--accent-a11);

  &:where(.rt-high-contrast) {
    box-shadow: inset 0 0 0 max(1px, 0.033em) var(--accent-a7), inset 0 0 0 max(1px, 0.033em) var(--gray-a11);
    color: var(--accent-12);
  }

  :where(.rt-Link) &,
  &:where(:any-link, button) {
    isolation: isolate;
    @media (hover: hover) {
      &:where(:hover) {
        background-color: var(--accent-a2);
      }
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/code.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { accentColorPropDef } from '../props/color.prop.js';
import { highContrastPropDef } from '../props/high-contrast.prop.js';
import { textWrapPropDef } from '../props/text-wrap.prop.js';
import { truncatePropDef } from '../props/truncate.prop.js';
import { weightPropDef } from '../props/weight.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3', '4', '5', '6', '7', '8', '9'] as const;
const variants = ['solid', 'soft', 'outline', 'ghost'] as const;

const codePropDefs = {
  ...asChildPropDef,
  size: {
    type: 'enum',
    className: 'rt-r-size',
    values: sizes,
    responsive: true,
  },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'soft' },
  ...weightPropDef,
  ...accentColorPropDef,
  ...highContrastPropDef,
  ...truncatePropDef,
  ...textWrapPropDef,
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
};

export { codePropDefs };


================================================
File: packages/radix-ui-themes/src/components/code.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { codePropDefs } from './code.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type CodeElement = React.ElementRef<'code'>;
type CodeOwnProps = GetPropDefTypes<typeof codePropDefs>;
interface CodeProps
  extends ComponentPropsWithout<'code', RemovedProps>,
    MarginProps,
    CodeOwnProps {}
const Code = React.forwardRef<CodeElement, CodeProps>((props, forwardedRef) => {
  const { asChild, className, color, ...codeProps } = extractProps(
    props,
    codePropDefs,
    marginPropDefs
  );
  // Code ghost color prop should work as text color by default
  const resolvedColor = props.variant === 'ghost' ? color || undefined : color;
  const Comp = asChild ? Slot.Root : 'code';
  return (
    <Comp
      data-accent-color={resolvedColor}
      {...codeProps}
      ref={forwardedRef}
      className={classNames('rt-reset', 'rt-Code', className)}
    />
  );
});
Code.displayName = 'Code';

export { Code };
export type { CodeProps };


================================================
File: packages/radix-ui-themes/src/components/container.css
================================================
.radix-themes {
  --container-1: 448px;
  --container-2: 688px;
  --container-3: 880px;
  --container-4: 1136px;
}

.rt-Container {
  display: flex;
  box-sizing: border-box;
  flex-direction: column;
  align-items: center;
  flex-shrink: 0;
  flex-grow: 1;
}

.rt-ContainerInner {
  width: 100%;
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-ContainerInner {
    :where(.rt-Container.rt-r-size-1) & {
      max-width: var(--container-1);
    }
    :where(.rt-Container.rt-r-size-2) & {
      max-width: var(--container-2);
    }
    :where(.rt-Container.rt-r-size-3) & {
      max-width: var(--container-3);
    }
    :where(.rt-Container.rt-r-size-4) & {
      max-width: var(--container-4);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/container.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';

import type { PropDef, GetPropDefTypes } from '../props/prop-def.js';

const sizes = ['1', '2', '3', '4'] as const;
const displayValues = ['none', 'initial'] as const;
const alignValues = ['left', 'center', 'right'] as const;

const containerPropDefs = {
  ...asChildPropDef,
  /**
   * Controls the **max-width** of the content within the container.
   * Supports the predefined values and responsive objects.
   *
   * @values
   * | Size     | Max. width |
   * | :------- | ---------: |
   * | size="1" | 448px      |
   * | size="2" | 688px      |
   * | size="3" | 880px      |
   * | size="4" | 1136px     |
   *
   * @example
   * size="4"
   * size={{ sm: '3', lg: '4' }}
   *
   * @link
   * https://github.com/radix-ui/themes/blob/main/packages/radix-ui-themes/src/components/container.css
   */
  size: {
    type: 'enum',
    className: 'rt-r-size',
    values: sizes,
    default: '4',
    responsive: true,
  },
  /**
   * Controls whether the container is visible or hidden.
   * Supports "none", "initial", and responsive object values.
   *
   * @example
   * display="none"
   * display={{ sm: 'none', lg: 'initial' }}
   */
  display: {
    type: 'enum',
    className: 'rt-r-display',
    values: displayValues,
    parseValue: parseDisplayValue,
    responsive: true,
  },
  /**
   * Controls the alignment of the content within the container.
   *
   * @example
   * align="center"
   * align={{ initial: 'left', lg: 'center' }}
   */
  align: {
    type: 'enum',
    className: 'rt-r-ai',
    values: alignValues,
    parseValue: parseAlignValue,
    responsive: true,
  },
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  display: PropDef<(typeof displayValues)[number]>;
  align: PropDef<(typeof alignValues)[number]>;
};

function parseDisplayValue(value: string) {
  return value === 'initial' ? 'flex' : value;
}

function parseAlignValue(value: string) {
  return value === 'left' ? 'start' : value === 'right' ? 'end' : value;
}

// Use all of the imported prop defs to ensure that JSDoc works
type ContainerOwnProps = GetPropDefTypes<typeof containerPropDefs & typeof asChildPropDef>;

export { containerPropDefs };
export type { ContainerOwnProps };


================================================
File: packages/radix-ui-themes/src/components/container.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { containerPropDefs } from './container.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { getSubtree } from '../helpers/get-subtree.js';
import { heightPropDefs } from '../props/height.props.js';
import { layoutPropDefs } from '../props/layout.props.js';
import { marginPropDefs } from '../props/margin.props.js';
import { widthPropDefs } from '../props/width.props.js';

import type { LayoutProps } from '../props/layout.props.js';
import type { MarginProps } from '../props/margin.props.js';
import type { ContainerOwnProps } from './container.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';

type ContainerElement = React.ElementRef<'div'>;
interface ContainerProps
  extends ComponentPropsWithout<'div', RemovedProps>,
    MarginProps,
    LayoutProps,
    ContainerOwnProps {}
const Container = React.forwardRef<ContainerElement, ContainerProps>(
  ({ width, minWidth, maxWidth, height, minHeight, maxHeight, ...props }, forwardedRef) => {
    const { asChild, children, className, ...containerProps } = extractProps(
      props,
      containerPropDefs,
      layoutPropDefs,
      marginPropDefs
    );

    const { className: innerClassName, style: innerStyle } = extractProps(
      { width, minWidth, maxWidth, height, minHeight, maxHeight },
      widthPropDefs,
      heightPropDefs
    );

    const Comp = asChild ? Slot.Root : 'div';

    return (
      <Comp
        {...containerProps}
        ref={forwardedRef}
        className={classNames('rt-Container', className)}
      >
        {getSubtree({ asChild, children }, (children) => (
          <div className={classNames('rt-ContainerInner', innerClassName)} style={innerStyle}>
            {children}
          </div>
        ))}
      </Comp>
    );
  }
);
Container.displayName = 'Container';

export { Container };
export type { ContainerProps };


================================================
File: packages/radix-ui-themes/src/components/context-menu.css
================================================
@import './_internal/base-menu.css';

.rt-ContextMenuContent {
  max-height: var(--radix-context-menu-content-available-height);
  transform-origin: var(--radix-context-menu-content-transform-origin);
}


================================================
File: packages/radix-ui-themes/src/components/context-menu.props.tsx
================================================
export {
  baseMenuContentPropDefs as contextMenuContentPropDefs,
  baseMenuItemPropDefs as contextMenuItemPropDefs,
  baseMenuCheckboxItemPropDefs as contextMenuCheckboxItemPropDefs,
  baseMenuRadioItemPropDefs as contextMenuRadioItemPropDefs,
} from './_internal/base-menu.props.js';


================================================
File: packages/radix-ui-themes/src/components/context-menu.tsx
================================================
'use client';

import * as React from 'react';
import classNames from 'classnames';
import { ContextMenu as ContextMenuPrimitive, Slot } from 'radix-ui';

import { ScrollArea } from './scroll-area.js';
import {
  contextMenuContentPropDefs,
  contextMenuItemPropDefs,
  contextMenuCheckboxItemPropDefs,
  contextMenuRadioItemPropDefs,
} from './context-menu.props.js';
import { Theme, useThemeContext } from './theme.js';
import { ThickCheckIcon, ThickChevronRightIcon } from './icons.js';
import { extractProps } from '../helpers/extract-props.js';
import { requireReactElement } from '../helpers/require-react-element.js';

import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

interface ContextMenuRootProps
  extends React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Root> {}
const ContextMenuRoot: React.FC<ContextMenuRootProps> = (props) => (
  <ContextMenuPrimitive.Root {...props} />
);
ContextMenuRoot.displayName = 'ContextMenu.Root';

type ContextMenuTriggerElement = React.ElementRef<typeof ContextMenuPrimitive.Trigger>;
interface ContextMenuTriggerProps
  extends ComponentPropsWithout<typeof ContextMenuPrimitive.Trigger, RemovedProps> {}
const ContextMenuTrigger = React.forwardRef<ContextMenuTriggerElement, ContextMenuTriggerProps>(
  ({ children, ...props }, forwardedRef) => (
    <ContextMenuPrimitive.Trigger {...props} ref={forwardedRef} asChild>
      {requireReactElement(children)}
    </ContextMenuPrimitive.Trigger>
  )
);
ContextMenuTrigger.displayName = 'ContextMenu.Trigger';

type ContextMenuContentOwnProps = GetPropDefTypes<typeof contextMenuContentPropDefs>;
type ContextMenuContentContextValue = ContextMenuContentOwnProps;
const ContextMenuContentContext = React.createContext<ContextMenuContentContextValue>({});
type ContextMenuContentElement = React.ElementRef<typeof ContextMenuPrimitive.Content>;
interface ContextMenuContentProps
  extends ComponentPropsWithout<typeof ContextMenuPrimitive.Content, RemovedProps>,
    ContextMenuContentContextValue {
  container?: React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Portal>['container'];
}
const ContextMenuContent = React.forwardRef<ContextMenuContentElement, ContextMenuContentProps>(
  (props, forwardedRef) => {
    const themeContext = useThemeContext();
    const {
      size = contextMenuContentPropDefs.size.default,
      variant = contextMenuContentPropDefs.variant.default,
      highContrast = contextMenuContentPropDefs.highContrast.default,
    } = props;
    const { className, children, color, container, forceMount, ...contentProps } = extractProps(
      props,
      contextMenuContentPropDefs
    );
    const resolvedColor = color || themeContext.accentColor;
    return (
      <ContextMenuPrimitive.Portal container={container} forceMount={forceMount}>
        <Theme asChild>
          <ContextMenuPrimitive.Content
            data-accent-color={resolvedColor}
            alignOffset={-Number(size) * 4}
            collisionPadding={10}
            {...contentProps}
            asChild={false}
            ref={forwardedRef}
            className={classNames(
              'rt-PopperContent',
              'rt-BaseMenuContent',
              'rt-ContextMenuContent',
              className
            )}
          >
            <ScrollArea type="auto">
              <div className={classNames('rt-BaseMenuViewport', 'rt-ContextMenuViewport')}>
                <ContextMenuContentContext.Provider
                  value={React.useMemo(
                    () => ({ size, variant, color: resolvedColor, highContrast }),
                    [size, variant, resolvedColor, highContrast]
                  )}
                >
                  {children}
                </ContextMenuContentContext.Provider>
              </div>
            </ScrollArea>
          </ContextMenuPrimitive.Content>
        </Theme>
      </ContextMenuPrimitive.Portal>
    );
  }
);
ContextMenuContent.displayName = 'ContextMenu.Content';

type ContextMenuLabelElement = React.ElementRef<typeof ContextMenuPrimitive.Label>;
interface ContextMenuLabelProps
  extends ComponentPropsWithout<typeof ContextMenuPrimitive.Label, RemovedProps> {}
const ContextMenuLabel = React.forwardRef<ContextMenuLabelElement, ContextMenuLabelProps>(
  ({ className, ...props }, forwardedRef) => (
    <ContextMenuPrimitive.Label
      {...props}
      asChild={false}
      ref={forwardedRef}
      className={classNames('rt-BaseMenuLabel', 'rt-ContextMenuLabel', className)}
    />
  )
);
ContextMenuLabel.displayName = 'ContextMenu.Label';

type ContextMenuItemElement = React.ElementRef<typeof ContextMenuPrimitive.Item>;
type ContextMenuItemOwnProps = GetPropDefTypes<typeof contextMenuItemPropDefs>;
interface ContextMenuItemProps
  extends ComponentPropsWithout<typeof ContextMenuPrimitive.Item, RemovedProps>,
    ContextMenuItemOwnProps {}
const ContextMenuItem = React.forwardRef<ContextMenuItemElement, ContextMenuItemProps>(
  (props, forwardedRef) => {
    const {
      className,
      children,
      color = contextMenuItemPropDefs.color.default,
      shortcut,
      ...itemProps
    } = props;
    return (
      <ContextMenuPrimitive.Item
        data-accent-color={color}
        {...itemProps}
        ref={forwardedRef}
        className={classNames('rt-reset', 'rt-BaseMenuItem', 'rt-ContextMenuItem', className)}
      >
        <Slot.Slottable>{children}</Slot.Slottable>
        {shortcut && <div className="rt-BaseMenuShortcut rt-ContextMenuShortcut">{shortcut}</div>}
      </ContextMenuPrimitive.Item>
    );
  }
);
ContextMenuItem.displayName = 'ContextMenu.Item';

type ContextMenuGroupElement = React.ElementRef<typeof ContextMenuPrimitive.Group>;
interface ContextMenuGroupProps
  extends ComponentPropsWithout<typeof ContextMenuPrimitive.Group, RemovedProps> {}
const ContextMenuGroup = React.forwardRef<ContextMenuGroupElement, ContextMenuGroupProps>(
  ({ className, ...props }, forwardedRef) => (
    <ContextMenuPrimitive.Group
      {...props}
      asChild={false}
      ref={forwardedRef}
      className={classNames('rt-BaseMenuGroup', 'rt-ContextMenuGroup', className)}
    />
  )
);
ContextMenuGroup.displayName = 'ContextMenu.Group';

type ContextMenuRadioGroupElement = React.ElementRef<typeof ContextMenuPrimitive.RadioGroup>;
interface ContextMenuRadioGroupProps
  extends ComponentPropsWithout<typeof ContextMenuPrimitive.RadioGroup, RemovedProps> {}
const ContextMenuRadioGroup = React.forwardRef<
  ContextMenuRadioGroupElement,
  ContextMenuRadioGroupProps
>(({ className, ...props }, forwardedRef) => (
  <ContextMenuPrimitive.RadioGroup
    {...props}
    asChild={false}
    ref={forwardedRef}
    className={classNames('rt-BaseMenuRadioGroup', 'rt-ContextMenuRadioGroup', className)}
  />
));
ContextMenuRadioGroup.displayName = 'ContextMenu.RadioGroup';

type ContextMenuRadioItemElement = React.ElementRef<typeof ContextMenuPrimitive.RadioItem>;
type ContextMenuRadioItemOwnProps = GetPropDefTypes<typeof contextMenuRadioItemPropDefs>;
interface ContextMenuRadioItemProps
  extends ComponentPropsWithout<typeof ContextMenuPrimitive.RadioItem, RemovedProps>,
    ContextMenuRadioItemOwnProps {}
const ContextMenuRadioItem = React.forwardRef<
  ContextMenuRadioItemElement,
  ContextMenuRadioItemProps
>((props, forwardedRef) => {
  const {
    children,
    className,
    color = contextMenuRadioItemPropDefs.color.default,
    ...itemProps
  } = props;
  return (
    <ContextMenuPrimitive.RadioItem
      {...itemProps}
      asChild={false}
      ref={forwardedRef}
      data-accent-color={color}
      className={classNames(
        'rt-BaseMenuItem',
        'rt-BaseMenuRadioItem',
        'rt-ContextMenuItem',
        'rt-ContextMenuRadioItem',
        className
      )}
    >
      <Slot.Slottable>{children}</Slot.Slottable>
      <ContextMenuPrimitive.ItemIndicator className="rt-BaseMenuItemIndicator rt-ContextMenuItemIndicator">
        <ThickCheckIcon className="rt-BaseMenuItemIndicatorIcon rt-ContextMenuItemIndicatorIcon" />
      </ContextMenuPrimitive.ItemIndicator>
    </ContextMenuPrimitive.RadioItem>
  );
});
ContextMenuRadioItem.displayName = 'ContextMenu.RadioItem';

type ContextMenuCheckboxItemElement = React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>;
type ContextMenuCheckboxItemOwnProps = GetPropDefTypes<typeof contextMenuCheckboxItemPropDefs>;
interface ContextMenuCheckboxItemProps
  extends ComponentPropsWithout<typeof ContextMenuPrimitive.CheckboxItem, RemovedProps>,
    ContextMenuCheckboxItemOwnProps {}
const ContextMenuCheckboxItem = React.forwardRef<
  ContextMenuCheckboxItemElement,
  ContextMenuCheckboxItemProps
>((props, forwardedRef) => {
  const {
    children,
    className,
    shortcut,
    color = contextMenuCheckboxItemPropDefs.color.default,
    ...itemProps
  } = props;
  return (
    <ContextMenuPrimitive.CheckboxItem
      {...itemProps}
      asChild={false}
      ref={forwardedRef}
      data-accent-color={color}
      className={classNames(
        'rt-BaseMenuItem',
        'rt-BaseMenuCheckboxItem',
        'rt-ContextMenuItem',
        'rt-ContextMenuCheckboxItem',
        className
      )}
    >
      <Slot.Slottable>{children}</Slot.Slottable>
      <ContextMenuPrimitive.ItemIndicator className="rt-BaseMenuItemIndicator rt-ContextMenuItemIndicator">
        <ThickCheckIcon className="rt-BaseMenuItemIndicatorIcon rt-ContextMenuItemIndicatorIcon" />
      </ContextMenuPrimitive.ItemIndicator>
      {shortcut && <div className="rt-BaseMenuShortcut rt-ContextMenuShortcut">{shortcut}</div>}
    </ContextMenuPrimitive.CheckboxItem>
  );
});
ContextMenuCheckboxItem.displayName = 'ContextMenu.CheckboxItem';

interface ContextMenuSubProps
  extends ComponentPropsWithout<typeof ContextMenuPrimitive.Sub, RemovedProps> {}
const ContextMenuSub: React.FC<ContextMenuSubProps> = (props) => (
  <ContextMenuPrimitive.Sub {...props} />
);
ContextMenuSub.displayName = 'ContextMenu.Sub';

type ContextMenuSubTriggerElement = React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>;
interface ContextMenuSubTriggerProps
  extends ComponentPropsWithout<typeof ContextMenuPrimitive.SubTrigger, RemovedProps> {}
const ContextMenuSubTrigger = React.forwardRef<
  ContextMenuSubTriggerElement,
  ContextMenuSubTriggerProps
>((props, forwardedRef) => {
  const { className, children, ...subTriggerProps } = props;
  return (
    <ContextMenuPrimitive.SubTrigger
      {...subTriggerProps}
      asChild={false}
      ref={forwardedRef}
      className={classNames(
        'rt-BaseMenuItem',
        'rt-BaseMenuSubTrigger',
        'rt-ContextMenuItem',
        'rt-ContextMenuSubTrigger',
        className
      )}
    >
      {children}
      <div className="rt-BaseMenuShortcut rt-ContextMenuShortcut">
        <ThickChevronRightIcon className="rt-BaseMenuSubTriggerIcon rt-ContextMenuSubTriggerIcon" />
      </div>
    </ContextMenuPrimitive.SubTrigger>
  );
});
ContextMenuSubTrigger.displayName = 'ContextMenu.SubTrigger';

type ContextMenuSubContentElement = React.ElementRef<typeof ContextMenuPrimitive.SubContent>;
interface ContextMenuSubContentProps
  extends ComponentPropsWithout<typeof ContextMenuPrimitive.SubContent, RemovedProps> {
  container?: React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Portal>['container'];
}
const ContextMenuSubContent = React.forwardRef<
  ContextMenuSubContentElement,
  ContextMenuSubContentProps
>((props, forwardedRef) => {
  const { size, variant, color, highContrast } = React.useContext(ContextMenuContentContext);
  const { className, children, container, forceMount, ...subContentProps } = extractProps(
    { size, variant, color, highContrast, ...props },
    contextMenuContentPropDefs
  );
  return (
    <ContextMenuPrimitive.Portal container={container} forceMount={forceMount}>
      <Theme asChild>
        <ContextMenuPrimitive.SubContent
          data-accent-color={color}
          alignOffset={-Number(size) * 4}
          // Side offset accounts for the outer solid box-shadow
          sideOffset={1}
          collisionPadding={10}
          {...subContentProps}
          asChild={false}
          ref={forwardedRef}
          className={classNames(
            'rt-PopperContent',
            'rt-BaseMenuContent',
            'rt-BaseMenuSubContent',
            'rt-ContextMenuContent',
            'rt-ContextMenuSubContent',
            className
          )}
        >
          <ScrollArea type="auto">
            <div className={classNames('rt-BaseMenuViewport', 'rt-ContextMenuViewport')}>
              {children}
            </div>
          </ScrollArea>
        </ContextMenuPrimitive.SubContent>
      </Theme>
    </ContextMenuPrimitive.Portal>
  );
});
ContextMenuSubContent.displayName = 'ContextMenu.SubContent';

type ContextMenuSeparatorElement = React.ElementRef<typeof ContextMenuPrimitive.Separator>;
interface ContextMenuSeparatorProps
  extends ComponentPropsWithout<typeof ContextMenuPrimitive.Separator, RemovedProps> {}
const ContextMenuSeparator = React.forwardRef<
  ContextMenuSeparatorElement,
  ContextMenuSeparatorProps
>(({ className, ...props }, forwardedRef) => (
  <ContextMenuPrimitive.Separator
    {...props}
    asChild={false}
    ref={forwardedRef}
    className={classNames('rt-BaseMenuSeparator', 'rt-ContextMenuSeparator', className)}
  />
));
ContextMenuSeparator.displayName = 'ContextMenu.Separator';

export {
  ContextMenuRoot as Root,
  ContextMenuTrigger as Trigger,
  ContextMenuContent as Content,
  ContextMenuLabel as Label,
  ContextMenuItem as Item,
  ContextMenuGroup as Group,
  ContextMenuRadioGroup as RadioGroup,
  ContextMenuRadioItem as RadioItem,
  ContextMenuCheckboxItem as CheckboxItem,
  ContextMenuSub as Sub,
  ContextMenuSubTrigger as SubTrigger,
  ContextMenuSubContent as SubContent,
  ContextMenuSeparator as Separator,
};

export type {
  ContextMenuRootProps as RootProps,
  ContextMenuTriggerProps as TriggerProps,
  ContextMenuContentProps as ContentProps,
  ContextMenuLabelProps as LabelProps,
  ContextMenuItemProps as ItemProps,
  ContextMenuGroupProps as GroupProps,
  ContextMenuRadioGroupProps as RadioGroupProps,
  ContextMenuRadioItemProps as RadioItemProps,
  ContextMenuCheckboxItemProps as CheckboxItemProps,
  ContextMenuSubProps as SubProps,
  ContextMenuSubTriggerProps as SubTriggerProps,
  ContextMenuSubContentProps as SubContentProps,
  ContextMenuSeparatorProps as SeparatorProps,
};


================================================
File: packages/radix-ui-themes/src/components/data-list.css
================================================
.rt-DataListRoot {
  overflow-wrap: anywhere;
  font-family: var(--default-font-family);
  font-weight: var(--font-weight-normal);
  font-style: normal;
  text-align: start;
}

.rt-DataListLabel {
  display: flex;
  color: var(--gray-a11);

  &:where(.rt-high-contrast) {
    color: var(--gray-12);
  }

  &:where([data-accent-color]) {
    color: var(--accent-a11);

    &:where(.rt-high-contrast) {
      color: var(--accent-12);
    }
  }
}

.rt-DataListValue {
  display: flex;
  margin: 0;

  /* Ensure value can be truncated */
  min-width: 0px;
}

/***************************************************************************************************
 *                                                                                                 *
 * ORIENTATION                                                                                     *
 *                                                                                                 *
 ***************************************************************************************************/

.rt-DataListItem {
  /* The actual margins that value part gets. These are re-assigned to other vars depending on the orientation */
  --data-list-value-margin-top: 0px;
  --data-list-value-margin-bottom: 0px;
  --data-list-first-item-value-margin-top: 0px;
  --data-list-last-item-value-margin-bottom: 0px;

  /* How much the value part can poke outside of the row when in a horizontal data list */
  --data-list-value-trim-start: -0.25em;
  --data-list-value-trim-end: -0.25em;
  --data-list-first-item-value-trim-start: 0px;
  --data-list-last-item-value-trim-end: 0px;
}

.rt-DataListValue {
  margin-top: var(--data-list-value-margin-top);
  margin-bottom: var(--data-list-value-margin-bottom);

  /*
   * The first/last item should not poke out of the Root boundaries –
   * unless it has "align-items: center", but that’s handled later.
   */
  :where(.rt-DataListItem:first-child) & {
    margin-top: var(--data-list-first-item-value-margin-top);
  }
  :where(.rt-DataListItem:last-child) & {
    margin-bottom: var(--data-list-last-item-value-margin-bottom);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*                Sizes                */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-DataListRoot {
    &:where(.rt-r-size-1) {
      gap: var(--space-3);
    }
    &:where(.rt-r-size-2) {
      gap: var(--space-4);
    }
    &:where(.rt-r-size-3) {
      gap: calc(var(--space-4) * 1.25);
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*             Orientation             */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-DataListRoot {
    &:where(.rt-r-orientation-vertical) {
      display: flex;
      flex-direction: column;

      & :where(.rt-DataListItem) {
        /* No poking out of the row when orientation is vertical */
        --data-list-value-margin-top: 0px;
        --data-list-value-margin-bottom: 0px;
        --data-list-first-item-value-margin-top: 0px;
        --data-list-last-item-value-margin-bottom: 0px;

        display: flex;
        flex-direction: column;
        gap: var(--space-1);
      }

      & :where(.rt-DataListLabel) {
        /* Ensure label can be truncated */
        min-width: 0px;
      }
    }

    &:where(.rt-r-orientation-horizontal) {
      display: grid;
      grid-template-columns: auto 1fr;

      & :where(.rt-DataListItem) {
        /* Allow the value to poke out of the row when orientation is horizontal */
        --data-list-value-margin-top: var(--data-list-value-trim-start);
        --data-list-value-margin-bottom: var(--data-list-value-trim-end);
        --data-list-first-item-value-margin-top: var(--data-list-first-item-value-trim-start);
        --data-list-last-item-value-margin-bottom: var(--data-list-last-item-value-trim-end);

        display: grid;
        /* Use subgrid so all the label columns remain aligned */
        grid-template-columns: inherit; /* Fallback */
        grid-template-columns: subgrid;
        gap: inherit;
        grid-column: span 2;
        align-items: baseline;
      }

      & :where(.rt-DataListLabel) {
        /* Set an implicit min. width when orientation is horizontal */
        min-width: 120px;
      }
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*              Alignment              */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.rt-DataListLabel,
.rt-DataListValue {
  &::before {
    /*
     * Zero-width joiner to establish a baseline.
     * Allows Flex children with text to align automatically.
     */
    content: '‍';
  }
}

@breakpoints {
  /*
   * Make sure that the margin adjustments cooperate with "align-items".
   * To do that, we need to remove the corresponding margin adjustment depending on the "align-items" value.
   * We can't set `--data-list-value-margin-top` directly because at breakpoints it would lose the orientation value.
   */
  .rt-DataListItem {
    /* Match the default: poke out at the top and bottom, but not when it’s the first or last item */
    &:where(.rt-r-ai-baseline) {
      --data-list-value-trim-start: -0.25em;
      --data-list-value-trim-end: -0.25em;
      --data-list-first-item-value-trim-start: 0px;
      --data-list-last-item-value-trim-end: 0px;
    }
    /* No poking out at the top; and not at the bottom when it’s the first or last item */
    &:where(.rt-r-ai-start) {
      --data-list-value-trim-start: 0px;
      --data-list-value-trim-end: -0.25em;
      --data-list-first-item-value-trim-start: 0px;
      --data-list-last-item-value-trim-end: 0px;
    }
    /* Allow to poke out from any side, as for centering to work the top and bottom margins have to be always equal */
    &:where(.rt-r-ai-center) {
      --data-list-value-trim-start: -0.25em;
      --data-list-value-trim-end: -0.25em;
      --data-list-first-item-value-trim-start: -0.25em;
      --data-list-last-item-value-trim-end: -0.25em;
    }
    /* No poking out at the bottom; and not at the top when it’s the first or last item */
    &:where(.rt-r-ai-end) {
      --data-list-value-trim-start: -0.25em;
      --data-list-value-trim-end: 0px;
      --data-list-first-item-value-trim-start: 0px;
      --data-list-last-item-value-trim-end: 0px;
    }
    /* No poking out when stretched */
    &:where(.rt-r-ai-stretch) {
      --data-list-value-trim-start: 0px;
      --data-list-value-trim-end: 0px;
      --data-list-first-item-value-trim-start: 0px;
      --data-list-last-item-value-trim-end: 0px;
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*                Trim                 */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.rt-DataListRoot {
  --data-list-leading-trim-start: calc(var(--default-leading-trim-start) - var(--line-height) / 2);
  --data-list-leading-trim-end: calc(var(--default-leading-trim-end) - var(--line-height) / 2);
}

.rt-DataListItem {
  &:where(:first-child) {
    margin-top: var(--leading-trim-start);
  }
  &:where(:last-child) {
    margin-bottom: var(--leading-trim-end);
  }
}

@breakpoints {
  .rt-DataListRoot {
    &:where(.rt-r-trim-normal) {
      --leading-trim-start: initial;
      --leading-trim-end: initial;
    }
    &:where(.rt-r-trim-start) {
      --leading-trim-start: var(--data-list-leading-trim-start);
      --leading-trim-end: initial;
    }
    &:where(.rt-r-trim-end) {
      --leading-trim-start: initial;
      --leading-trim-end: var(--data-list-leading-trim-end);
    }
    &:where(.rt-r-trim-both) {
      --leading-trim-start: var(--data-list-leading-trim-start);
      --leading-trim-end: var(--data-list-leading-trim-end);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/data-list.props.tsx
================================================
import { colorPropDef } from '../props/color.prop.js';
import { highContrastPropDef } from '../props/high-contrast.prop.js';
import { leadingTrimPropDef } from '../props/leading-trim.prop.js';
import { widthPropDefs } from '../props/width.props.js';

import type { PropDef } from '../props/prop-def.js';

const alignValues = ['start', 'center', 'end', 'baseline', 'stretch'] as const;
const orientationValues = ['horizontal', 'vertical'] as const;
const sizes = ['1', '2', '3'] as const;

const dataListRootPropDefs = {
  orientation: {
    type: 'enum',
    className: 'rt-r-orientation',
    values: orientationValues,
    default: 'horizontal',
    responsive: true,
  },
  size: {
    type: 'enum',
    className: 'rt-r-size',
    values: sizes,
    default: '2',
    responsive: true,
  },
  trim: {
    ...leadingTrimPropDef.trim,
    className: 'rt-r-trim', // Custom trim styles due to grid layout
  },
} satisfies {
  orientation: PropDef<(typeof orientationValues)[number]>;
  size: PropDef<(typeof sizes)[number]>;
  trim: typeof leadingTrimPropDef.trim;
};

const dataListItemPropDefs = {
  align: {
    type: 'enum',
    className: 'rt-r-ai',
    values: alignValues,
    responsive: true,
  },
} satisfies {
  align: PropDef<(typeof alignValues)[number]>;
};

const dataListLabelPropDefs = {
  ...widthPropDefs,
  ...colorPropDef,
  ...highContrastPropDef,
};

export { dataListRootPropDefs, dataListItemPropDefs, dataListLabelPropDefs };


================================================
File: packages/radix-ui-themes/src/components/data-list.tsx
================================================
import classNames from 'classnames';
import * as React from 'react';

import { Text } from './text.js';
import {
  dataListRootPropDefs,
  dataListItemPropDefs,
  dataListLabelPropDefs,
} from './data-list.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type DataListRootElement = HTMLDListElement;
type DataListRootOwnProps = GetPropDefTypes<typeof dataListRootPropDefs>;
interface DataListRootProps
  extends ComponentPropsWithout<'dl', RemovedProps>,
    MarginProps,
    DataListRootOwnProps {}
const DataListRoot = React.forwardRef<DataListRootElement, DataListRootProps>(
  (props, forwardedRef) => {
    const { className, ...dataListProps } = extractProps(
      props,
      dataListRootPropDefs,
      marginPropDefs
    );
    return (
      <Text asChild>
        <dl
          {...dataListProps}
          ref={forwardedRef}
          className={classNames('rt-DataListRoot', className)}
        />
      </Text>
    );
  }
);
DataListRoot.displayName = 'DataList.Root';

type DataListItemElement = HTMLDivElement;
type DataListItemOwnProps = GetPropDefTypes<typeof dataListItemPropDefs>;
interface DataListItemProps
  extends ComponentPropsWithout<'div', RemovedProps>,
    DataListItemOwnProps {}
const DataListItem = React.forwardRef<DataListItemElement, DataListItemProps>(
  (props, forwardedRef) => {
    const { className, ...itemProps } = extractProps(props, dataListItemPropDefs);
    return (
      <div {...itemProps} ref={forwardedRef} className={classNames('rt-DataListItem', className)} />
    );
  }
);
DataListItem.displayName = 'DataList.Item';

type DataListLabelElement = React.ElementRef<'dt'>;
type DataListLabelOwnProps = GetPropDefTypes<typeof dataListLabelPropDefs>;
interface DataListLabelProps
  extends ComponentPropsWithout<'dt', RemovedProps>,
    DataListLabelOwnProps {}
const DataListLabel = React.forwardRef<DataListLabelElement, DataListLabelProps>(
  (props, forwardedRef) => {
    const { className, color, ...labelProps } = extractProps(props, dataListLabelPropDefs);
    return (
      <dt
        {...labelProps}
        data-accent-color={color}
        ref={forwardedRef}
        className={classNames('rt-DataListLabel', className)}
      />
    );
  }
);
DataListLabel.displayName = 'DataList.Label';

type DataListValueElement = React.ElementRef<'dd'>;
interface DataListValueProps extends ComponentPropsWithout<'dd', RemovedProps> {}
const DataListValue = React.forwardRef<DataListValueElement, DataListValueProps>(
  ({ children, className, ...props }, forwardedRef) => (
    <dd {...props} ref={forwardedRef} className={classNames(className, 'rt-DataListValue')}>
      {children}
    </dd>
  )
);
DataListValue.displayName = 'DataList.Value';

export {
  DataListRoot as Root,
  DataListItem as Item,
  DataListLabel as Label,
  DataListValue as Value,
};
export type {
  DataListRootProps as RootProps,
  DataListItemProps as ItemProps,
  DataListLabelProps as LabelProps,
  DataListValueProps as ValueProps,
};


================================================
File: packages/radix-ui-themes/src/components/dialog.css
================================================
@import './_internal/base-dialog.css';


================================================
File: packages/radix-ui-themes/src/components/dialog.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { widthPropDefs } from '../props/width.props.js';
import { heightPropDefs } from '../props/height.props.js';

import type { PropDef, GetPropDefTypes } from '../props/prop-def.js';

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const alignValues = ['start', 'center'] as const;
const contentSizes = ['1', '2', '3', '4'] as const;

const dialogContentPropDefs = {
  ...asChildPropDef,
  align: {
    type: 'enum',
    className: 'rt-r-align',
    values: ['start', 'center'],
    default: 'center',
  },
  size: {
    type: 'enum',
    className: 'rt-r-size',
    values: contentSizes,
    default: '3',
    responsive: true,
  },
  width: widthPropDefs.width,
  minWidth: widthPropDefs.minWidth,
  maxWidth: { ...widthPropDefs.maxWidth, default: '600px' },
  ...heightPropDefs,
} satisfies {
  align: PropDef<(typeof alignValues)[number]>;
  size: PropDef<(typeof contentSizes)[number]>;
  width: PropDef<string>;
  minWidth: PropDef<string>;
  maxWidth: PropDef<string>;
};

type DialogContentOwnProps = GetPropDefTypes<
  typeof dialogContentPropDefs & typeof asChildPropDef & typeof widthPropDefs
>;

export { dialogContentPropDefs };
export type { DialogContentOwnProps };


================================================
File: packages/radix-ui-themes/src/components/dialog.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Dialog as DialogPrimitive } from 'radix-ui';

import { dialogContentPropDefs } from './dialog.props.js';
import { Heading } from './heading.js';
import { Text } from './text.js';
import { Theme } from './theme.js';
import { extractProps } from '../helpers/extract-props.js';
import { requireReactElement } from '../helpers/require-react-element.js';

import type { DialogContentOwnProps } from './dialog.props.js';
import type {
  ComponentPropsWithout,
  RemovedProps,
  ComponentPropsAs,
} from '../helpers/component-props.js';

interface DialogRootProps extends ComponentPropsWithout<typeof DialogPrimitive.Root, 'modal'> {}
const DialogRoot: React.FC<DialogRootProps> = (props) => <DialogPrimitive.Root {...props} modal />;
DialogRoot.displayName = 'Dialog.Root';

type DialogTriggerElement = React.ElementRef<typeof DialogPrimitive.Trigger>;
interface DialogTriggerProps
  extends ComponentPropsWithout<typeof DialogPrimitive.Trigger, RemovedProps> {}
const DialogTrigger = React.forwardRef<DialogTriggerElement, DialogTriggerProps>(
  ({ children, ...props }, forwardedRef) => (
    <DialogPrimitive.Trigger {...props} ref={forwardedRef} asChild>
      {requireReactElement(children)}
    </DialogPrimitive.Trigger>
  )
);
DialogTrigger.displayName = 'Dialog.Trigger';

type DialogContentElement = React.ElementRef<typeof DialogPrimitive.Content>;
interface DialogContentProps
  extends ComponentPropsWithout<typeof DialogPrimitive.Content, RemovedProps>,
    DialogContentOwnProps {
  container?: React.ComponentPropsWithoutRef<typeof DialogPrimitive.Portal>['container'];
}
const DialogContent = React.forwardRef<DialogContentElement, DialogContentProps>(
  ({ align, ...props }, forwardedRef) => {
    const { align: alignPropDef, ...propDefs } = dialogContentPropDefs;
    const { className: alignClassName } = extractProps({ align }, { align: alignPropDef });
    const { className, forceMount, container, ...contentProps } = extractProps(props, propDefs);
    return (
      <DialogPrimitive.Portal container={container} forceMount={forceMount}>
        <Theme asChild>
          <DialogPrimitive.Overlay className="rt-BaseDialogOverlay rt-DialogOverlay">
            <div className="rt-BaseDialogScroll rt-DialogScroll">
              <div
                className={`rt-BaseDialogScrollPadding rt-DialogScrollPadding ${alignClassName}`}
              >
                <DialogPrimitive.Content
                  {...contentProps}
                  ref={forwardedRef}
                  className={classNames('rt-BaseDialogContent', 'rt-DialogContent', className)}
                />
              </div>
            </div>
          </DialogPrimitive.Overlay>
        </Theme>
      </DialogPrimitive.Portal>
    );
  }
);
DialogContent.displayName = 'Dialog.Content';

type DialogTitleElement = React.ElementRef<typeof Heading>;
type DialogTitleProps = ComponentPropsWithout<typeof Heading, 'asChild'>;
const DialogTitle = React.forwardRef<DialogTitleElement, DialogTitleProps>(
  (props, forwardedRef) => (
    <DialogPrimitive.Title asChild>
      <Heading size="5" mb="3" trim="start" {...props} asChild={false} ref={forwardedRef} />
    </DialogPrimitive.Title>
  )
);
DialogTitle.displayName = 'Dialog.Title';

type DialogDescriptionElement = HTMLParagraphElement;
type DialogDescriptionProps = ComponentPropsAs<typeof Text, 'p'>;
const DialogDescription = React.forwardRef<DialogDescriptionElement, DialogDescriptionProps>(
  (props, forwardedRef) => (
    <DialogPrimitive.Description asChild>
      <Text as="p" size="3" {...props} asChild={false} ref={forwardedRef} />
    </DialogPrimitive.Description>
  )
);
DialogDescription.displayName = 'Dialog.Description';

type DialogCloseElement = React.ElementRef<typeof DialogPrimitive.Close>;
interface DialogCloseProps
  extends ComponentPropsWithout<typeof DialogPrimitive.Close, RemovedProps> {}
const DialogClose = React.forwardRef<DialogCloseElement, DialogCloseProps>(
  ({ children, ...props }, forwardedRef) => (
    <DialogPrimitive.Close {...props} ref={forwardedRef} asChild>
      {requireReactElement(children)}
    </DialogPrimitive.Close>
  )
);
DialogClose.displayName = 'Dialog.Close';

export {
  DialogRoot as Root,
  DialogTrigger as Trigger,
  DialogContent as Content,
  DialogTitle as Title,
  DialogDescription as Description,
  DialogClose as Close,
};

export type {
  DialogRootProps as RootProps,
  DialogTriggerProps as TriggerProps,
  DialogContentProps as ContentProps,
  DialogTitleProps as TitleProps,
  DialogDescriptionProps as DescriptionProps,
  DialogCloseProps as CloseProps,
};


================================================
File: packages/radix-ui-themes/src/components/dropdown-menu.css
================================================
@import './_internal/base-menu.css';

.rt-DropdownMenuContent {
  max-height: var(--radix-dropdown-menu-content-available-height);
  transform-origin: var(--radix-dropdown-menu-content-transform-origin);
}


================================================
File: packages/radix-ui-themes/src/components/dropdown-menu.props.tsx
================================================
export {
  baseMenuContentPropDefs as dropdownMenuContentPropDefs,
  baseMenuItemPropDefs as dropdownMenuItemPropDefs,
  baseMenuCheckboxItemPropDefs as dropdownMenuCheckboxItemPropDefs,
  baseMenuRadioItemPropDefs as dropdownMenuRadioItemPropDefs,
} from './_internal/base-menu.props.js';


================================================
File: packages/radix-ui-themes/src/components/dropdown-menu.tsx
================================================
'use client';

import * as React from 'react';
import classNames from 'classnames';
import { DropdownMenu as DropdownMenuPrimitive, Slot } from 'radix-ui';

import { ScrollArea } from './scroll-area.js';
import {
  dropdownMenuContentPropDefs,
  dropdownMenuItemPropDefs,
  dropdownMenuCheckboxItemPropDefs,
  dropdownMenuRadioItemPropDefs,
} from './dropdown-menu.props.js';
import { Theme, useThemeContext } from './theme.js';
import { ChevronDownIcon, ThickCheckIcon, ThickChevronRightIcon } from './icons.js';
import { extractProps } from '../helpers/extract-props.js';
import { requireReactElement } from '../helpers/require-react-element.js';

import type { IconProps } from './icons.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

interface DropdownMenuRootProps
  extends React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Root> {}
const DropdownMenuRoot: React.FC<DropdownMenuRootProps> = (props) => (
  <DropdownMenuPrimitive.Root {...props} />
);
DropdownMenuRoot.displayName = 'DropdownMenu.Root';

type DropdownMenuTriggerElement = React.ElementRef<typeof DropdownMenuPrimitive.Trigger>;
interface DropdownMenuTriggerProps
  extends ComponentPropsWithout<typeof DropdownMenuPrimitive.Trigger, RemovedProps> {}
const DropdownMenuTrigger = React.forwardRef<DropdownMenuTriggerElement, DropdownMenuTriggerProps>(
  ({ children, ...props }, forwardedRef) => (
    <DropdownMenuPrimitive.Trigger {...props} ref={forwardedRef} asChild>
      {requireReactElement(children)}
    </DropdownMenuPrimitive.Trigger>
  )
);
DropdownMenuTrigger.displayName = 'DropdownMenu.Trigger';

type DropdownMenuContentOwnProps = GetPropDefTypes<typeof dropdownMenuContentPropDefs>;
type DropdownMenuContentContextValue = DropdownMenuContentOwnProps;
const DropdownMenuContentContext = React.createContext<DropdownMenuContentContextValue>({});
type DropdownMenuContentElement = React.ElementRef<typeof DropdownMenuPrimitive.Content>;
interface DropdownMenuContentProps
  extends ComponentPropsWithout<typeof DropdownMenuPrimitive.Content, RemovedProps>,
    DropdownMenuContentContextValue {
  container?: React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Portal>['container'];
}
const DropdownMenuContent = React.forwardRef<DropdownMenuContentElement, DropdownMenuContentProps>(
  (props, forwardedRef) => {
    const themeContext = useThemeContext();
    const {
      size = dropdownMenuContentPropDefs.size.default,
      variant = dropdownMenuContentPropDefs.variant.default,
      highContrast = dropdownMenuContentPropDefs.highContrast.default,
    } = props;
    const { className, children, color, container, forceMount, ...contentProps } = extractProps(
      props,
      dropdownMenuContentPropDefs
    );
    const resolvedColor = color || themeContext.accentColor;
    return (
      <DropdownMenuPrimitive.Portal container={container} forceMount={forceMount}>
        <Theme asChild>
          <DropdownMenuPrimitive.Content
            data-accent-color={resolvedColor}
            align="start"
            sideOffset={4}
            collisionPadding={10}
            {...contentProps}
            asChild={false}
            ref={forwardedRef}
            className={classNames(
              'rt-PopperContent',
              'rt-BaseMenuContent',
              'rt-DropdownMenuContent',
              className
            )}
          >
            <ScrollArea type="auto">
              <div className={classNames('rt-BaseMenuViewport', 'rt-DropdownMenuViewport')}>
                <DropdownMenuContentContext.Provider
                  value={React.useMemo(
                    () => ({ size, variant, color: resolvedColor, highContrast }),
                    [size, variant, resolvedColor, highContrast]
                  )}
                >
                  {children}
                </DropdownMenuContentContext.Provider>
              </div>
            </ScrollArea>
          </DropdownMenuPrimitive.Content>
        </Theme>
      </DropdownMenuPrimitive.Portal>
    );
  }
);
DropdownMenuContent.displayName = 'DropdownMenu.Content';

type DropdownMenuLabelElement = React.ElementRef<typeof DropdownMenuPrimitive.Label>;
interface DropdownMenuLabelProps
  extends ComponentPropsWithout<typeof DropdownMenuPrimitive.Label, RemovedProps> {}
const DropdownMenuLabel = React.forwardRef<DropdownMenuLabelElement, DropdownMenuLabelProps>(
  ({ className, ...props }, forwardedRef) => (
    <DropdownMenuPrimitive.Label
      {...props}
      asChild={false}
      ref={forwardedRef}
      className={classNames('rt-BaseMenuLabel', 'rt-DropdownMenuLabel', className)}
    />
  )
);
DropdownMenuLabel.displayName = 'DropdownMenu.Label';

type DropdownMenuItemElement = React.ElementRef<typeof DropdownMenuPrimitive.Item>;
type DropdownMenuItemOwnProps = GetPropDefTypes<typeof dropdownMenuItemPropDefs>;
interface DropdownMenuItemProps
  extends ComponentPropsWithout<typeof DropdownMenuPrimitive.Item, RemovedProps>,
    DropdownMenuItemOwnProps {}
const DropdownMenuItem = React.forwardRef<DropdownMenuItemElement, DropdownMenuItemProps>(
  (props, forwardedRef) => {
    const {
      className,
      children,
      color = dropdownMenuItemPropDefs.color.default,
      shortcut,
      ...itemProps
    } = props;
    return (
      <DropdownMenuPrimitive.Item
        data-accent-color={color}
        {...itemProps}
        ref={forwardedRef}
        className={classNames('rt-reset', 'rt-BaseMenuItem', 'rt-DropdownMenuItem', className)}
      >
        <Slot.Slottable>{children}</Slot.Slottable>
        {shortcut && <div className="rt-BaseMenuShortcut rt-DropdownMenuShortcut">{shortcut}</div>}
      </DropdownMenuPrimitive.Item>
    );
  }
);
DropdownMenuItem.displayName = 'DropdownMenu.Item';

type DropdownMenuGroupElement = React.ElementRef<typeof DropdownMenuPrimitive.Group>;
interface DropdownMenuGroupProps
  extends ComponentPropsWithout<typeof DropdownMenuPrimitive.Group, RemovedProps> {}
const DropdownMenuGroup = React.forwardRef<DropdownMenuGroupElement, DropdownMenuGroupProps>(
  ({ className, ...props }, forwardedRef) => (
    <DropdownMenuPrimitive.Group
      {...props}
      asChild={false}
      ref={forwardedRef}
      className={classNames('rt-BaseMenuGroup', 'rt-DropdownMenuGroup', className)}
    />
  )
);
DropdownMenuGroup.displayName = 'DropdownMenu.Group';

type DropdownMenuRadioGroupElement = React.ElementRef<typeof DropdownMenuPrimitive.RadioGroup>;
interface DropdownMenuRadioGroupProps
  extends ComponentPropsWithout<typeof DropdownMenuPrimitive.RadioGroup, RemovedProps> {}
const DropdownMenuRadioGroup = React.forwardRef<
  DropdownMenuRadioGroupElement,
  DropdownMenuRadioGroupProps
>(({ className, ...props }, forwardedRef) => (
  <DropdownMenuPrimitive.RadioGroup
    {...props}
    asChild={false}
    ref={forwardedRef}
    className={classNames('rt-BaseMenuRadioGroup', 'rt-DropdownMenuRadioGroup', className)}
  />
));
DropdownMenuRadioGroup.displayName = 'DropdownMenu.RadioGroup';

type DropdownMenuRadioItemElement = React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>;
type DropdownMenuRadioItemOwnProps = GetPropDefTypes<typeof dropdownMenuRadioItemPropDefs>;
interface DropdownMenuRadioItemProps
  extends ComponentPropsWithout<typeof DropdownMenuPrimitive.RadioItem, RemovedProps>,
    DropdownMenuRadioItemOwnProps {}
const DropdownMenuRadioItem = React.forwardRef<
  DropdownMenuRadioItemElement,
  DropdownMenuRadioItemProps
>((props, forwardedRef) => {
  const {
    children,
    className,
    color = dropdownMenuRadioItemPropDefs.color.default,
    ...itemProps
  } = props;
  return (
    <DropdownMenuPrimitive.RadioItem
      {...itemProps}
      asChild={false}
      ref={forwardedRef}
      data-accent-color={color}
      className={classNames(
        'rt-BaseMenuItem',
        'rt-BaseMenuRadioItem',
        'rt-DropdownMenuItem',
        'rt-DropdownMenuRadioItem',
        className
      )}
    >
      {children}
      <DropdownMenuPrimitive.ItemIndicator className="rt-BaseMenuItemIndicator rt-DropdownMenuItemIndicator">
        <ThickCheckIcon className="rt-BaseMenuItemIndicatorIcon rt-DropdownMenuItemIndicatorIcon" />
      </DropdownMenuPrimitive.ItemIndicator>
    </DropdownMenuPrimitive.RadioItem>
  );
});
DropdownMenuRadioItem.displayName = 'DropdownMenu.RadioItem';

type DropdownMenuCheckboxItemElement = React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>;
type DropdownMenuCheckboxItemOwnProps = GetPropDefTypes<typeof dropdownMenuCheckboxItemPropDefs>;
interface DropdownMenuCheckboxItemProps
  extends ComponentPropsWithout<typeof DropdownMenuPrimitive.CheckboxItem, RemovedProps>,
    DropdownMenuCheckboxItemOwnProps {}
const DropdownMenuCheckboxItem = React.forwardRef<
  DropdownMenuCheckboxItemElement,
  DropdownMenuCheckboxItemProps
>((props, forwardedRef) => {
  const {
    children,
    className,
    shortcut,
    color = dropdownMenuCheckboxItemPropDefs.color.default,
    ...itemProps
  } = props;
  return (
    <DropdownMenuPrimitive.CheckboxItem
      {...itemProps}
      asChild={false}
      ref={forwardedRef}
      data-accent-color={color}
      className={classNames(
        'rt-BaseMenuItem',
        'rt-BaseMenuCheckboxItem',
        'rt-DropdownMenuItem',
        'rt-DropdownMenuCheckboxItem',
        className
      )}
    >
      {children}
      <DropdownMenuPrimitive.ItemIndicator className="rt-BaseMenuItemIndicator rt-DropdownMenuItemIndicator">
        <ThickCheckIcon className="rt-BaseMenuItemIndicatorIcon rt-ContextMenuItemIndicatorIcon" />
      </DropdownMenuPrimitive.ItemIndicator>
      {shortcut && <div className="rt-BaseMenuShortcut rt-DropdownMenuShortcut">{shortcut}</div>}
    </DropdownMenuPrimitive.CheckboxItem>
  );
});
DropdownMenuCheckboxItem.displayName = 'DropdownMenu.CheckboxItem';

interface DropdownMenuSubProps
  extends React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Sub> {}
const DropdownMenuSub: React.FC<DropdownMenuSubProps> = (props) => (
  <DropdownMenuPrimitive.Sub {...props} />
);
DropdownMenuSub.displayName = 'DropdownMenu.Sub';

type DropdownMenuSubTriggerElement = React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>;
interface DropdownMenuSubTriggerProps
  extends ComponentPropsWithout<typeof DropdownMenuPrimitive.SubTrigger, RemovedProps> {}
const DropdownMenuSubTrigger = React.forwardRef<
  DropdownMenuSubTriggerElement,
  DropdownMenuSubTriggerProps
>((props, forwardedRef) => {
  const { className, children, ...subTriggerProps } = props;
  return (
    <DropdownMenuPrimitive.SubTrigger
      {...subTriggerProps}
      asChild={false}
      ref={forwardedRef}
      className={classNames(
        'rt-BaseMenuItem',
        'rt-BaseMenuSubTrigger',
        'rt-DropdownMenuItem',
        'rt-DropdownMenuSubTrigger',
        className
      )}
    >
      {children}
      <div className="rt-BaseMenuShortcut rt-DropdownMenuShortcut">
        <ThickChevronRightIcon className="rt-BaseMenuSubTriggerIcon rt-DropdownMenuSubtriggerIcon" />
      </div>
    </DropdownMenuPrimitive.SubTrigger>
  );
});
DropdownMenuSubTrigger.displayName = 'DropdownMenu.SubTrigger';

type DropdownMenuSubContentElement = React.ElementRef<typeof DropdownMenuPrimitive.SubContent>;
interface DropdownMenuSubContentProps
  extends ComponentPropsWithout<typeof DropdownMenuPrimitive.SubContent, RemovedProps> {
  container?: React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Portal>['container'];
}
const DropdownMenuSubContent = React.forwardRef<
  DropdownMenuSubContentElement,
  DropdownMenuSubContentProps
>((props, forwardedRef) => {
  const { size, variant, color, highContrast } = React.useContext(DropdownMenuContentContext);
  const { className, children, container, forceMount, ...subContentProps } = extractProps(
    { size, variant, color, highContrast, ...props },
    dropdownMenuContentPropDefs
  );
  return (
    <DropdownMenuPrimitive.Portal container={container} forceMount={forceMount}>
      <Theme asChild>
        <DropdownMenuPrimitive.SubContent
          data-accent-color={color}
          alignOffset={-Number(size) * 4}
          // Side offset accounts for the outer solid box-shadow
          sideOffset={1}
          collisionPadding={10}
          {...subContentProps}
          asChild={false}
          ref={forwardedRef}
          className={classNames(
            'rt-PopperContent',
            'rt-BaseMenuContent',
            'rt-BaseMenuSubContent',
            'rt-DropdownMenuContent',
            'rt-DropdownMenuSubContent',
            className
          )}
        >
          <ScrollArea type="auto">
            <div className={classNames('rt-BaseMenuViewport', 'rt-DropdownMenuViewport')}>
              {children}
            </div>
          </ScrollArea>
        </DropdownMenuPrimitive.SubContent>
      </Theme>
    </DropdownMenuPrimitive.Portal>
  );
});
DropdownMenuSubContent.displayName = 'DropdownMenu.SubContent';

type DropdownMenuSeparatorElement = React.ElementRef<typeof DropdownMenuPrimitive.Separator>;
interface DropdownMenuSeparatorProps
  extends ComponentPropsWithout<typeof DropdownMenuPrimitive.Separator, RemovedProps> {}
const DropdownMenuSeparator = React.forwardRef<
  DropdownMenuSeparatorElement,
  DropdownMenuSeparatorProps
>(({ className, ...props }, forwardedRef) => (
  <DropdownMenuPrimitive.Separator
    {...props}
    asChild={false}
    ref={forwardedRef}
    className={classNames('rt-BaseMenuSeparator', 'rt-DropdownMenuSeparator', className)}
  />
));
DropdownMenuSeparator.displayName = 'DropdownMenu.Separator';

export {
  DropdownMenuRoot as Root,
  DropdownMenuTrigger as Trigger,
  ChevronDownIcon as TriggerIcon,
  DropdownMenuContent as Content,
  DropdownMenuLabel as Label,
  DropdownMenuItem as Item,
  DropdownMenuGroup as Group,
  DropdownMenuRadioGroup as RadioGroup,
  DropdownMenuRadioItem as RadioItem,
  DropdownMenuCheckboxItem as CheckboxItem,
  DropdownMenuSub as Sub,
  DropdownMenuSubTrigger as SubTrigger,
  DropdownMenuSubContent as SubContent,
  DropdownMenuSeparator as Separator,
};

export type {
  DropdownMenuRootProps as RootProps,
  DropdownMenuTriggerProps as TriggerProps,
  IconProps as TriggerIconProps,
  DropdownMenuContentProps as ContentProps,
  DropdownMenuLabelProps as LabelProps,
  DropdownMenuItemProps as ItemProps,
  DropdownMenuGroupProps as GroupProps,
  DropdownMenuRadioGroupProps as RadioGroupProps,
  DropdownMenuRadioItemProps as RadioItemProps,
  DropdownMenuCheckboxItemProps as CheckboxItemProps,
  DropdownMenuSubProps as SubProps,
  DropdownMenuSubTriggerProps as SubTriggerProps,
  DropdownMenuSubContentProps as SubContentProps,
  DropdownMenuSeparatorProps as SeparatorProps,
};


================================================
File: packages/radix-ui-themes/src/components/em.css
================================================
.rt-Em {
  box-sizing: border-box;
  font-family: var(--em-font-family);
  font-size: calc(var(--em-font-size-adjust) * 1em);
  font-style: var(--em-font-style);
  font-weight: var(--em-font-weight);
  line-height: 1.25;
  letter-spacing: calc(
    var(--em-letter-spacing) + var(--letter-spacing, var(--default-letter-spacing))
  );
  color: inherit;

  & :where(&) {
    font-size: inherit;
  }
}


================================================
File: packages/radix-ui-themes/src/components/em.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { textWrapPropDef } from '../props/text-wrap.prop.js';
import { truncatePropDef } from '../props/truncate.prop.js';

const emPropDefs = {
  ...asChildPropDef,
  ...truncatePropDef,
  ...textWrapPropDef,
};

export { emPropDefs };


================================================
File: packages/radix-ui-themes/src/components/em.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { emPropDefs } from './em.props.js';
import { extractProps } from '../helpers/extract-props.js';

import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type EmElement = React.ElementRef<'em'>;
type EmOwnProps = GetPropDefTypes<typeof emPropDefs>;
interface EmProps extends ComponentPropsWithout<'em', RemovedProps>, EmOwnProps {}
const Em = React.forwardRef<EmElement, EmProps>((props, forwardedRef) => {
  const { asChild, className, ...emProps } = extractProps(props, emPropDefs);
  const Comp = asChild ? Slot.Root : 'em';
  return <Comp {...emProps} ref={forwardedRef} className={classNames('rt-Em', className)} />;
});
Em.displayName = 'Em';

export { Em };
export type { EmProps };


================================================
File: packages/radix-ui-themes/src/components/flex.css
================================================
.rt-Flex {
  box-sizing: border-box;

  /* Default values to provide the initial styles in the object syntax, e.g. `<Flex display={{ md: 'none' }} />` */
  display: flex;
  justify-content: flex-start;
}


================================================
File: packages/radix-ui-themes/src/components/flex.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { gapPropDefs } from '../props/gap.props.js';

import type { PropDef, GetPropDefTypes } from '../props/prop-def.js';

const as = ['div', 'span'] as const;
const displayValues = ['none', 'inline-flex', 'flex'] as const;
const directionValues = ['row', 'column', 'row-reverse', 'column-reverse'] as const;
const alignValues = ['start', 'center', 'end', 'baseline', 'stretch'] as const;
const justifyValues = ['start', 'center', 'end', 'between'] as const;
const wrapValues = ['nowrap', 'wrap', 'wrap-reverse'] as const;

const flexPropDefs = {
  /**
   * Controls whether to render **div** or **span**
   *
   * @example
   * as="div"
   * as="span"
   */
  as: { type: 'enum', values: as, default: 'div' },
  ...asChildPropDef,
  /**
   * Sets the CSS **display** property.
   * Supports a subset of the corresponding CSS values and responsive objects.
   *
   * @example
   * display="inline-flex"
   * display={{ sm: 'none', lg: 'flex' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/display
   */
  display: {
    type: 'enum',
    className: 'rt-r-display',
    values: displayValues,
    responsive: true,
  },
  /**
   * Sets the CSS **flex-direction** property.
   * Supports the corresponding CSS values and responsive objects.
   *
   * @example
   * direction="column"
   * direction={{ sm: 'column', lg: 'row' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction
   */
  direction: {
    type: 'enum',
    className: 'rt-r-fd',
    values: directionValues,
    responsive: true,
  },
  /**
   * Sets the CSS **align-items** property.
   * Supports the corresponding CSS values and responsive objects.
   *
   * @example
   * align="center"
   * align={{ sm: 'baseline', lg: 'center' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/align-items
   */
  align: {
    type: 'enum',
    className: 'rt-r-ai',
    values: alignValues,
    responsive: true,
  },
  /**
   * Sets the CSS **justify-content** property.
   * Supports a subset of the corresponding CSS values and responsive objects.
   *
   * @example
   * justify="between"
   * justify={{ sm: 'start', lg: 'center' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content
   */
  justify: {
    type: 'enum',
    className: 'rt-r-jc',
    values: justifyValues,
    parseValue: parseJustifyValue,
    responsive: true,
  },
  /**
   * Sets the CSS **flex-wrap** property.
   * Supports the corresponding CSS values and responsive objects.
   *
   * @example
   * wrap="wrap"
   * wrap={{ sm: 'wrap', lg: 'nowrap' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap
   */
  wrap: {
    type: 'enum',
    className: 'rt-r-fw',
    values: wrapValues,
    responsive: true,
  },
  ...gapPropDefs,
} satisfies {
  as: PropDef<(typeof as)[number]>;
  display: PropDef<(typeof displayValues)[number]>;
  direction: PropDef<(typeof directionValues)[number]>;
  align: PropDef<(typeof alignValues)[number]>;
  justify: PropDef<(typeof justifyValues)[number]>;
  wrap: PropDef<(typeof wrapValues)[number]>;
};

function parseJustifyValue(value: string) {
  return value === 'between' ? 'space-between' : value;
}

// Use all of the imported prop defs to ensure that JSDoc works
type FlexOwnProps = GetPropDefTypes<
  typeof flexPropDefs & typeof gapPropDefs & typeof asChildPropDef
>;

export { flexPropDefs };
export type { FlexOwnProps };


================================================
File: packages/radix-ui-themes/src/components/flex.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';

import { extractProps } from '../helpers/extract-props.js';
import { layoutPropDefs } from '../props/layout.props.js';
import { marginPropDefs } from '../props/margin.props.js';
import { Slot } from './slot.js';
import { flexPropDefs } from './flex.props.js';

import type { FlexOwnProps } from './flex.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { LayoutProps } from '../props/layout.props.js';
import type { MarginProps } from '../props/margin.props.js';

type FlexElement = React.ElementRef<'div'>;
interface CommonFlexProps extends MarginProps, LayoutProps, FlexOwnProps {}
type FlexDivProps = { as?: 'div' } & ComponentPropsWithout<'div', RemovedProps>;
type FlexSpanProps = { as: 'span' } & ComponentPropsWithout<'span', RemovedProps>;
type FlexProps = CommonFlexProps & (FlexSpanProps | FlexDivProps);

const Flex = React.forwardRef<FlexElement, FlexProps>((props, forwardedRef) => {
  const {
    className,
    asChild,
    as: Tag = 'div',
    ...flexProps
  } = extractProps(props, flexPropDefs, layoutPropDefs, marginPropDefs);
  const Comp = asChild ? Slot : Tag;
  return <Comp {...flexProps} ref={forwardedRef} className={classNames('rt-Flex', className)} />;
});
Flex.displayName = 'Flex';

export { Flex };
export type { FlexProps };


================================================
File: packages/radix-ui-themes/src/components/grid.css
================================================
.rt-Grid {
  box-sizing: border-box;

  /* Default values to provide the initial styles in the object syntax, e.g. `<Grid columns={{ md: '2' }} />` */
  display: grid;
  align-items: stretch;
  justify-content: flex-start;
  grid-template-columns: minmax(0, 1fr);
  grid-template-rows: none;
}


================================================
File: packages/radix-ui-themes/src/components/grid.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { gapPropDefs } from '../props/gap.props.js';

import type { PropDef, GetPropDefTypes } from '../props/prop-def.js';

const as = ['div', 'span'] as const;
const displayValues = ['none', 'inline-grid', 'grid'] as const;
const columnsValues = ['1', '2', '3', '4', '5', '6', '7', '8', '9'] as const;
const rowsValues = ['1', '2', '3', '4', '5', '6', '7', '8', '9'] as const;
const flowValues = ['row', 'column', 'dense', 'row-dense', 'column-dense'] as const;
const alignValues = ['start', 'center', 'end', 'baseline', 'stretch'] as const;
const justifyValues = ['start', 'center', 'end', 'between'] as const;

const gridPropDefs = {
  /**
   * Controls whether to render **div** or **span**
   *
   * @example
   * as="div"
   * as="span"
   */
  as: { type: 'enum', values: as, default: 'div' },
  ...asChildPropDef,
  /**
   * Sets the CSS **display** property.
   * Supports a subset of the corresponding CSS values and responsive objects.
   *
   * @example
   * display="inline-grid"
   * display={{ sm: 'none', lg: 'grid' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/display
   */
  display: {
    type: 'enum',
    className: 'rt-r-display',
    values: displayValues,
    responsive: true,
  },
  /**
   * Sets the CSS **grid-template** property.
   * Supports a subset of the corresponding CSS values and responsive objects.
   *
   * @example
   * template='"header header" "sidebar content"'
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas
   */
  areas: {
    type: 'string',
    className: 'rt-r-gta',
    customProperties: ['--grid-template-areas'],
    responsive: true,
  },
  /**
   * Sets the CSS **grid-template-columns** property.
   * Supports numeric string values, CSS strings and responsive objects.
   *
   * Use numeric string values to create grid columns of even size.
   *
   * @example
   * columns="3"
   * columns="100px 1fr"
   * columns={{ xs: '1', md: 'auto 1fr' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns
   */
  columns: {
    type: 'enum | string',
    className: 'rt-r-gtc',
    customProperties: ['--grid-template-columns'],
    values: columnsValues,
    parseValue: parseGridValue,
    responsive: true,
  },
  /**
   * Sets the CSS **grid-template-rows** property.
   * Supports numeric string values, CSS strings and responsive objects.
   *
   * Use numeric string values to create grid rows of even size.
   *
   * @example
   * rows="3"
   * rows="100px 1fr"
   * rows={{ xs: '1', md: 'auto 1fr' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows
   */
  rows: {
    type: 'enum | string',
    className: 'rt-r-gtr',
    customProperties: ['--grid-template-rows'],
    values: rowsValues,
    parseValue: parseGridValue,
    responsive: true,
  },
  /**
   * Sets the CSS **grid-auto-flow** property.
   * Supports the corresponding CSS values and responsive objects.
   *
   * @example
   * flow="column"
   * flow={{ sm: 'column', lg: 'row' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow
   */
  flow: {
    type: 'enum',
    className: 'rt-r-gaf',
    values: flowValues,
    responsive: true,
  },
  /**
   * Sets the CSS **align-items** property.
   * Supports the corresponding CSS values and responsive objects.
   *
   * @example
   * align="center"
   * align={{ sm: 'baseline', lg: 'center' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/align-items
   */
  align: {
    type: 'enum',
    className: 'rt-r-ai',
    values: alignValues,
    responsive: true,
  },
  /**
   * Sets the CSS **justify-content** property.
   * Supports a subset of the corresponding CSS values and responsive objects.
   *
   * @example
   * justify="between"
   * justify={{ sm: 'start', lg: 'center' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content
   */
  justify: {
    type: 'enum',
    className: 'rt-r-jc',
    values: justifyValues,
    parseValue: parseJustifyValue,
    responsive: true,
  },
  ...gapPropDefs,
} satisfies {
  as: PropDef<(typeof as)[number]>;
  display: PropDef<(typeof displayValues)[number]>;
  areas: PropDef<string>;
  columns: PropDef<(typeof columnsValues)[number]>;
  rows: PropDef<(typeof rowsValues)[number]>;
  flow: PropDef<(typeof flowValues)[number]>;
  align: PropDef<(typeof alignValues)[number]>;
  justify: PropDef<(typeof justifyValues)[number]>;
};

function parseGridValue(value: string): string {
  if ((gridPropDefs.columns.values as readonly string[]).includes(value)) {
    return value;
  }

  return value?.match(/^\d+$/) ? `repeat(${value}, minmax(0, 1fr))` : value;
}

function parseJustifyValue(value: string) {
  return value === 'between' ? 'space-between' : value;
}

// Use all of the imported prop defs to ensure that JSDoc works
type GridOwnProps = GetPropDefTypes<typeof gridPropDefs & typeof asChildPropDef>;

export { gridPropDefs };
export type { GridOwnProps };


================================================
File: packages/radix-ui-themes/src/components/grid.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';

import { Slot } from './slot.js';
import { gridPropDefs } from './grid.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { layoutPropDefs } from '../props/layout.props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { LayoutProps } from '../props/layout.props.js';
import type { MarginProps } from '../props/margin.props.js';
import type { GridOwnProps } from './grid.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';

type GridElement = React.ElementRef<'div'>;
interface CommonGridProps extends MarginProps, LayoutProps, GridOwnProps {}
type GridDivProps = { as?: 'div' } & ComponentPropsWithout<'div', RemovedProps>;
type GridSpanProps = { as: 'span' } & ComponentPropsWithout<'span', RemovedProps>;
type GridProps = CommonGridProps & (GridSpanProps | GridDivProps);

const Grid = React.forwardRef<GridElement, GridProps>((props, forwardedRef) => {
  const {
    className,
    asChild,
    as: Tag = 'div',
    ...gridProps
  } = extractProps(props, gridPropDefs, layoutPropDefs, marginPropDefs);
  const Comp = asChild ? Slot : Tag;
  return <Comp {...gridProps} ref={forwardedRef} className={classNames('rt-Grid', className)} />;
});
Grid.displayName = 'Grid';

export { Grid };
export type { GridProps };


================================================
File: packages/radix-ui-themes/src/components/heading.css
================================================
.rt-Heading {
  --leading-trim-start: var(--heading-leading-trim-start);
  --leading-trim-end: var(--heading-leading-trim-end);
  font-family: var(--heading-font-family);
  font-style: var(--heading-font-style);
  font-weight: var(--font-weight-bold);
  line-height: var(--line-height);

  :where(&) {
    margin: 0;
  }

  &:where([data-accent-color]) {
    color: var(--accent-a11);
  }

  &:where([data-accent-color].rt-high-contrast),
  :where([data-accent-color]:not(.radix-themes)) &:where(.rt-high-contrast) {
    color: var(--accent-12);
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-Heading {
    &:where(.rt-r-size-1) {
      font-size: calc(var(--font-size-1) * var(--heading-font-size-adjust));
      --line-height: var(--heading-line-height-1);
      letter-spacing: calc(var(--letter-spacing-1) + var(--heading-letter-spacing));
    }
    &:where(.rt-r-size-2) {
      font-size: calc(var(--font-size-2) * var(--heading-font-size-adjust));
      --line-height: var(--heading-line-height-2);
      letter-spacing: calc(var(--letter-spacing-2) + var(--heading-letter-spacing));
    }
    &:where(.rt-r-size-3) {
      font-size: calc(var(--font-size-3) * var(--heading-font-size-adjust));
      --line-height: var(--heading-line-height-3);
      letter-spacing: calc(var(--letter-spacing-3) + var(--heading-letter-spacing));
    }
    &:where(.rt-r-size-4) {
      font-size: calc(var(--font-size-4) * var(--heading-font-size-adjust));
      --line-height: var(--heading-line-height-4);
      letter-spacing: calc(var(--letter-spacing-4) + var(--heading-letter-spacing));
    }
    &:where(.rt-r-size-5) {
      font-size: calc(var(--font-size-5) * var(--heading-font-size-adjust));
      --line-height: var(--heading-line-height-5);
      letter-spacing: calc(var(--letter-spacing-5) + var(--heading-letter-spacing));
    }
    &:where(.rt-r-size-6) {
      font-size: calc(var(--font-size-6) * var(--heading-font-size-adjust));
      --line-height: var(--heading-line-height-6);
      letter-spacing: calc(var(--letter-spacing-6) + var(--heading-letter-spacing));
    }
    &:where(.rt-r-size-7) {
      font-size: calc(var(--font-size-7) * var(--heading-font-size-adjust));
      --line-height: var(--heading-line-height-7);
      letter-spacing: calc(var(--letter-spacing-7) + var(--heading-letter-spacing));
    }
    &:where(.rt-r-size-8) {
      font-size: calc(var(--font-size-8) * var(--heading-font-size-adjust));
      --line-height: var(--heading-line-height-8);
      letter-spacing: calc(var(--letter-spacing-8) + var(--heading-letter-spacing));
    }
    &:where(.rt-r-size-9) {
      font-size: calc(var(--font-size-9) * var(--heading-font-size-adjust));
      --line-height: var(--heading-line-height-9);
      letter-spacing: calc(var(--letter-spacing-9) + var(--heading-letter-spacing));
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/heading.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { colorPropDef } from '../props/color.prop.js';
import { highContrastPropDef } from '../props/high-contrast.prop.js';
import { leadingTrimPropDef } from '../props/leading-trim.prop.js';
import { textAlignPropDef } from '../props/text-align.prop.js';
import { textWrapPropDef } from '../props/text-wrap.prop.js';
import { truncatePropDef } from '../props/truncate.prop.js';
import { weightPropDef } from '../props/weight.prop.js';

import type { PropDef } from '../props/prop-def.js';

const as = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] as const;
const sizes = ['1', '2', '3', '4', '5', '6', '7', '8', '9'] as const;

const headingPropDefs = {
  as: { type: 'enum', values: as, default: 'h1' },
  ...asChildPropDef,
  size: {
    type: 'enum',
    className: 'rt-r-size',
    values: sizes,
    default: '6',
    responsive: true,
  },
  ...weightPropDef,
  ...textAlignPropDef,
  ...leadingTrimPropDef,
  ...truncatePropDef,
  ...textWrapPropDef,
  ...colorPropDef,
  ...highContrastPropDef,
} satisfies {
  as: PropDef<(typeof as)[number]>;
  size: PropDef<(typeof sizes)[number]>;
};

export { headingPropDefs };


================================================
File: packages/radix-ui-themes/src/components/heading.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { headingPropDefs } from './heading.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type HeadingElement = React.ElementRef<'h1'>;
type HeadingOwnProps = GetPropDefTypes<typeof headingPropDefs>;
interface HeadingProps
  extends ComponentPropsWithout<'h1', RemovedProps>,
    MarginProps,
    HeadingOwnProps {}

const Heading = React.forwardRef<HeadingElement, HeadingProps>((props, forwardedRef) => {
  const {
    children,
    className,
    asChild,
    as: Tag = 'h1',
    color,
    ...headingProps
  } = extractProps(props, headingPropDefs, marginPropDefs);
  return (
    <Slot.Root
      data-accent-color={color}
      {...headingProps}
      ref={forwardedRef}
      className={classNames('rt-Heading', className)}
    >
      {asChild ? children : <Tag>{children}</Tag>}
    </Slot.Root>
  );
});
Heading.displayName = 'Heading';

export { Heading };
export type { HeadingProps };


================================================
File: packages/radix-ui-themes/src/components/hover-card.css
================================================
.rt-HoverCardContent {
  background-color: var(--color-panel-solid);
  box-shadow: var(--shadow-4);
  overflow: auto;
  position: relative;

  --inset-padding-top: var(--hover-card-content-padding);
  --inset-padding-right: var(--hover-card-content-padding);
  --inset-padding-bottom: var(--hover-card-content-padding);
  --inset-padding-left: var(--hover-card-content-padding);
  padding: var(--hover-card-content-padding);
  box-sizing: border-box;

  transform-origin: var(--radix-hover-card-content-transform-origin);
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-HoverCardContent {
    &:where(.rt-r-size-1) {
      --hover-card-content-padding: var(--space-3);
      border-radius: var(--radius-4);
    }
    &:where(.rt-r-size-2) {
      --hover-card-content-padding: var(--space-4);
      border-radius: var(--radius-4);
    }
    &:where(.rt-r-size-3) {
      --hover-card-content-padding: var(--space-5);
      border-radius: var(--radius-5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/hover-card.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { heightPropDefs } from '../props/height.props.js';
import { widthPropDefs } from '../props/width.props.js';

import type { PropDef, GetPropDefTypes } from '../props/prop-def.js';

const contentSizes = ['1', '2', '3'] as const;

const hoverCardContentPropDefs = {
  ...asChildPropDef,
  size: {
    type: 'enum',
    className: 'rt-r-size',
    values: contentSizes,
    default: '2',
    responsive: true,
  },
  width: widthPropDefs.width,
  minWidth: widthPropDefs.minWidth,
  maxWidth: { ...widthPropDefs.maxWidth, default: '480px' },
  ...heightPropDefs,
} satisfies {
  width: PropDef<string>;
  minWidth: PropDef<string>;
  maxWidth: PropDef<string>;
  size: PropDef<(typeof contentSizes)[number]>;
};

type HoverCardContentOwnProps = GetPropDefTypes<
  typeof hoverCardContentPropDefs &
    typeof asChildPropDef &
    typeof widthPropDefs &
    typeof heightPropDefs
>;

export { hoverCardContentPropDefs };
export type { HoverCardContentOwnProps };


================================================
File: packages/radix-ui-themes/src/components/hover-card.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { HoverCard as HoverCardPrimitive } from 'radix-ui';

import { hoverCardContentPropDefs } from './hover-card.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { requireReactElement } from '../helpers/require-react-element.js';
import { Theme } from './theme.js';

import type { HoverCardContentOwnProps } from './hover-card.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';

interface HoverCardRootProps
  extends React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Root> {}
const HoverCardRoot: React.FC<HoverCardRootProps> = (props) => (
  <HoverCardPrimitive.Root closeDelay={150} openDelay={200} {...props} />
);
HoverCardRoot.displayName = 'HoverCard.Root';

type HoverCardTriggerElement = React.ElementRef<typeof HoverCardPrimitive.Trigger>;
interface HoverCardTriggerProps
  extends ComponentPropsWithout<typeof HoverCardPrimitive.Trigger, RemovedProps> {}
const HoverCardTrigger = React.forwardRef<HoverCardTriggerElement, HoverCardTriggerProps>(
  ({ children, className, ...props }, forwardedRef) => (
    <HoverCardPrimitive.Trigger
      ref={forwardedRef}
      className={classNames('rt-HoverCardTrigger', className)}
      {...props}
      asChild
    >
      {requireReactElement(children)}
    </HoverCardPrimitive.Trigger>
  )
);
HoverCardTrigger.displayName = 'HoverCard.Trigger';

type HoverCardContentElement = React.ElementRef<typeof HoverCardPrimitive.Content>;
interface HoverCardContentProps
  extends ComponentPropsWithout<typeof HoverCardPrimitive.Content, RemovedProps>,
    HoverCardContentOwnProps {
  container?: React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Portal>['container'];
}
const HoverCardContent = React.forwardRef<HoverCardContentElement, HoverCardContentProps>(
  (props, forwardedRef) => {
    const { className, forceMount, container, ...contentProps } = extractProps(
      props,
      hoverCardContentPropDefs
    );
    return (
      <HoverCardPrimitive.Portal container={container} forceMount={forceMount}>
        <Theme asChild>
          <HoverCardPrimitive.Content
            align="start"
            sideOffset={8}
            collisionPadding={10}
            {...contentProps}
            ref={forwardedRef}
            className={classNames('rt-PopperContent', 'rt-HoverCardContent', className)}
          />
        </Theme>
      </HoverCardPrimitive.Portal>
    );
  }
);
HoverCardContent.displayName = 'HoverCard.Content';

export { HoverCardRoot as Root, HoverCardTrigger as Trigger, HoverCardContent as Content };
export type {
  HoverCardRootProps as RootProps,
  HoverCardTriggerProps as TriggerProps,
  HoverCardContentProps as ContentProps,
};


================================================
File: packages/radix-ui-themes/src/components/icon-button.css
================================================
@import './_internal/base-button.css';

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

.rt-IconButton {
  &:where(:not(.rt-variant-ghost)) {
    height: var(--base-button-height);
    width: var(--base-button-height);
  }
  &:where(.rt-variant-ghost) {
    padding: var(--icon-button-ghost-padding);

    /* We reset the defined margin variables to avoid inheriting them from a higher component */
    /* If a margin IS defined on the component itself, the utility class will win and reset it */
    --margin-top: 0px;
    --margin-right: 0px;
    --margin-bottom: 0px;
    --margin-left: 0px;

    /* Define the overrides to incorporate the negative margins */
    --margin-top-override: calc(var(--margin-top) - var(--icon-button-ghost-padding));
    --margin-right-override: calc(var(--margin-right) - var(--icon-button-ghost-padding));
    --margin-bottom-override: calc(var(--margin-bottom) - var(--icon-button-ghost-padding));
    --margin-left-override: calc(var(--margin-left) - var(--icon-button-ghost-padding));

    /* Reset the overrides on direct children */
    :where(&) > * {
      --margin-top-override: initial;
      --margin-right-override: initial;
      --margin-bottom-override: initial;
      --margin-left-override: initial;
    }

    margin: var(--margin-top-override) var(--margin-right-override) var(--margin-bottom-override)
      var(--margin-left-override);
  }
}

@breakpoints {
  .rt-IconButton:where(.rt-variant-ghost) {
    &:where(.rt-r-size-1) {
      --icon-button-ghost-padding: var(--space-1);
    }
    &:where(.rt-r-size-2) {
      --icon-button-ghost-padding: calc(var(--space-1) * 1.5);
    }
    &:where(.rt-r-size-3) {
      --icon-button-ghost-padding: var(--space-2);
    }
    &:where(.rt-r-size-4) {
      --icon-button-ghost-padding: var(--space-3);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/icon-button.props.tsx
================================================
export { baseButtonPropDefs as iconButtonPropDefs } from './_internal/base-button.props.js';


================================================
File: packages/radix-ui-themes/src/components/icon-button.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';

import { BaseButton } from './_internal/base-button.js';

type IconButtonElement = React.ElementRef<typeof BaseButton>;
interface IconButtonProps extends React.ComponentPropsWithoutRef<typeof BaseButton> {}
const IconButton = React.forwardRef<IconButtonElement, IconButtonProps>(
  ({ className, ...props }, forwardedRef) => (
    <BaseButton {...props} ref={forwardedRef} className={classNames('rt-IconButton', className)} />
  )
);
IconButton.displayName = 'IconButton';

export { IconButton };
export type { IconButtonProps };


================================================
File: packages/radix-ui-themes/src/components/icons.tsx
================================================
import React from 'react';

import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';

type IconElement = React.ElementRef<'svg'>;
interface IconProps extends ComponentPropsWithout<'svg', RemovedProps | 'children'> {}

const ThickDividerHorizontalIcon = React.forwardRef<IconElement, IconProps>(
  (props, forwardedRef) => {
    return (
      <svg
        width="9"
        height="9"
        viewBox="0 0 9 9"
        fill="currentcolor"
        xmlns="http://www.w3.org/2000/svg"
        {...props}
        ref={forwardedRef}
      >
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M0.75 4.5C0.75 4.08579 1.08579 3.75 1.5 3.75H7.5C7.91421 3.75 8.25 4.08579 8.25 4.5C8.25 4.91421 7.91421 5.25 7.5 5.25H1.5C1.08579 5.25 0.75 4.91421 0.75 4.5Z"
        />
      </svg>
    );
  }
);

ThickDividerHorizontalIcon.displayName = 'ThickDividerHorizontalIcon';

const ThickCheckIcon = React.forwardRef<IconElement, IconProps>((props, forwardedRef) => {
  return (
    <svg
      width="9"
      height="9"
      viewBox="0 0 9 9"
      fill="currentcolor"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
      ref={forwardedRef}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M8.53547 0.62293C8.88226 0.849446 8.97976 1.3142 8.75325 1.66099L4.5083 8.1599C4.38833 8.34356 4.19397 8.4655 3.9764 8.49358C3.75883 8.52167 3.53987 8.45309 3.3772 8.30591L0.616113 5.80777C0.308959 5.52987 0.285246 5.05559 0.563148 4.74844C0.84105 4.44128 1.31533 4.41757 1.62249 4.69547L3.73256 6.60459L7.49741 0.840706C7.72393 0.493916 8.18868 0.396414 8.53547 0.62293Z"
      />
    </svg>
  );
});
ThickCheckIcon.displayName = 'ThickCheckIcon';

const ChevronDownIcon = React.forwardRef<IconElement, IconProps>((props, forwardedRef) => {
  return (
    <svg
      width="9"
      height="9"
      viewBox="0 0 9 9"
      fill="currentcolor"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
      ref={forwardedRef}
    >
      <path d="M0.135232 3.15803C0.324102 2.95657 0.640521 2.94637 0.841971 3.13523L4.5 6.56464L8.158 3.13523C8.3595 2.94637 8.6759 2.95657 8.8648 3.15803C9.0536 3.35949 9.0434 3.67591 8.842 3.86477L4.84197 7.6148C4.64964 7.7951 4.35036 7.7951 4.15803 7.6148L0.158031 3.86477C-0.0434285 3.67591 -0.0536285 3.35949 0.135232 3.15803Z" />
    </svg>
  );
});
ChevronDownIcon.displayName = 'ChevronDownIcon';

const ThickChevronRightIcon = React.forwardRef<IconElement, IconProps>((props, forwardedRef) => {
  return (
    <svg
      width="9"
      height="9"
      viewBox="0 0 9 9"
      fill="currentcolor"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
      ref={forwardedRef}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M3.23826 0.201711C3.54108 -0.0809141 4.01567 -0.0645489 4.29829 0.238264L7.79829 3.98826C8.06724 4.27642 8.06724 4.72359 7.79829 5.01174L4.29829 8.76174C4.01567 9.06455 3.54108 9.08092 3.23826 8.79829C2.93545 8.51567 2.91909 8.04108 3.20171 7.73826L6.22409 4.5L3.20171 1.26174C2.91909 0.958928 2.93545 0.484337 3.23826 0.201711Z"
      />
    </svg>
  );
});
ThickChevronRightIcon.displayName = 'ThickChevronRightIcon';

export { ChevronDownIcon, ThickCheckIcon, ThickChevronRightIcon, ThickDividerHorizontalIcon };
export type { IconProps };


================================================
File: packages/radix-ui-themes/src/components/index.css
================================================
@import './reset.css';
@import './animations.css';
@import './layout.css';

/* Import Skeleton before other components so that its default border-radius doesn’t have a higher specificity */
@import './skeleton.css';

/* Import Text before other components as it’s commonly extended */
@import './text.css';

@import './alert-dialog.css';
@import './avatar.css';
@import './badge.css';
@import './blockquote.css';
@import './button.css';
@import './callout.css';
@import './card.css';
@import './checkbox-cards.css';
@import './checkbox-group.css';
@import './checkbox.css';
@import './code.css';
@import './context-menu.css';
@import './data-list.css';
@import './dialog.css';
@import './dropdown-menu.css';
@import './em.css';
@import './heading.css';
@import './hover-card.css';
@import './icon-button.css';
@import './inset.css';
@import './kbd.css';
@import './link.css';
@import './popover.css';
@import './progress.css';
@import './quote.css';
@import './radio-cards.css';
@import './radio-group.css';
@import './radio.css';
@import './scroll-area.css';
@import './segmented-control.css';
@import './select.css';
@import './separator.css';
@import './slider.css';
@import './spinner.css';
@import './strong.css';
@import './switch.css';
@import './tab-nav.css';
@import './table.css';
@import './tabs.css';
@import './text-area.css';
@import './text-field.css';
@import './theme-panel.css';
@import './tooltip.css';

.radix-themes:where([data-is-root-theme='true']) {
  /* Create a new stacking context on the root `Theme` so layered components work out of the box */
  position: relative;
  z-index: 0;

  /* Make sure root `Theme` background covers the viewport */
  min-height: 100vh;
  @supports (min-height: 100dvh) {
    min-height: 100dvh;
  }
}


================================================
File: packages/radix-ui-themes/src/components/index.tsx
================================================
export { AccessibleIcon, type AccessibleIconProps } from './accessible-icon.js';
export * as AlertDialog from './alert-dialog.js';
export { AspectRatio, type AspectRatioProps } from './aspect-ratio.js';
export { Avatar, type AvatarProps } from './avatar.js';
export { Badge, type BadgeProps } from './badge.js';
export { Blockquote, type BlockquoteProps } from './blockquote.js';
export { Box, type BoxProps } from './box.js';
export { Button, type ButtonProps } from './button.js';
export * as Callout from './callout.js';
export { Card, type CardProps } from './card.js';
export * as CheckboxCards from './checkbox-cards.js';
export * as CheckboxGroup from './checkbox-group.js';
export { Checkbox, type CheckboxProps } from './checkbox.js';
export { Code, type CodeProps } from './code.js';
export { Container, type ContainerProps } from './container.js';
export * as ContextMenu from './context-menu.js';
export * as DataList from './data-list.js';
export * as Dialog from './dialog.js';
export * as DropdownMenu from './dropdown-menu.js';
export { Em, type EmProps } from './em.js';
export { Flex, type FlexProps } from './flex.js';
export { Grid, type GridProps } from './grid.js';
export { Heading, type HeadingProps } from './heading.js';
export * as HoverCard from './hover-card.js';
export { IconButton, type IconButtonProps } from './icon-button.js';
export {
  type IconProps,
  ChevronDownIcon,
  ThickCheckIcon,
  ThickChevronRightIcon,
  ThickDividerHorizontalIcon,
} from './icons.js';
export { Inset, type InsetProps } from './inset.js';
export { Kbd, type KbdProps } from './kbd.js';
export { Link, type LinkProps } from './link.js';
export * as Popover from './popover.js';
export { Portal, type PortalProps } from './portal.js';
export { Progress, type ProgressProps } from './progress.js';
export { Quote, type QuoteProps } from './quote.js';
export * as RadioCards from './radio-cards.js';
export * as RadioGroup from './radio-group.js';
export { Radio, type RadioProps } from './radio.js';
export { Reset, type ResetProps } from './reset.js';
export { ScrollArea, type ScrollAreaProps } from './scroll-area.js';
export * as SegmentedControl from './segmented-control.js';
export { Section, type SectionProps } from './section.js';
export * as Select from './select.js';
export { Separator, type SeparatorProps } from './separator.js';
export { Skeleton, type SkeletonProps } from './skeleton.js';
export { Slider, type SliderProps } from './slider.js';
export { Slot, Slottable } from './slot.js';
export { Spinner, type SpinnerProps } from './spinner.js';
export { Strong, type StrongProps } from './strong.js';
export { Switch, type SwitchProps } from './switch.js';
export * as TabNav from './tab-nav.js';
export * as Table from './table.js';
export * as Tabs from './tabs.js';
export { TextArea, type TextAreaProps } from './text-area.js';
export * as TextField from './text-field.js';
export { Text, type TextProps } from './text.js';
export { ThemePanel, type ThemePanelProps } from './theme-panel.js';
export { Theme, ThemeContext, type ThemeProps, useThemeContext } from './theme.js';
export { Tooltip, type TooltipProps } from './tooltip.js';
export { VisuallyHidden, type VisuallyHiddenProps } from './visually-hidden.js';


================================================
File: packages/radix-ui-themes/src/components/inset.css
================================================
.rt-Inset {
  box-sizing: border-box;

  /* We reset the defined margin variables to avoid inheriting them from a higher component */
  /* If a margin IS defined on the component itself, the utility class will win and reset it */
  --margin-top: 0px;
  --margin-right: 0px;
  --margin-bottom: 0px;
  --margin-left: 0px;

  overflow: hidden;

  /*
   * Note: Next.js may collapse this into a shorthand "margin" declaration when bundling the CSS.
   * If any of the variables are set to "initial", the shorthand syntax will become invalid and botch the Inset styles.
   */
  margin-top: var(--margin-top-override);
  margin-right: var(--margin-right-override);
  margin-bottom: var(--margin-bottom-override);
  margin-left: var(--margin-left-override);

  /* Reset the overrides on direct children */
  :where(&) > * {
    --margin-top-override: initial;
    --margin-right-override: initial;
    --margin-bottom-override: initial;
    --margin-left-override: initial;
  }
}

@breakpoints {
  .rt-Inset {
    &:where(.rt-r-clip-border-box) {
      /* prettier-ignore */
      --inset-border-radius-calc: calc(var(--inset-border-radius, 0px) - var(--inset-border-width, 0px));
      --inset-padding-top-calc: var(--inset-padding-top, 0px);
      --inset-padding-right-calc: var(--inset-padding-right, 0px);
      --inset-padding-bottom-calc: var(--inset-padding-bottom, 0px);
      --inset-padding-left-calc: var(--inset-padding-left, 0px);
    }
    /* prettier-ignore */
    &:where(.rt-r-clip-padding-box) {
      --inset-border-radius-calc: var(--inset-border-radius, 0px);
      --inset-padding-top-calc: calc(var(--inset-padding-top, 0px) + var(--inset-border-width, 0px));
      --inset-padding-right-calc: calc(var(--inset-padding-right, 0px) + var(--inset-border-width, 0px));
      --inset-padding-bottom-calc: calc(var(--inset-padding-bottom, 0px) + var(--inset-border-width, 0px));
      --inset-padding-left-calc: calc(var(--inset-padding-left, 0px) + var(--inset-border-width, 0px));
    }
    &:where(.rt-r-side-top) {
      --margin-top-override: calc(var(--margin-top) - var(--inset-padding-top-calc));
      --margin-right-override: calc(var(--margin-right) - var(--inset-padding-right-calc));
      --margin-bottom-override: var(--margin-bottom);
      --margin-left-override: calc(var(--margin-left) - var(--inset-padding-left-calc));
      border-top-left-radius: var(--inset-border-radius-calc);
      border-top-right-radius: var(--inset-border-radius-calc);
      border-bottom-left-radius: 0px;
      border-bottom-right-radius: 0px;
    }
    &:where(.rt-r-side-bottom) {
      --margin-top-override: var(--margin-top);
      --margin-right-override: calc(var(--margin-right) - var(--inset-padding-right-calc));
      --margin-bottom-override: calc(var(--margin-bottom) - var(--inset-padding-bottom-calc));
      --margin-left-override: calc(var(--margin-left) - var(--inset-padding-left-calc));
      border-top-left-radius: 0px;
      border-top-right-radius: 0px;
      border-bottom-left-radius: var(--inset-border-radius-calc);
      border-bottom-right-radius: var(--inset-border-radius-calc);
    }
    &:where(.rt-r-side-left) {
      --margin-top-override: calc(var(--margin-top) - var(--inset-padding-top-calc));
      --margin-bottom-override: calc(var(--margin-bottom) - var(--inset-padding-bottom-calc));
      --margin-left-override: calc(var(--margin-left) - var(--inset-padding-left-calc));
      --margin-right-override: var(--margin-right);
      border-top-left-radius: var(--inset-border-radius-calc);
      border-top-right-radius: 0px;
      border-bottom-left-radius: var(--inset-border-radius-calc);
      border-bottom-right-radius: 0px;
    }
    &:where(.rt-r-side-right) {
      --margin-top-override: calc(var(--margin-top) - var(--inset-padding-top-calc));
      --margin-right-override: calc(var(--margin-right) - var(--inset-padding-right-calc));
      --margin-bottom-override: calc(var(--margin-bottom) - var(--inset-padding-bottom-calc));
      --margin-left-override: var(--margin-left);
      border-top-left-radius: 0px;
      border-top-right-radius: var(--inset-border-radius-calc);
      border-bottom-left-radius: 0px;
      border-bottom-right-radius: var(--inset-border-radius-calc);
    }
    &:where(.rt-r-side-x) {
      --margin-top-override: var(--margin-top);
      --margin-right-override: calc(var(--margin-right) - var(--inset-padding-right-calc));
      --margin-bottom-override: var(--margin-bottom);
      --margin-left-override: calc(var(--margin-left) - var(--inset-padding-left-calc));
      border-radius: 0px;
    }
    &:where(.rt-r-side-y) {
      --margin-top-override: calc(var(--margin-top) - var(--inset-padding-top-calc));
      --margin-right-override: var(--margin-right);
      --margin-bottom-override: calc(var(--margin-bottom) - var(--inset-padding-bottom-calc));
      --margin-left-override: var(--margin-left);
      border-radius: 0px;
    }
    &:where(.rt-r-side-all) {
      --margin-top-override: calc(var(--margin-top) - var(--inset-padding-top-calc));
      --margin-right-override: calc(var(--margin-right) - var(--inset-padding-right-calc));
      --margin-bottom-override: calc(var(--margin-bottom) - var(--inset-padding-bottom-calc));
      --margin-left-override: calc(var(--margin-left) - var(--inset-padding-left-calc));
      border-radius: var(--inset-border-radius-calc);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/inset.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sides = ['all', 'x', 'y', 'top', 'bottom', 'left', 'right'] as const;
const clipValues = ['border-box', 'padding-box'] as const;
const paddingValues = ['current', '0'] as const;

const insetPropDefs = {
  ...asChildPropDef,
  side: {
    type: 'enum',
    className: 'rt-r-side',
    values: sides,
    default: 'all',
    responsive: true,
  },
  clip: {
    type: 'enum',
    className: 'rt-r-clip',
    values: clipValues,
    default: 'border-box',
    responsive: true,
  },
  p: {
    type: 'enum',
    className: 'rt-r-p',
    values: paddingValues,
    parseValue: parsePaddingValue,
    responsive: true,
  },
  px: {
    type: 'enum',
    className: 'rt-r-px',
    values: paddingValues,
    parseValue: parsePaddingValue,
    responsive: true,
  },
  py: {
    type: 'enum',
    className: 'rt-r-py',
    values: paddingValues,
    parseValue: parsePaddingValue,
    responsive: true,
  },
  pt: {
    type: 'enum',
    className: 'rt-r-pt',
    values: paddingValues,
    parseValue: parsePaddingValue,
    responsive: true,
  },
  pr: {
    type: 'enum',
    className: 'rt-r-pr',
    values: paddingValues,
    parseValue: parsePaddingValue,
    responsive: true,
  },
  pb: {
    type: 'enum',
    className: 'rt-r-pb',
    values: paddingValues,
    parseValue: parsePaddingValue,
    responsive: true,
  },
  pl: {
    type: 'enum',
    className: 'rt-r-pl',
    values: paddingValues,
    parseValue: parsePaddingValue,
    responsive: true,
  },
} satisfies {
  side: PropDef<(typeof sides)[number]>;
  clip: PropDef<(typeof clipValues)[number]>;
  p: PropDef<(typeof paddingValues)[number]>;
  px: PropDef<(typeof paddingValues)[number]>;
  py: PropDef<(typeof paddingValues)[number]>;
  pt: PropDef<(typeof paddingValues)[number]>;
  pr: PropDef<(typeof paddingValues)[number]>;
  pb: PropDef<(typeof paddingValues)[number]>;
  pl: PropDef<(typeof paddingValues)[number]>;
};

function parsePaddingValue(value: string) {
  return value === 'current' ? 'inset' : value;
}

export { insetPropDefs };


================================================
File: packages/radix-ui-themes/src/components/inset.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { insetPropDefs } from './inset.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type InsetElement = React.ElementRef<'div'>;
type InsetOwnProps = GetPropDefTypes<typeof insetPropDefs>;
interface InsetProps
  extends ComponentPropsWithout<'div', RemovedProps>,
    MarginProps,
    InsetOwnProps {}

const Inset = React.forwardRef<InsetElement, InsetProps>((props, forwardedRef) => {
  const { asChild, className, ...insetProps } = extractProps(props, insetPropDefs, marginPropDefs);
  const Comp = asChild ? Slot.Root : 'div';
  return <Comp {...insetProps} ref={forwardedRef} className={classNames('rt-Inset', className)} />;
});
Inset.displayName = 'Inset';

export { Inset };
export type { InsetProps };


================================================
File: packages/radix-ui-themes/src/components/kbd.css
================================================
/* stylelint-disable selector-max-type */
/* Disable selector-max-type rule to target individual element types. */

:where(.radix-themes) {
  /* prettier-ignore */
  --kbd-box-shadow:
    inset 0 -0.05em 0.5em var(--gray-a2),
    inset 0 0.05em var(--white-a12),
    inset 0 0.25em 0.5em var(--gray-a2),
    inset 0 -0.05em var(--gray-a6),
    0 0 0 0.05em var(--gray-a5),
    0 0.08em 0.17em var(--gray-a7);
}
:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  /* prettier-ignore */
  --kbd-box-shadow:
    inset 0 -0.05em 0.5em var(--gray-a3),
    inset 0 0.05em var(--gray-a11),
    inset 0 0.25em 0.5em var(--gray-a2),
    inset 0 -0.1em var(--black-a11),
    0 0 0 0.075em var(--gray-a7),
    0 0.08em 0.17em var(--black-a12);
}

.rt-Kbd {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  font-family: var(--default-font-family);
  font-weight: normal;
  vertical-align: text-top;
  white-space: nowrap;
  user-select: none;

  position: relative;
  top: -0.03em;

  font-size: 0.75em;
  min-width: 1.75em;
  line-height: 1.7em;
  box-sizing: border-box;
  padding-left: 0.5em;
  padding-right: 0.5em;
  padding-bottom: 0.05em;
  word-spacing: -0.1em;
  border-radius: calc(var(--radius-factor) * 0.35em);
  letter-spacing: var(--letter-spacing, var(--default-letter-spacing));

  /* Make sure that the height is not stretched in a Flex/Grid layout */
  height: fit-content;

  color: var(--gray-12);
  background-color: var(--gray-1);
  box-shadow: var(--kbd-box-shadow);
  transition: box-shadow 120ms, background-color 120ms;

  &:where(:any-link, button) {
    @media (hover: hover) {
      &:where(:hover) {
        transition-duration: 40ms, 40ms;
        background-color: var(--color-background);
        box-shadow: var(--kbd-box-shadow), 0 0 0 0.05em var(--gray-a5);
      }
    }
    &:where([data-state='open']) {
      transition-duration: 40ms, 40ms;
      background-color: var(--color-background);
      box-shadow: var(--kbd-box-shadow), 0 0 0 0.05em var(--gray-a5);
    }
    &:where(:active:not([data-state='open'])) {
      padding-top: 0.05em;
      padding-bottom: 0;
      transition-duration: 40ms, 40ms;
      background-color: var(--gray-2);
      box-shadow: inset 0 0.05em var(--black-a3), 0 0 0 0.05em var(--gray-a7);
    }
    &:where(:focus-visible) {
      outline: 2px solid var(--focus-8);
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-Kbd {
    &:where(.rt-r-size-1) {
      font-size: calc(var(--font-size-1) * 0.8);
      --letter-spacing: var(--letter-spacing-1);
    }
    &:where(.rt-r-size-2) {
      font-size: calc(var(--font-size-2) * 0.8);
      --letter-spacing: var(--letter-spacing-2);
    }
    &:where(.rt-r-size-3) {
      font-size: calc(var(--font-size-3) * 0.8);
      --letter-spacing: var(--letter-spacing-3);
    }
    &:where(.rt-r-size-4) {
      font-size: calc(var(--font-size-4) * 0.8);
      --letter-spacing: var(--letter-spacing-4);
    }
    &:where(.rt-r-size-5) {
      font-size: calc(var(--font-size-5) * 0.8);
      --letter-spacing: var(--letter-spacing-5);
    }
    &:where(.rt-r-size-6) {
      font-size: calc(var(--font-size-6) * 0.8);
      --letter-spacing: var(--letter-spacing-6);
    }
    &:where(.rt-r-size-7) {
      font-size: calc(var(--font-size-7) * 0.8);
      --letter-spacing: var(--letter-spacing-7);
    }
    &:where(.rt-r-size-8) {
      font-size: calc(var(--font-size-8) * 0.8);
      --letter-spacing: var(--letter-spacing-8);
    }
    &:where(.rt-r-size-9) {
      font-size: calc(var(--font-size-9) * 0.8);
      --letter-spacing: var(--letter-spacing-9);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/kbd.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3', '4', '5', '6', '7', '8', '9'] as const;

const kbdPropDefs = {
  ...asChildPropDef,
  size: {
    type: 'enum',
    className: 'rt-r-size',
    values: sizes,
    responsive: true,
  },
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
};

export { kbdPropDefs };


================================================
File: packages/radix-ui-themes/src/components/kbd.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { kbdPropDefs } from './kbd.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type KbdElement = React.ElementRef<'kbd'>;
type KbdOwnProps = GetPropDefTypes<typeof kbdPropDefs>;
interface KbdProps extends ComponentPropsWithout<'kbd', RemovedProps>, MarginProps, KbdOwnProps {}
const Kbd = React.forwardRef<KbdElement, KbdProps>((props, forwardedRef) => {
  const { asChild, className, ...kbdProps } = extractProps(props, kbdPropDefs, marginPropDefs);
  const Comp = asChild ? Slot.Root : 'kbd';
  return (
    <Comp
      {...kbdProps}
      ref={forwardedRef}
      className={classNames('rt-reset', 'rt-Kbd', className)}
    />
  );
});
Kbd.displayName = 'Kbd';

export { Kbd };
export type { KbdProps };


================================================
File: packages/radix-ui-themes/src/components/layout.css
================================================
@import './box.css';
@import './flex.css';
@import './grid.css';
@import './section.css';
@import './container.css';


================================================
File: packages/radix-ui-themes/src/components/link.css
================================================
.rt-Link {
  /* Override the cursor on the HTML element even if rendering a <button> */
  /* stylelint-disable selector-max-type */
  &:where(:any-link, button) {
    cursor: var(--cursor-link);
  }

  &:where(:disabled, [data-disabled]) {
    cursor: var(--cursor-disabled);
  }

  &:where(:focus-visible) {
    border-radius: calc(0.07em * var(--radius-factor));
    outline-color: var(--focus-8);
    outline-width: 2px;
    outline-style: solid;
    outline-offset: 2px;
  }

  :where([data-accent-color]:not(.radix-themes, .rt-high-contrast)) &:where([data-accent-color='']) {
    color: var(--accent-12);
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * UNDERLINE                                                                                       *
 *                                                                                                 *
 ***************************************************************************************************/

.rt-Link {
  &:where(:any-link, button) {
    text-decoration-line: none;
    text-decoration-style: solid;
    text-decoration-thickness: min(2px, max(1px, 0.05em));
    text-underline-offset: calc(0.025em + 2px);
    text-decoration-color: var(--accent-a5);

    /* Enhancement for bright colors */
    @supports (color: color-mix(in oklab, white, black)) {
      text-decoration-color: color-mix(in oklab, var(--accent-a5), var(--gray-a6));
    }

    @media (pointer: coarse) {
      /* Better -webkit-tap-highlight-color */
      &:where(:active:not(:focus-visible, [data-state='open'])) {
        outline: 0.75em solid var(--accent-a4);
        outline-offset: -0.6em;
      }
    }

    &:where(.rt-underline-auto) {
      @media (hover: hover) {
        &:where(:hover) {
          text-decoration-line: underline;
        }
      }

      &:where(.rt-high-contrast),
      :where([data-accent-color]:not(.radix-themes, .rt-high-contrast)) &:where([data-accent-color='']) {
        text-decoration-line: underline;
        text-decoration-color: var(--accent-a6);

        /* Enhancement for bright colors */
        @supports (color: color-mix(in oklab, white, black)) {
          text-decoration-color: color-mix(in oklab, var(--accent-a6), var(--gray-a6));
        }
      }
    }

    &:where(.rt-underline-hover) {
      @media (hover: hover) {
        &:where(:hover) {
          text-decoration-line: underline;
        }
      }
    }

    &:where(.rt-underline-always) {
      text-decoration-line: underline;
    }
  }
}

/* all focused states underline */

.rt-Link:where(:focus-visible) {
  text-decoration-line: none;
}

/* Enhancement – hide underline for when Link's only child is a Code where underline is hard to see */
.rt-Link:where(:has(.rt-Code:not(.rt-variant-ghost):only-child)) {
  text-decoration-color: transparent;
}


================================================
File: packages/radix-ui-themes/src/components/link.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { accentColorPropDef } from '../props/color.prop.js';
import { highContrastPropDef } from '../props/high-contrast.prop.js';
import { leadingTrimPropDef } from '../props/leading-trim.prop.js';
import { textWrapPropDef } from '../props/text-wrap.prop.js';
import { truncatePropDef } from '../props/truncate.prop.js';
import { weightPropDef } from '../props/weight.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3', '4', '5', '6', '7', '8', '9'] as const;
const underline = ['auto', 'always', 'hover', 'none'] as const;

const linkPropDefs = {
  ...asChildPropDef,
  size: {
    type: 'enum',
    className: 'rt-r-size',
    values: sizes,
    responsive: true,
  },
  ...weightPropDef,
  ...leadingTrimPropDef,
  ...truncatePropDef,
  ...textWrapPropDef,
  underline: { type: 'enum', className: 'rt-underline', values: underline, default: 'auto' },
  ...accentColorPropDef,
  ...highContrastPropDef,
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  underline: PropDef<(typeof underline)[number]>;
};

export { linkPropDefs };


================================================
File: packages/radix-ui-themes/src/components/link.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';

import { Text } from './text.js';
import { extractProps } from '../helpers/extract-props.js';
import { linkPropDefs } from './link.props.js';

import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { MarginProps } from '../props/margin.props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type LinkElement = React.ElementRef<'a'>;
type LinkOwnProps = GetPropDefTypes<typeof linkPropDefs>;
interface LinkProps extends ComponentPropsWithout<'a', RemovedProps>, MarginProps, LinkOwnProps {}
const Link = React.forwardRef<LinkElement, LinkProps>((props, forwardedRef) => {
  const { children, className, color, asChild, ...linkProps } = extractProps(props, linkPropDefs);
  return (
    <Text
      {...linkProps}
      data-accent-color={color}
      ref={forwardedRef}
      asChild
      className={classNames('rt-reset', 'rt-Link', className)}
    >
      {asChild ? (
        children
      ) : (
        // eslint-disable-next-line jsx-a11y/anchor-is-valid
        <a>{children}</a>
      )}
    </Text>
  );
});
Link.displayName = 'Link';

export { Link };
export type { LinkProps };


================================================
File: packages/radix-ui-themes/src/components/popover.css
================================================
.rt-PopoverContent {
  background-color: var(--color-panel-solid);
  box-shadow: var(--shadow-5);
  min-width: var(--radix-popover-trigger-width);
  outline: 0;
  overflow: auto;
  position: relative;

  --inset-padding-top: var(--popover-content-padding);
  --inset-padding-right: var(--popover-content-padding);
  --inset-padding-bottom: var(--popover-content-padding);
  --inset-padding-left: var(--popover-content-padding);
  padding: var(--popover-content-padding);
  box-sizing: border-box;

  transform-origin: var(--radix-popover-content-transform-origin);
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-PopoverContent {
    &:where(.rt-r-size-1) {
      --popover-content-padding: var(--space-3);
      border-radius: var(--radius-4);
    }
    &:where(.rt-r-size-2) {
      --popover-content-padding: var(--space-4);
      border-radius: var(--radius-4);
    }
    &:where(.rt-r-size-3) {
      --popover-content-padding: var(--space-5);
      border-radius: var(--radius-5);
    }
    &:where(.rt-r-size-4) {
      --popover-content-padding: var(--space-6);
      border-radius: var(--radius-5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/popover.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { heightPropDefs } from '../props/height.props.js';
import { widthPropDefs } from '../props/width.props.js';

import type { PropDef, GetPropDefTypes } from '../props/prop-def.js';

const contentSizes = ['1', '2', '3', '4'] as const;

const popoverContentPropDefs = {
  ...asChildPropDef,
  size: {
    type: 'enum',
    className: 'rt-r-size',
    values: contentSizes,
    default: '2',
    responsive: true,
  },
  width: widthPropDefs.width,
  minWidth: widthPropDefs.minWidth,
  maxWidth: { ...widthPropDefs.maxWidth, default: '480px' },
  ...heightPropDefs,
} satisfies {
  width: PropDef<string>;
  minWidth: PropDef<string>;
  maxWidth: PropDef<string>;
  size: PropDef<(typeof contentSizes)[number]>;
};

type PopoverContentOwnProps = GetPropDefTypes<
  typeof popoverContentPropDefs &
    typeof asChildPropDef &
    typeof widthPropDefs &
    typeof heightPropDefs
>;

export { popoverContentPropDefs };
export type { PopoverContentOwnProps };


================================================
File: packages/radix-ui-themes/src/components/popover.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Popover as PopoverPrimitive } from 'radix-ui';

import { extractProps } from '../helpers/extract-props.js';
import { requireReactElement } from '../helpers/require-react-element.js';
import { popoverContentPropDefs } from './popover.props.js';
import { Theme } from './theme.js';

import type { PopoverContentOwnProps } from './popover.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';

interface PopoverRootProps extends React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Root> {}
const PopoverRoot: React.FC<PopoverRootProps> = (props: PopoverRootProps) => (
  <PopoverPrimitive.Root {...props} />
);
PopoverRoot.displayName = 'Popover.Root';

type PopoverTriggerElement = React.ElementRef<typeof PopoverPrimitive.Trigger>;
interface PopoverTriggerProps
  extends ComponentPropsWithout<typeof PopoverPrimitive.Trigger, RemovedProps> {}
const PopoverTrigger = React.forwardRef<PopoverTriggerElement, PopoverTriggerProps>(
  ({ children, ...props }, forwardedRef) => (
    <PopoverPrimitive.Trigger {...props} ref={forwardedRef} asChild>
      {requireReactElement(children)}
    </PopoverPrimitive.Trigger>
  )
);
PopoverTrigger.displayName = 'Popover.Trigger';

type PopoverContentElement = React.ElementRef<typeof PopoverPrimitive.Content>;
interface PopoverContentProps
  extends ComponentPropsWithout<typeof PopoverPrimitive.Content, RemovedProps>,
    PopoverContentOwnProps {
  container?: React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Portal>['container'];
}
const PopoverContent = React.forwardRef<PopoverContentElement, PopoverContentProps>(
  (props, forwardedRef) => {
    const { className, forceMount, container, ...contentProps } = extractProps(
      props,
      popoverContentPropDefs
    );
    return (
      <PopoverPrimitive.Portal container={container} forceMount={forceMount}>
        <Theme asChild>
          <PopoverPrimitive.Content
            align="start"
            sideOffset={8}
            collisionPadding={10}
            {...contentProps}
            ref={forwardedRef}
            className={classNames('rt-PopperContent', 'rt-PopoverContent', className)}
          />
        </Theme>
      </PopoverPrimitive.Portal>
    );
  }
);
PopoverContent.displayName = 'Popover.Content';

type PopoverCloseElement = React.ElementRef<typeof PopoverPrimitive.Close>;
interface PopoverCloseProps
  extends ComponentPropsWithout<typeof PopoverPrimitive.Close, RemovedProps> {}
const PopoverClose = React.forwardRef<PopoverCloseElement, PopoverCloseProps>(
  ({ children, ...props }, forwardedRef) => (
    <PopoverPrimitive.Close {...props} ref={forwardedRef} asChild>
      {requireReactElement(children)}
    </PopoverPrimitive.Close>
  )
);
PopoverClose.displayName = 'Popover.Close';

type PopoverAnchorElement = React.ElementRef<typeof PopoverPrimitive.Anchor>;
interface PopoverAnchorProps
  extends React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Anchor> {}
const PopoverAnchor = React.forwardRef<PopoverAnchorElement, PopoverAnchorProps>(
  ({ children, ...props }, forwardedRef) => (
    <PopoverPrimitive.Anchor {...props} ref={forwardedRef} />
  )
);

PopoverAnchor.displayName = 'Popover.Anchor';

export {
  PopoverRoot as Root,
  PopoverContent as Content,
  PopoverTrigger as Trigger,
  PopoverClose as Close,
  PopoverAnchor as Anchor,
};
export type {
  PopoverRootProps as RootProps,
  PopoverContentProps as ContentProps,
  PopoverTriggerProps as TriggerProps,
  PopoverCloseProps as CloseProps,
  PopoverAnchorProps as AnchorProps,
};


================================================
File: packages/radix-ui-themes/src/components/portal.tsx
================================================
import { Portal as PortalPrimitive } from 'radix-ui';
export const Portal = PortalPrimitive.Root;
export const Root = PortalPrimitive.Root;
export type PortalProps = PortalPrimitive.PortalProps;


================================================
File: packages/radix-ui-themes/src/components/progress.css
================================================
.rt-ProgressRoot {
  --progress-value: 0;
  --progress-max: 100;
  --progress-duration: 5s;
  pointer-events: none;
  position: relative;
  overflow: hidden;
  flex-grow: 1;
  height: var(--progress-height);
  border-radius: max(
    calc(var(--radius-factor) * var(--progress-height) / 3),
    calc(var(--radius-factor) * var(--radius-thumb))
  );

  /* A pseudo-element for shadows */
  &::after {
    position: absolute;
    inset: 0;
    content: '';
    border-radius: inherit;
  }
}

:where(.radix-themes) {
  --progress-indicator-after-linear-gradient: var(--white-a5), var(--white-a9), var(--white-a5);
}
:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  --progress-indicator-after-linear-gradient: var(--white-a3), var(--white-a6), var(--white-a3);
}
.rt-ProgressIndicator {
  display: block;
  height: 100%;
  width: 100%;

  transform: scaleX(calc(var(--progress-value) / var(--progress-max)));
  transform-origin: left center;
  transition: transform 120ms;

  &:where([data-state='indeterminate']) {
    animation-name: rt-progress-indicator-indeterminate-grow, var(--progress-indicator-indeterminate-animation-start),
      var(--progress-indicator-indeterminate-animation-repeat);
    animation-delay: 0s, calc(var(--progress-duration) + 5s), calc(var(--progress-duration) + 7.5s);
    animation-duration: var(--progress-duration), 2.5s, 5s;
    animation-iteration-count: 1, 1, infinite;
    animation-fill-mode: both, none, none;
    animation-direction: normal, normal, alternate;

    /* A pseudo-element for a shine animation */
    &::after {
      position: absolute;
      inset: 0;
      content: '';
      width: 400%;

      animation-name: rt-progress-indicator-indeterminate-shine-from-left;
      animation-delay: calc(var(--progress-duration) + 5s);
      animation-duration: 5s;
      animation-fill-mode: backwards;
      animation-iteration-count: infinite;

      background-image: linear-gradient(
        to right,
        transparent 25%,
        var(--progress-indicator-after-linear-gradient),
        transparent 75%
      );
    }
  }
}

@keyframes rt-progress-indicator-indeterminate-grow {
  0% {
    transform: scaleX(0.01);
  }
  20% {
    transform: scaleX(0.1);
  }
  30% {
    transform: scaleX(0.6);
  }
  40%,
  50% {
    transform: scaleX(0.9);
  }
  100% {
    transform: scaleX(1);
  }
}

@keyframes rt-progress-indicator-indeterminate-shine-from-left {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(0%);
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-ProgressRoot {
    &:where(.rt-r-size-1) {
      --progress-height: var(--space-1);
    }
    &:where(.rt-r-size-2) {
      --progress-height: calc(var(--space-2) * 0.75);
    }
    &:where(.rt-r-size-3) {
      --progress-height: var(--space-2);
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

/* surface */

.rt-ProgressRoot:where(.rt-variant-surface) {
  --progress-indicator-indeterminate-animation-start: rt-progress-indicator-surface-indeterminate-fade;
  --progress-indicator-indeterminate-animation-repeat: rt-progress-indicator-surface-indeterminate-pulse;
  background-color: var(--gray-a3);

  &::after {
    box-shadow: inset 0 0 0 1px var(--gray-a4);
  }

  & :where(.rt-ProgressIndicator) {
    background-color: var(--accent-track);
  }
}

@keyframes rt-progress-indicator-surface-indeterminate-fade {
  100% {
    background-color: var(--accent-7);
  }
}

@keyframes rt-progress-indicator-surface-indeterminate-pulse {
  0% {
    background-color: var(--accent-7);
  }
  100% {
    background-color: var(--accent-track);
  }
}

/* classic */

.rt-ProgressRoot:where(.rt-variant-classic) {
  --progress-indicator-indeterminate-animation-start: rt-progress-indicator-classic-indeterminate-fade;
  --progress-indicator-indeterminate-animation-repeat: rt-progress-indicator-classic-indeterminate-pulse;
  background-color: var(--gray-a3);

  &::after {
    box-shadow: var(--shadow-1);
  }

  & :where(.rt-ProgressIndicator) {
    background-color: var(--accent-track);
  }
}

@keyframes rt-progress-indicator-classic-indeterminate-fade {
  100% {
    background-color: var(--accent-7);
  }
}

@keyframes rt-progress-indicator-classic-indeterminate-pulse {
  0% {
    background-color: var(--accent-7);
  }
  100% {
    background-color: var(--accent-track);
  }
}

/* soft */

.rt-ProgressRoot:where(.rt-variant-soft) {
  --progress-indicator-indeterminate-animation-start: rt-progress-indicator-soft-indeterminate-fade;
  --progress-indicator-indeterminate-animation-repeat: rt-progress-indicator-soft-indeterminate-pulse;
  background-color: var(--gray-a4);
  /* Blend with white to increase contrast in dark mode */
  background-image: linear-gradient(var(--white-a1), var(--white-a1));

  & :where(.rt-ProgressIndicator) {
    background-image: linear-gradient(var(--accent-a5), var(--accent-a5));
    background-color: var(--accent-8);

    &::after {
      opacity: 0.75;
    }
  }
}

@keyframes rt-progress-indicator-soft-indeterminate-fade {
  100% {
    background-color: var(--accent-5);
  }
}

@keyframes rt-progress-indicator-soft-indeterminate-pulse {
  0% {
    background-color: var(--accent-5);
  }
  100% {
    background-color: var(--accent-7);
  }
}

/* all high-contrast */
.rt-ProgressRoot:where(.rt-high-contrast) {
  --progress-indicator-indeterminate-animation-start: rt-progress-indicator-high-contrast-indeterminate-fade;
  --progress-indicator-indeterminate-animation-repeat: rt-progress-indicator-high-contrast-indeterminate-pulse;

  & :where(.rt-ProgressIndicator) {
    background-color: var(--accent-12);

    &::after {
      opacity: 0.75;
    }
  }
}

@keyframes rt-progress-indicator-high-contrast-indeterminate-fade {
  100% {
    opacity: 0.8;
  }
}

@keyframes rt-progress-indicator-high-contrast-indeterminate-pulse {
  0% {
    opacity: 0.8;
  }
  100% {
    opacity: 1;
  }
}


================================================
File: packages/radix-ui-themes/src/components/progress.props.tsx
================================================
import { colorPropDef } from '../props/color.prop.js';
import { highContrastPropDef } from '../props/high-contrast.prop.js';
import { radiusPropDef } from '../props/radius.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;
const variants = ['classic', 'surface', 'soft'] as const;

const progressPropDefs = {
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '2', responsive: true },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'surface' },
  ...colorPropDef,
  ...highContrastPropDef,
  ...radiusPropDef,
  duration: { type: 'string' },
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
  duration: PropDef<string>;
};

export { progressPropDefs };


================================================
File: packages/radix-ui-themes/src/components/progress.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Progress as ProgressPrimitive } from 'radix-ui';

import { progressPropDefs } from './progress.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { mergeStyles } from '../helpers/merge-styles.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type ProgressElement = React.ElementRef<typeof ProgressPrimitive.Root>;
type ProgressOwnProps = GetPropDefTypes<typeof progressPropDefs>;
interface ProgressProps
  extends ComponentPropsWithout<typeof ProgressPrimitive.Root, RemovedProps | 'children'>,
    MarginProps,
    ProgressOwnProps {
  duration?: `${number}s` | `${number}ms`;
}
const Progress = React.forwardRef<ProgressElement, ProgressProps>((props, forwardedRef) => {
  const { className, style, color, radius, duration, ...progressProps } = extractProps(
    props,
    progressPropDefs,
    marginPropDefs
  );

  return (
    <ProgressPrimitive.Root
      data-accent-color={color}
      data-radius={radius}
      ref={forwardedRef}
      className={classNames('rt-ProgressRoot', className)}
      style={mergeStyles(
        {
          '--progress-duration': 'value' in progressProps ? undefined : duration,
          '--progress-value': 'value' in progressProps ? progressProps.value : undefined,
          '--progress-max': 'max' in progressProps ? progressProps.max : undefined,
        },
        style
      )}
      {...progressProps}
      asChild={false}
    >
      <ProgressPrimitive.Indicator className="rt-ProgressIndicator" />
    </ProgressPrimitive.Root>
  );
});
Progress.displayName = 'Progress';

export { Progress };
export type { ProgressProps };


================================================
File: packages/radix-ui-themes/src/components/quote.css
================================================
.rt-Quote {
  box-sizing: border-box;
  font-family: var(--quote-font-family);
  font-size: calc(var(--quote-font-size-adjust) * 1em);
  font-style: var(--quote-font-style);
  font-weight: var(--quote-font-weight);
  line-height: 1.25;
  letter-spacing: calc(
    var(--quote-letter-spacing) + var(--letter-spacing, var(--default-letter-spacing))
  );
  color: inherit;

  & :where(&) {
    font-size: inherit;
  }
}


================================================
File: packages/radix-ui-themes/src/components/quote.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { textWrapPropDef } from '../props/text-wrap.prop.js';
import { truncatePropDef } from '../props/truncate.prop.js';

const quotePropDefs = {
  ...asChildPropDef,
  ...truncatePropDef,
  ...textWrapPropDef,
};

export { quotePropDefs };


================================================
File: packages/radix-ui-themes/src/components/quote.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { quotePropDefs } from './quote.props.js';
import { extractProps } from '../helpers/extract-props.js';

import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type QuoteElement = React.ElementRef<'q'>;
type QuoteOwnProps = GetPropDefTypes<typeof quotePropDefs>;
interface QuoteProps extends ComponentPropsWithout<'q', RemovedProps>, QuoteOwnProps {}
const Quote = React.forwardRef<QuoteElement, QuoteProps>((props, forwardedRef) => {
  const { asChild, className, ...quoteProps } = extractProps(props, quotePropDefs);
  const Comp = asChild ? Slot.Root : 'q';
  return <Comp {...quoteProps} ref={forwardedRef} className={classNames('rt-Quote', className)} />;
});
Quote.displayName = 'Quote';

export { Quote };
export type { QuoteProps };


================================================
File: packages/radix-ui-themes/src/components/radio-cards.css
================================================
@import './_internal/base-card.css';

.rt-RadioCardsRoot {
  line-height: var(--line-height);
  letter-spacing: var(--letter-spacing);
  cursor: default;
}

.rt-RadioCardsItem {
  --base-card-padding-top: var(--radio-cards-item-padding-y);
  --base-card-padding-right: var(--radio-cards-item-padding-x);
  --base-card-padding-bottom: var(--radio-cards-item-padding-y);
  --base-card-padding-left: var(--radio-cards-item-padding-x);
  --base-card-border-radius: var(--radio-cards-item-border-radius);
  --base-card-border-width: var(--radio-cards-item-border-width);

  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--space-2);

  & > * {
    /* Avoid unintentional drag interactions (e.g. on images) */
    pointer-events: none;
  }
  /* stylelint-disable-next-line selector-max-type */
  & > :where(svg) {
    /* Don’t squish icons */
    flex-shrink: 0;
  }
  &::after {
    outline-offset: -1px;
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*                Sizes                */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-RadioCardsRoot {
    /* 40px height for the card with one line of text */
    &:where(.rt-r-size-1) {
      font-size: var(--font-size-2);
      --line-height: var(--line-height-2);
      --letter-spacing: var(--letter-spacing-2);
      --radio-cards-item-padding-x: var(--space-3);
      --radio-cards-item-padding-y: calc(var(--space-3) / 1.2);
      --radio-cards-item-border-radius: var(--radius-3);
    }
    /* 48px height for the card with one line of text */
    &:where(.rt-r-size-2) {
      font-size: var(--font-size-2);
      --line-height: var(--line-height-2);
      --letter-spacing: var(--letter-spacing-2);
      --radio-cards-item-padding-x: var(--space-4);
      --radio-cards-item-padding-y: calc(var(--space-4) * 0.875);
      --radio-cards-item-border-radius: var(--radius-3);
    }
    /* 64px height for the card with one line of text */
    &:where(.rt-r-size-3) {
      font-size: var(--font-size-3);
      --line-height: var(--line-height-3);
      --letter-spacing: var(--letter-spacing-3);
      --radio-cards-item-padding-x: var(--space-5);
      --radio-cards-item-padding-y: calc(var(--space-5) / 1.2);
      --radio-cards-item-border-radius: var(--radius-4);
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*         Variants / Surface          */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

:where(.rt-RadioCardsRoot.rt-variant-surface) {
  .rt-RadioCardsItem {
    --radio-cards-item-border-width: 1px;
    --radio-cards-item-background-color: var(--color-surface);

    &::before {
      background-color: var(--radio-cards-item-background-color);
    }
    &::after {
      box-shadow: var(--base-card-surface-box-shadow);
    }
    @media (hover: hover) {
      &:where(:not(:disabled):not([data-state='checked']):hover) {
        &::after {
          box-shadow: var(--base-card-surface-hover-box-shadow);
        }
      }
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*         Variants / Classic          */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

:where(.rt-RadioCardsRoot.rt-variant-classic) {
  .rt-RadioCardsItem {
    --radio-cards-item-border-width: 1px;
    --radio-cards-item-background-color: var(--color-surface);

    transition: box-shadow 120ms;
    box-shadow: var(--base-card-classic-box-shadow-outer);

    &::before {
      background-color: var(--radio-cards-item-background-color);
    }
    &::after {
      box-shadow: var(--base-card-classic-box-shadow-inner);
    }
    @media (hover: hover) {
      &:where(:not(:disabled):not([data-state='checked']):hover) {
        transition-duration: 40ms;
        box-shadow: var(--base-card-classic-hover-box-shadow-outer);
        &::after {
          box-shadow: var(--base-card-classic-hover-box-shadow-inner);
        }
      }
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*             All checked             */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.rt-RadioCardsItem:where([data-state='checked']) {
  &::after {
    outline: 2px solid var(--accent-indicator);
  }
  :where(.rt-RadioCardsRoot.rt-high-contrast) & {
    &::after {
      outline-color: var(--accent-12);
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*              All focus              */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.rt-RadioCardsItem:where(:focus-visible) {
  &::after {
    outline: 2px solid var(--focus-8);
  }
  &:where([data-state='checked']) {
    &::before {
      background-image: linear-gradient(var(--focus-a3), var(--focus-a3));
    }
    &::after {
      outline-color: var(--focus-10);
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*            All disabled             */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.rt-RadioCardsItem:where(:disabled) {
  cursor: var(--cursor-disabled);
  color: var(--gray-a9);

  &::selection {
    background-color: var(--gray-a5);
  }
  &::before {
    background-image: linear-gradient(var(--gray-a2), var(--gray-a2));
  }
  &::after {
    outline-color: var(--gray-8);
  }
}


================================================
File: packages/radix-ui-themes/src/components/radio-cards.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { colorPropDef } from '../props/color.prop.js';
import { highContrastPropDef } from '../props/high-contrast.prop.js';
import { gridPropDefs } from './grid.props.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;
const variants = ['surface', 'classic'] as const;

const radioCardsRootPropDefs = {
  ...asChildPropDef,
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '2', responsive: true },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'surface' },
  ...colorPropDef,
  ...highContrastPropDef,
  columns: { ...gridPropDefs.columns, default: 'repeat(auto-fit, minmax(160px, 1fr))' },
  gap: { ...gridPropDefs.gap, default: '4' },
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
  columns: PropDef<(typeof gridPropDefs.columns.values)[number]>;
  gap: PropDef<(typeof gridPropDefs.gap.values)[number]>;
};

export { radioCardsRootPropDefs };


================================================
File: packages/radix-ui-themes/src/components/radio-cards.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { RadioGroup as RadioGroupPrimitive } from 'radix-ui';

import { radioCardsRootPropDefs } from './radio-cards.props.js';
import { Grid } from './grid.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type RadioCardsRootElement = React.ElementRef<typeof RadioGroupPrimitive.Root>;
type RadioCardsRootOwnProps = GetPropDefTypes<typeof radioCardsRootPropDefs>;
interface RadioCardsRootProps
  extends ComponentPropsWithout<
      typeof RadioGroupPrimitive.Root,
      'asChild' | 'color' | 'defaultChecked'
    >,
    MarginProps,
    RadioCardsRootOwnProps {}
const RadioCardsRoot = React.forwardRef<RadioCardsRootElement, RadioCardsRootProps>(
  (props, forwardedRef) => {
    const { className, color, ...rootProps } = extractProps(
      props,
      radioCardsRootPropDefs,
      marginPropDefs
    );
    return (
      <Grid asChild>
        <RadioGroupPrimitive.Root
          data-accent-color={color}
          {...rootProps}
          ref={forwardedRef}
          className={classNames('rt-RadioCardsRoot', className)}
        />
      </Grid>
    );
  }
);
RadioCardsRoot.displayName = 'RadioCards.Root';

type RadioCardsItemElement = React.ElementRef<typeof RadioGroupPrimitive.Item>;
interface RadioCardsItemProps
  extends ComponentPropsWithout<typeof RadioGroupPrimitive.Item, RemovedProps>,
    MarginProps {}
const RadioCardsItem = React.forwardRef<RadioCardsItemElement, RadioCardsItemProps>(
  ({ className, ...props }, forwardedRef) => (
    <RadioGroupPrimitive.Item
      {...props}
      asChild={false}
      ref={forwardedRef}
      className={classNames('rt-reset', 'rt-BaseCard', 'rt-RadioCardsItem', className)}
    />
  )
);
RadioCardsItem.displayName = 'RadioCards.Item';

export { RadioCardsRoot as Root, RadioCardsItem as Item };
export type { RadioCardsRootProps as RootProps, RadioCardsItemProps as ItemProps };


================================================
File: packages/radix-ui-themes/src/components/radio-group.css
================================================
.rt-RadioGroupRoot {
  display: flex;
  flex-direction: column;
  gap: var(--space-1);
}

.rt-RadioGroupItem {
  display: flex;
  gap: 0.5em;

  /* Make sure whitespace to the right of the text is not clickable */
  width: fit-content;
}

.rt-RadioGroupItemInner {
  /* Make layouts with text truncation possible */
  min-width: 0;
}


================================================
File: packages/radix-ui-themes/src/components/radio-group.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { colorPropDef } from '../props/color.prop.js';
import { highContrastPropDef } from '../props/high-contrast.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;
const variants = ['classic', 'surface', 'soft'] as const;

const radioGroupRootPropDefs = {
  ...asChildPropDef,
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '2', responsive: true },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'surface' },
  ...colorPropDef,
  ...highContrastPropDef,
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
};

export { radioGroupRootPropDefs };


================================================
File: packages/radix-ui-themes/src/components/radio-group.tsx
================================================
'use client';

import * as React from 'react';
import classNames from 'classnames';
import { Context } from 'radix-ui/internal';
import { RadioGroup as RadioGroupPrimitive } from 'radix-ui';

import { radioGroupRootPropDefs } from './radio-group.props.js';
import { Text } from './text.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { MarginProps } from '../props/margin.props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

const RADIO_GROUP_NAME = 'RadioGroup';

type ScopedProps<P> = P & { __scopeRadioGroup?: Context.Scope };
const [createRadioGroupContext] = Context.createContextScope(RADIO_GROUP_NAME, [
  RadioGroupPrimitive.createRadioGroupScope,
]);
const useRadioGroupScope = RadioGroupPrimitive.createRadioGroupScope();

type RadioGroupRootOwnProps = GetPropDefTypes<typeof radioGroupRootPropDefs>;
type RadioGroupContextValue = RadioGroupRootOwnProps;

const [RadioGroupProvider, useRadioGroupContext] =
  createRadioGroupContext<RadioGroupContextValue>(RADIO_GROUP_NAME);

type RadioGroupRootElement = React.ElementRef<typeof RadioGroupPrimitive.Root>;
interface RadioGroupRootProps
  extends ComponentPropsWithout<
      typeof RadioGroupPrimitive.Root,
      'asChild' | 'color' | 'defaultChecked'
    >,
    MarginProps,
    RadioGroupRootOwnProps {}
const RadioGroupRoot = React.forwardRef<RadioGroupRootElement, RadioGroupRootProps>(
  (
    {
      color = radioGroupRootPropDefs.color.default,
      highContrast = radioGroupRootPropDefs.highContrast.default,
      size = radioGroupRootPropDefs.size.default,
      variant = radioGroupRootPropDefs.variant.default,
      ...props
    }: ScopedProps<RadioGroupRootProps>,
    forwardedRef
  ) => {
    const { __scopeRadioGroup, className, ...rootProps } = extractProps(props, marginPropDefs);
    const radioGroupScope = useRadioGroupScope(__scopeRadioGroup);
    return (
      <RadioGroupProvider
        scope={__scopeRadioGroup}
        color={color}
        highContrast={highContrast}
        size={size}
        variant={variant}
      >
        <RadioGroupPrimitive.Root
          {...radioGroupScope}
          {...rootProps}
          ref={forwardedRef}
          className={classNames('rt-RadioGroupRoot', className)}
        />
      </RadioGroupProvider>
    );
  }
);
RadioGroupRoot.displayName = 'RadioGroup.Root';

type RadioGroupItemElement = React.ElementRef<typeof RadioGroupItemRadio>;
interface RadioGroupItemProps
  extends ComponentPropsWithout<typeof RadioGroupItemRadio, RemovedProps>,
    MarginProps {}
const RadioGroupItem = React.forwardRef<RadioGroupItemElement, RadioGroupItemProps>(
  (_props: ScopedProps<RadioGroupItemProps>, forwardedRef) => {
    const { __scopeRadioGroup, children, className, style, ...props } = _props;
    const { size } = useRadioGroupContext('RadioGroupItem', __scopeRadioGroup);

    // Render `<Text as="label">` if children are provided, otherwise render
    // the solo radio button to allow building out your custom layouts with it.
    if (children) {
      return (
        <Text
          as="label"
          size={size}
          className={classNames('rt-RadioGroupItem', className)}
          style={style}
        >
          <RadioGroupItemRadio
            __scopeRadioGroup={__scopeRadioGroup}
            {...props}
            ref={forwardedRef}
          />
          {children && <span className="rt-RadioGroupItemInner">{children}</span>}
        </Text>
      );
    }

    return (
      <RadioGroupItemRadio
        __scopeRadioGroup={__scopeRadioGroup}
        {...props}
        ref={forwardedRef}
        className={className}
        style={style}
      />
    );
  }
);
RadioGroupItem.displayName = 'RadioGroup.Item';

type RadioGroupItemRadioElement = React.ElementRef<typeof RadioGroupPrimitive.Item>;
interface RadioGroupItemRadioProps
  extends React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item> {}
const RadioGroupItemRadio = React.forwardRef<
  RadioGroupItemRadioElement,
  ScopedProps<RadioGroupItemRadioProps>
>(({ __scopeRadioGroup, ...props }, forwardedRef) => {
  const context = useRadioGroupContext('RadioGroupItemRadio', __scopeRadioGroup);
  const radioGroupScope = useRadioGroupScope(__scopeRadioGroup);
  const { color, className } = extractProps(
    { ...props, ...context },
    radioGroupRootPropDefs,
    marginPropDefs
  );
  return (
    <RadioGroupPrimitive.Item
      {...radioGroupScope}
      data-accent-color={color}
      {...props}
      asChild={false}
      ref={forwardedRef}
      className={classNames('rt-reset', 'rt-BaseRadioRoot', className)}
    />
  );
});
RadioGroupItemRadio.displayName = 'RadioGroup.ItemRadio';

export { RadioGroupRoot as Root, RadioGroupItem as Item };
export type { RadioGroupRootProps as RootProps, RadioGroupItemProps as ItemProps };


================================================
File: packages/radix-ui-themes/src/components/radio.css
================================================
@import './_internal/base-radio.css';


================================================
File: packages/radix-ui-themes/src/components/radio.props.tsx
================================================
export { baseRadioPropDefs as radioPropDefs } from './_internal/base-radio.props.js';


================================================
File: packages/radix-ui-themes/src/components/radio.tsx
================================================
'use client';

import * as React from 'react';
import classNames from 'classnames';
import { composeEventHandlers, composeRefs } from 'radix-ui/internal';

import { radioPropDefs } from './radio.props.js';
import { marginPropDefs } from '../props/margin.props.js';
import { extractProps } from '../helpers/extract-props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout } from '../helpers/component-props.js';
import type { NotInputRadioAttributes } from '../helpers/input-attributes.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type RadioElement = React.ElementRef<'input'>;
type RadioOwnProps = GetPropDefTypes<typeof radioPropDefs> & {
  value: string;
  onValueChange?: (value: string) => void;
};
type RadioInputProps = ComponentPropsWithout<
  'input',
  NotInputRadioAttributes | 'color' | 'defaultValue' | 'value'
>;
interface RadioProps extends RadioInputProps, MarginProps, RadioOwnProps {}

const Radio = React.forwardRef<RadioElement, RadioProps>((props, forwardedRef) => {
  const ref = React.useRef<RadioElement>(null);
  const { className, color, onChange, onValueChange, ...radioProps } = extractProps(
    props,
    radioPropDefs,
    marginPropDefs
  );
  return (
    <input
      type="radio"
      data-accent-color={color}
      {...radioProps}
      onChange={composeEventHandlers(onChange, (event) =>
        onValueChange?.(event.currentTarget.value)
      )}
      ref={composeRefs(ref, forwardedRef)}
      className={classNames('rt-reset', 'rt-BaseRadioRoot', 'rt-RadioRoot', className)}
    />
  );
});
Radio.displayName = 'Radio';

export { Radio };
export type { RadioProps };


================================================
File: packages/radix-ui-themes/src/components/reset.css
================================================
/* stylelint-disable selector-max-type */
/* Disable selector-max-type rule to target individual element types. */
/* Make sure these tags are wrapped in `:where()` for 0 specificity. */

.rt-reset {
  /* * * * * * * * * * * * * * * * * * * */
  /*                                     */
  /*              Margins                */
  /*                                     */
  /* * * * * * * * * * * * * * * * * * * */

  &:where(body, blockquote, dl, dd, figure, p) {
    margin: 0;
  }

  /* * * * * * * * * * * * * * * * * * * */
  /*                                     */
  /*             Typography              */
  /*                                     */
  /* * * * * * * * * * * * * * * * * * * */

  &:where(address, b, cite, code, dfn, em, i, kbd, q, samp, small, strong, var) {
    font: unset;
  }
  &:where(h1, h2, h3, h4, h5, h6) {
    font: unset;
    margin: 0;
  }

  /* * * * * * * * * * * * * * * * * * * */
  /*                                     */
  /*        Interactive elements         */
  /*                                     */
  /* * * * * * * * * * * * * * * * * * * */

  &:where(a) {
    all: unset;
    -webkit-tap-highlight-color: transparent;
  }
  &:where(
      button,
      select,

      /* Buttons */
      [type='button'],
      [type='image'],
      [type='reset'],
      [type='submit'],

      /* Non-textual inputs */
      [type='checkbox'],
      [type='color'],
      [type='radio'],
      [type='range']
    ) {
    all: unset;
    display: inline-block;
    font-weight: normal;
    font-style: normal;
    text-indent: initial;
    -webkit-tap-highlight-color: transparent;
  }
  &:where(label) {
    -webkit-tap-highlight-color: transparent;
  }
  &:where(select) {
    font-weight: normal;
    font-style: normal;
    text-align: start;
  }
  &:where(
      textarea,
      input:not(
          /* Buttons */
          [type='button'],
          [type='image'],
          [type='reset'],
          [type='submit'],

          /* Non-textual inputs */
          [type='checkbox'],
          [type='color'],
          [type='radio'],
          [type='range']
        )
    ) {
    all: unset;
    display: block;
    width: stretch;
    font-weight: normal;
    font-style: normal;
    text-align: start;
    text-indent: initial;
    -webkit-tap-highlight-color: transparent;

    /* Make sure parent <label> doesn't change the text cursor */
    cursor: text;

    /* Recover textarea pre-wrap in Firefox */
    white-space: pre-wrap;
  }
  &:where(:focus) {
    outline: none;
  }
  &::placeholder {
    color: unset;
    opacity: unset;
    /* Weird, but placeholders are selectable in Chrome and Safari */
    user-select: none;
  }

  /* * * * * * * * * * * * * * * * * * * */
  /*                                     */
  /*               Tables                */
  /*                                     */
  /* * * * * * * * * * * * * * * * * * * */

  &:where(table) {
    all: unset;
    display: table;
    text-indent: initial;
  }
  &:where(caption) {
    text-align: inherit;
  }
  &:where(td) {
    padding: 0;
  }
  &:where(th) {
    font-weight: unset;
    text-align: inherit;
    padding: 0;
  }

  /* * * * * * * * * * * * * * * * * * * */
  /*                                     */
  /*       Individual style tweaks       */
  /*                                     */
  /* * * * * * * * * * * * * * * * * * * */

  &:where(abbr, acronym) {
    text-decoration: none;
  }
  &:where(canvas, object, picture, summary) {
    display: block;
  }
  &:where(del, s) {
    text-decoration: unset;
  }
  &:where(fieldset, hr) {
    all: unset;
    display: block;
  }
  &:where(legend) {
    padding: 0;
    border: none;
    /* Normalize with label */
    cursor: default;
  }
  &:where(li) {
    display: block;
    text-align: unset;
  }
  &:where(ol, ul) {
    list-style: none;
    margin: 0;
    padding: 0;
  }
  &:where(iframe) {
    display: block;
    border: none;
  }
  &:where(iframe) {
    width: stretch;
  }
  &:where(ins, u) {
    text-decoration: none;
  }
  &:where(img) {
    display: block;
    max-width: 100%;
  }
  &:where(svg) {
    display: block;
    max-width: 100%;
    flex-shrink: 0;
  }
  &:where(mark) {
    all: unset;
  }
  &:where(pre) {
    font: unset;
    margin: unset;
  }
  &:where(q)::before,
  &:where(q)::after {
    content: '';
  }
  &:where(sub, sup) {
    font: unset;
    vertical-align: unset;
  }
  &:where(details) ::marker,
  &:where(summary)::marker {
    content: none;
  }
  &:where(video) {
    display: block;
    width: stretch;
  }

  /* * * * * * * * * * * * * * * * * * * */
  /*                                     */
  /*               Cursors               */
  /*                                     */
  /* * * * * * * * * * * * * * * * * * * */

  &:where(:any-link) {
    cursor: var(--cursor-link);
  }
  &:where(button) {
    cursor: var(--cursor-button);
  }
  &:where(:disabled, [data-disabled]) {
    cursor: var(--cursor-disabled);
  }
  &:where(input[type='checkbox']) {
    cursor: var(--cursor-checkbox);
  }
  &:where(input[type='radio']) {
    cursor: var(--cursor-radio);
  }

  /* * * * * * * * * * * * * * * * * * * */
  /*                                     */
  /*             Box sizing              */
  /*                                     */
  /* * * * * * * * * * * * * * * * * * * */

  &,
  &::before,
  &::after {
    /* Don't reorder this rule or remove "&" */
    box-sizing: border-box;
  }
}


================================================
File: packages/radix-ui-themes/src/components/reset.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { requireReactElement } from '../helpers/require-react-element.js';

import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';

interface ResetProps extends ComponentPropsWithout<typeof Slot.Root, RemovedProps> {}
const Reset = React.forwardRef<HTMLElement, ResetProps>(
  ({ className, children, ...props }, forwardedRef) => {
    return (
      <Slot.Root {...props} ref={forwardedRef} className={classNames('rt-reset', className)}>
        {requireReactElement(children)}
      </Slot.Root>
    );
  }
);
Reset.displayName = 'Reset';

export { Reset };
export type { ResetProps };


================================================
File: packages/radix-ui-themes/src/components/scroll-area.css
================================================
.radix-themes {
  --scrollarea-scrollbar-horizontal-margin-top: var(--space-1);
  --scrollarea-scrollbar-horizontal-margin-bottom: var(--space-1);
  --scrollarea-scrollbar-horizontal-margin-left: var(--space-1);
  --scrollarea-scrollbar-horizontal-margin-right: var(--space-1);
  --scrollarea-scrollbar-vertical-margin-top: var(--space-1);
  --scrollarea-scrollbar-vertical-margin-bottom: var(--space-1);
  --scrollarea-scrollbar-vertical-margin-left: var(--space-1);
  --scrollarea-scrollbar-vertical-margin-right: var(--space-1);
}

.rt-ScrollAreaRoot {
  display: flex;
  flex-direction: column;
  overflow: hidden;
  width: 100%;
  height: 100%;
}

.rt-ScrollAreaViewport {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;

  &:where(:focus-visible) + :where(.rt-ScrollAreaViewportFocusRing) {
    position: absolute;
    inset: 0;
    pointer-events: none;
    outline: 2px solid var(--focus-8);
    outline-offset: -2px;
  }

  /* Stop Chrome back/forward two-finger swipe when there is a horizontal scrollbar */
  &:where(:has(.rt-ScrollAreaScrollbar[data-orientation='horizontal'])) {
    overscroll-behavior-x: contain;
  }
}

.rt-ScrollAreaViewport > * {
  display: block !important;
  width: fit-content;
  flex-grow: 1;
}

.rt-ScrollAreaScrollbar {
  display: flex;
  /* Ensures no selection */
  user-select: none;
  /* Disable browser handling of all panning and zooming gestures on touch devices */
  touch-action: none;

  &:where([data-orientation='vertical']) {
    flex-direction: column;
    width: var(--scrollarea-scrollbar-size);
  }
  &:where([data-orientation='horizontal']) {
    flex-direction: row;
    height: var(--scrollarea-scrollbar-size);
  }
}

.rt-ScrollAreaThumb {
  position: relative;

  &::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    min-width: var(--space-4);
    min-height: var(--space-4);
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-ScrollAreaScrollbar {
    &:where(.rt-r-size-1) {
      --scrollarea-scrollbar-size: var(--space-1);
      --scrollarea-scrollbar-border-radius: max(var(--radius-1), var(--radius-full));
    }
    &:where(.rt-r-size-2) {
      --scrollarea-scrollbar-size: var(--space-2);
      --scrollarea-scrollbar-border-radius: max(var(--radius-1), var(--radius-full));
    }
    &:where(.rt-r-size-3) {
      --scrollarea-scrollbar-size: var(--space-3);
      --scrollarea-scrollbar-border-radius: max(var(--radius-1), var(--radius-full));
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

.rt-ScrollAreaScrollbar {
  background-color: var(--gray-a3);
  border-radius: var(--scrollarea-scrollbar-border-radius);

  animation-duration: 120ms;
  animation-timing-function: ease-out;

  &:where([data-state='visible']) {
    animation-name: rt-fade-in;
  }
  &:where([data-state='hidden']) {
    animation-name: rt-fade-out;
  }
  &:where([data-orientation='horizontal']) {
    margin-top: var(--scrollarea-scrollbar-horizontal-margin-top);
    margin-bottom: var(--scrollarea-scrollbar-horizontal-margin-bottom);
    margin-left: var(--scrollarea-scrollbar-horizontal-margin-left);
    margin-right: var(--scrollarea-scrollbar-horizontal-margin-right);
  }
  &:where([data-orientation='vertical']) {
    margin-top: var(--scrollarea-scrollbar-vertical-margin-top);
    margin-bottom: var(--scrollarea-scrollbar-vertical-margin-bottom);
    margin-left: var(--scrollarea-scrollbar-vertical-margin-left);
    margin-right: var(--scrollarea-scrollbar-vertical-margin-right);
  }
}

.rt-ScrollAreaThumb {
  background-color: var(--gray-a8);
  border-radius: inherit;
  transition: background-color 100ms;

  @media (hover: hover) {
    &:where(:hover) {
      background-color: var(--gray-a9);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/scroll-area.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { radiusPropDef } from '../props/radius.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;
const scrollbarsValues = ['vertical', 'horizontal', 'both'] as const;

const scrollAreaPropDefs = {
  ...asChildPropDef,
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '1', responsive: true },
  ...radiusPropDef,
  scrollbars: { type: 'enum', values: scrollbarsValues, default: 'both' },
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  scrollbars: PropDef<(typeof scrollbarsValues)[number]>;
};

export { scrollAreaPropDefs };


================================================
File: packages/radix-ui-themes/src/components/scroll-area.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { ScrollArea as ScrollAreaPrimitive } from 'radix-ui';

import { scrollAreaPropDefs } from './scroll-area.props.js';
import { extractMarginProps } from '../helpers/extract-margin-props.js';
import { getMarginStyles } from '../helpers/get-margin-styles.js';
import { getResponsiveClassNames } from '../helpers/get-responsive-styles.js';
import { getSubtree } from '../helpers/get-subtree.js';
import { mergeStyles } from '../helpers/merge-styles.js';

import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { MarginProps } from '../props/margin.props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type ScrollAreaElement = React.ElementRef<typeof ScrollAreaPrimitive.Viewport>;
type ScrollAreaOwnProps = GetPropDefTypes<typeof scrollAreaPropDefs>;
interface ScrollAreaProps
  extends ComponentPropsWithout<typeof ScrollAreaPrimitive.Root, RemovedProps>,
    ComponentPropsWithout<typeof ScrollAreaPrimitive.Viewport, RemovedProps | 'dir'>,
    MarginProps,
    ScrollAreaOwnProps {}
const ScrollArea = React.forwardRef<ScrollAreaElement, ScrollAreaProps>((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const [marginClassNames, marginCustomProperties] = getMarginStyles(marginProps);

  const {
    asChild,
    children,
    className,
    style,
    type,
    scrollHideDelay = type !== 'scroll' ? 0 : undefined,
    dir,
    size = scrollAreaPropDefs.size.default,
    radius = scrollAreaPropDefs.radius.default,
    scrollbars = scrollAreaPropDefs.scrollbars.default,
    ...viewportProps
  } = marginRest;

  return (
    <ScrollAreaPrimitive.Root
      type={type}
      scrollHideDelay={scrollHideDelay}
      className={classNames('rt-ScrollAreaRoot', marginClassNames, className)}
      style={mergeStyles(marginCustomProperties, style)}
      asChild={asChild}
    >
      {getSubtree({ asChild, children }, (children) => (
        <>
          <ScrollAreaPrimitive.Viewport
            {...viewportProps}
            ref={forwardedRef}
            className="rt-ScrollAreaViewport"
          >
            {children}
          </ScrollAreaPrimitive.Viewport>

          <div className="rt-ScrollAreaViewportFocusRing" />

          {scrollbars !== 'vertical' ? (
            <ScrollAreaPrimitive.Scrollbar
              data-radius={radius}
              orientation="horizontal"
              className={classNames(
                'rt-ScrollAreaScrollbar',
                getResponsiveClassNames({
                  className: 'rt-r-size',
                  value: size,
                  propValues: scrollAreaPropDefs.size.values,
                })
              )}
            >
              <ScrollAreaPrimitive.Thumb className="rt-ScrollAreaThumb" />
            </ScrollAreaPrimitive.Scrollbar>
          ) : null}

          {scrollbars !== 'horizontal' ? (
            <ScrollAreaPrimitive.Scrollbar
              data-radius={radius}
              orientation="vertical"
              className={classNames(
                'rt-ScrollAreaScrollbar',
                getResponsiveClassNames({
                  className: 'rt-r-size',
                  value: size,
                  propValues: scrollAreaPropDefs.size.values,
                })
              )}
            >
              <ScrollAreaPrimitive.Thumb className="rt-ScrollAreaThumb" />
            </ScrollAreaPrimitive.Scrollbar>
          ) : null}

          {scrollbars === 'both' ? (
            <ScrollAreaPrimitive.Corner className="rt-ScrollAreaCorner" />
          ) : null}
        </>
      ))}
    </ScrollAreaPrimitive.Root>
  );
});
ScrollArea.displayName = 'ScrollArea';

export { ScrollArea };
export type { ScrollAreaProps };


================================================
File: packages/radix-ui-themes/src/components/section.css
================================================
.rt-Section {
  box-sizing: border-box;
  flex-shrink: 0;
}

@breakpoints {
  .rt-Section {
    &:where(.rt-r-size-1) {
      padding-top: var(--space-5);
      padding-bottom: var(--space-5);
    }
    &:where(.rt-r-size-2) {
      padding-top: var(--space-7);
      padding-bottom: var(--space-7);
    }
    &:where(.rt-r-size-3) {
      padding-top: var(--space-9);
      padding-bottom: var(--space-9);
    }
    &:where(.rt-r-size-4) {
      padding-top: calc(80px * var(--scaling));
      padding-bottom: calc(80px * var(--scaling));
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/section.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';

import type { PropDef, GetPropDefTypes } from '../props/prop-def.js';

const sizes = ['1', '2', '3', '4'] as const;
const displayValues = ['none', 'initial'] as const;

const sectionPropDefs = {
  ...asChildPropDef,
  /**
   * Controls the vertical padding of the section.
   *
   * @values
   * | Size     | Padding |
   * | :------- | ------: |
   * | size="1" | 24px    |
   * | size="2" | 40px    |
   * | size="3" | 64px    |
   * | size="4" | 80px    |
   *
   * @example
   * size="4"
   * size={{ sm: '3', lg: '4' }}
   *
   * @link
   * https://github.com/radix-ui/themes/blob/main/packages/radix-ui-themes/src/components/section.css
   */
  size: {
    type: 'enum',
    className: 'rt-r-size',
    values: sizes,
    default: '3',
    responsive: true,
  },
  /**
   * Controls whether the section is visible or hidden.
   * Supports "none", "initial", and responsive object values.
   *
   * @example
   * display="none"
   * display={{ sm: 'none', lg: 'initial' }}
   */
  display: {
    type: 'enum',
    className: 'rt-r-display',
    values: displayValues,
    parseValue: parseDisplayValue,
    responsive: true,
  },
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  display: PropDef<(typeof displayValues)[number]>;
};

function parseDisplayValue(value: string) {
  return value === 'initial' ? 'block' : value;
}

// Use all of the imported prop defs to ensure that JSDoc works
type SectionOwnProps = GetPropDefTypes<typeof sectionPropDefs & typeof asChildPropDef>;

export { sectionPropDefs };
export type { SectionOwnProps };


================================================
File: packages/radix-ui-themes/src/components/section.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { sectionPropDefs } from './section.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { layoutPropDefs } from '../props/layout.props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { LayoutProps } from '../props/layout.props.js';
import type { MarginProps } from '../props/margin.props.js';
import type { SectionOwnProps } from './section.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';

type SectionElement = React.ElementRef<'div'>;
interface SectionProps
  extends ComponentPropsWithout<'div', RemovedProps>,
    MarginProps,
    LayoutProps,
    SectionOwnProps {}
const Section = React.forwardRef<SectionElement, SectionProps>((props, forwardedRef) => {
  const { asChild, className, ...sectionProps } = extractProps(
    props,
    sectionPropDefs,
    layoutPropDefs,
    marginPropDefs
  );
  const Comp = asChild ? Slot.Root : 'section';
  return (
    <Comp {...sectionProps} ref={forwardedRef} className={classNames('rt-Section', className)} />
  );
});
Section.displayName = 'Section';

export { Section };
export type { SectionProps };


================================================
File: packages/radix-ui-themes/src/components/segmented-control.css
================================================
.radix-themes {
  --segmented-control-transition-duration: 100ms;
}

.rt-SegmentedControlRoot {
  display: inline-grid;
  vertical-align: top;
  grid-auto-flow: column;
  grid-auto-columns: 1fr;
  align-items: stretch;
  color: var(--gray-12);
  background-color: var(--color-surface);
  background-image: linear-gradient(var(--gray-a3), var(--gray-a3));
  position: relative;
  min-width: max-content;

  font-family: var(--default-font-family);
  font-style: normal;
  text-align: center;

  /* Create a new stacking context */
  isolation: isolate;
}

.rt-SegmentedControlRoot:where([data-disabled]) {
  color: var(--gray-a8);
  background-color: var(--gray-3);
}

.rt-SegmentedControlItem {
  display: flex;
  align-items: stretch;
  user-select: none;

  &:where(:first-child) {
    border-top-left-radius: inherit;
    border-bottom-left-radius: inherit;
  }
  &:where(:nth-last-child(2)) {
    border-top-right-radius: inherit;
    border-bottom-right-radius: inherit;
  }
  &:where(:focus-visible) {
    border-radius: inherit;
    outline: 2px solid var(--focus-8);
    outline-offset: -1px;
  }
}

.rt-SegmentedControlItemLabel {
  display: flex;
  flex-grow: 1;
  align-items: center;
  justify-content: center;
  border-radius: inherit;

  /* stylelint-disable-next-line selector-max-type */
  & :where(svg) {
    /* Don’t squish icons */
    flex-shrink: 0;
  }

  @media (hover: hover) {
    :where(.rt-SegmentedControlItem[data-state='off']:not([disabled]):hover) & {
      background-color: var(--gray-a2);
    }
  }
}

.rt-SegmentedControlItemLabelInactive {
  position: absolute;

  transition: opacity calc(0.8 * var(--segmented-control-transition-duration));
  font-weight: var(--font-weight-regular);
  letter-spacing: var(--tab-inactive-letter-spacing);
  word-spacing: var(--tab-inactive-word-spacing);

  opacity: 1;
  transition-timing-function: ease-out;
  :where(.rt-SegmentedControlItem[data-state='on']) & {
    opacity: 0;
    transition-timing-function: ease-in;
  }
}

.rt-SegmentedControlItemLabelActive {
  transition: opacity calc(0.8 * var(--segmented-control-transition-duration));
  font-weight: var(--font-weight-medium);
  letter-spacing: var(--tab-active-letter-spacing);
  word-spacing: var(--tab-active-word-spacing);

  opacity: 0;
  transition-timing-function: ease-in;
  :where(.rt-SegmentedControlItem[data-state='on']) & {
    opacity: 1;
    transition-timing-function: ease-out;
  }
}

.rt-SegmentedControlItemSeparator {
  /*
   * Place the separator below the indicator.
   * Be careful not to introduce a stacking context on ".rt-SegmentedControlItem":
   * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Understanding_z-index/Stacking_context
   */
  z-index: -1;

  margin-top: 3px;
  margin-bottom: 3px;
  margin-left: -0.5px;
  margin-right: -0.5px;
  width: 1px;
  background-color: var(--gray-a4);
  transition: opacity calc(0.8 * var(--segmented-control-transition-duration));

  /* Make separators slow to disappear and fast to appear, syncing it well with the indicator motion */
  transition-timing-function: ease-out;

  :where(.rt-SegmentedControlItem:first-child) &,
  :where(.rt-SegmentedControlItem:where([data-state='on'], :focus-visible)) &,
  :where(.rt-SegmentedControlItem:where([data-state='on'], :focus-visible)) + * & {
    opacity: 0;
    transition-timing-function: ease-in;
  }
  /* Don't transition when the separator is hidden because of the focus outline */
  :where(.rt-SegmentedControlRoot:has(:focus-visible)) & {
    transition-duration: 0ms;
  }
}

:where(.radix-themes) {
  --segmented-control-indicator-background-color: var(--color-background);
}
:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  --segmented-control-indicator-background-color: var(--gray-a3);
}

.rt-SegmentedControlIndicator {
  display: none;
  position: absolute;
  z-index: -1;
  top: 0;
  left: 0;
  height: 100%;
  pointer-events: none;
  transition-property: transform;
  transition-timing-function: cubic-bezier(0.445, 0.05, 0.55, 0.95);
  transition-duration: var(--segmented-control-transition-duration);

  &::before {
    inset: 1px;
    position: absolute;
    border-radius: max(0.5px, calc(var(--segmented-control-border-radius) - 1px));
    background-color: var(--segmented-control-indicator-background-color);
    content: '';
  }

  :where(.rt-SegmentedControlItem[data-state='on']) ~ & {
    display: block;
  }

  :where(.rt-SegmentedControlItem[disabled]) ~ & {
    --segmented-control-indicator-background-color: var(--gray-a3);

    &::before {
      inset: 0px;
      box-shadow: none;
    }
  }

  &:where(:nth-child(2)) {
    width: calc(100% / 1);
  }
  &:where(:nth-child(3)) {
    width: calc(100% / 2);
  }
  &:where(:nth-child(4)) {
    width: calc(100% / 3);
  }
  &:where(:nth-child(5)) {
    width: calc(100% / 4);
  }
  &:where(:nth-child(6)) {
    width: calc(100% / 5);
  }
  &:where(:nth-child(7)) {
    width: calc(100% / 6);
  }
  &:where(:nth-child(8)) {
    width: calc(100% / 7);
  }
  &:where(:nth-child(9)) {
    width: calc(100% / 8);
  }
  &:where(:nth-child(10)) {
    width: calc(100% / 9);
  }
  &:where(:nth-child(11)) {
    width: calc(100% / 10);
  }

  :where(.rt-SegmentedControlItem[data-state='on']:nth-child(1)) ~ & {
    transform: translateX(0%);
  }
  :where(.rt-SegmentedControlItem[data-state='on']:nth-child(2)) ~ & {
    transform: translateX(100%);
  }
  :where(.rt-SegmentedControlItem[data-state='on']:nth-child(3)) ~ & {
    transform: translateX(200%);
  }
  :where(.rt-SegmentedControlItem[data-state='on']:nth-child(4)) ~ & {
    transform: translateX(300%);
  }
  :where(.rt-SegmentedControlItem[data-state='on']:nth-child(5)) ~ & {
    transform: translateX(400%);
  }
  :where(.rt-SegmentedControlItem[data-state='on']:nth-child(6)) ~ & {
    transform: translateX(500%);
  }
  :where(.rt-SegmentedControlItem[data-state='on']:nth-child(7)) ~ & {
    transform: translateX(600%);
  }
  :where(.rt-SegmentedControlItem[data-state='on']:nth-child(8)) ~ & {
    transform: translateX(700%);
  }
  :where(.rt-SegmentedControlItem[data-state='on']:nth-child(9)) ~ & {
    transform: translateX(800%);
  }
  :where(.rt-SegmentedControlItem[data-state='on']:nth-child(10)) ~ & {
    transform: translateX(900%);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*                Sizes                */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.rt-SegmentedControlItemLabel {
  box-sizing: border-box;
}
.rt-SegmentedControlRoot {
  border-radius: var(--segmented-control-border-radius);
}

@breakpoints {
  .rt-SegmentedControlRoot {
    &:where(.rt-r-size-1) {
      --segmented-control-border-radius: max(var(--radius-2), var(--radius-full));
      height: var(--space-5);

      & :where(.rt-SegmentedControlItemLabel) {
        font-size: var(--font-size-1);
        letter-spacing: var(--letter-spacing-1);
        padding-left: var(--space-3);
        padding-right: var(--space-3);
        gap: var(--space-1);
      }
    }
    &:where(.rt-r-size-2) {
      --segmented-control-border-radius: max(var(--radius-2), var(--radius-full));
      height: var(--space-6);

      & :where(.rt-SegmentedControlItemLabel) {
        font-size: var(--font-size-2);
        letter-spacing: var(--letter-spacing-2);
        padding-left: var(--space-4);
        padding-right: var(--space-4);
        gap: var(--space-2);
      }
    }
    &:where(.rt-r-size-3) {
      --segmented-control-border-radius: max(var(--radius-3), var(--radius-full));
      height: var(--space-7);

      & :where(.rt-SegmentedControlItemLabel) {
        font-size: var(--font-size-3);
        letter-spacing: var(--letter-spacing-3);
        padding-left: var(--space-4);
        padding-right: var(--space-4);
        gap: var(--space-3);
      }
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*         Variants / Surface          */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.rt-SegmentedControlRoot:where(.rt-variant-surface) {
  & :where(.rt-SegmentedControlItem:not([disabled])) ~ :where(.rt-SegmentedControlIndicator) {
    &::before {
      box-shadow: 0 0 0 1px var(--gray-a4);
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*         Variants / Classic          */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.rt-SegmentedControlRoot:where(.rt-variant-classic) {
  & :where(.rt-SegmentedControlItem:not([disabled])) ~ :where(.rt-SegmentedControlIndicator) {
    &::before {
      box-shadow: var(--shadow-2);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/segmented-control.props.tsx
================================================
import { radiusPropDef } from '../props/radius.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;
const variants = ['surface', 'classic'] as const;

const segmentedControlRootPropDefs = {
  disabled: { type: 'boolean', className: 'disabled', default: false },
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '2', responsive: true },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'surface' },
  ...radiusPropDef,
} satisfies {
  disabled?: PropDef<boolean>;
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
};

export { segmentedControlRootPropDefs };


================================================
File: packages/radix-ui-themes/src/components/segmented-control.tsx
================================================
'use client';

import * as React from 'react';
import classNames from 'classnames';
import { ToggleGroup as ToggleGroupPrimitive } from 'radix-ui';
import { useControllableState } from 'radix-ui/internal';

import { segmentedControlRootPropDefs } from './segmented-control.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type SegmentedControlRootOwnProps = GetPropDefTypes<typeof segmentedControlRootPropDefs>;

interface SegmentedControlRootProps
  extends ComponentPropsWithout<'div', RemovedProps | 'dir'>,
    SegmentedControlRootOwnProps,
    MarginProps {
  value?: string;
  defaultValue?: string;
  onValueChange?(value: string): void;
}

const SegmentedControlRoot = React.forwardRef<HTMLDivElement, SegmentedControlRootProps>(
  (props, forwardedRef) => {
    const {
      className,
      children,
      radius,
      value: valueProp,
      defaultValue: defaultValueProp,
      onValueChange: onValueChangeProp,
      ...rootProps
    } = extractProps(props, segmentedControlRootPropDefs, marginPropDefs);

    const [value, setValue] = useControllableState({
      prop: valueProp,
      onChange: onValueChangeProp,
      defaultProp: defaultValueProp,
    });

    return (
      <ToggleGroupPrimitive.Root
        data-disabled={props.disabled || undefined}
        data-radius={radius}
        ref={forwardedRef}
        className={classNames('rt-SegmentedControlRoot', className)}
        onValueChange={(value) => {
          if (value) {
            setValue(value);
          }
        }}
        {...rootProps}
        type="single"
        value={value}
        asChild={false}
        disabled={!!props.disabled}
      >
        {children}
        <div className="rt-SegmentedControlIndicator" />
      </ToggleGroupPrimitive.Root>
    );
  }
);

SegmentedControlRoot.displayName = 'SegmentedControl.Root';

interface SegmentedControlItemOwnProps {
  value: string;
}

interface SegmentedControlItemProps
  extends ComponentPropsWithout<
      typeof ToggleGroupPrimitive.Item,
      RemovedProps | 'disabled' | 'type' | 'value'
    >,
    SegmentedControlItemOwnProps {}

const SegmentedControlItem = React.forwardRef<HTMLButtonElement, SegmentedControlItemProps>(
  ({ children, className, ...props }, forwardedRef) => (
    <ToggleGroupPrimitive.Item
      ref={forwardedRef}
      className={classNames('rt-reset', 'rt-SegmentedControlItem', className)}
      {...props}
      disabled={false}
      asChild={false}
    >
      <span className="rt-SegmentedControlItemSeparator" />
      <span className="rt-SegmentedControlItemLabel">
        <span className="rt-SegmentedControlItemLabelActive">{children}</span>
        <span className="rt-SegmentedControlItemLabelInactive" aria-hidden>
          {children}
        </span>
      </span>
    </ToggleGroupPrimitive.Item>
  )
);

SegmentedControlItem.displayName = 'SegmentedControl.Item';

export { SegmentedControlRoot as Root, SegmentedControlItem as Item };
export type { SegmentedControlRootProps as RootProps, SegmentedControlItemProps as ItemProps };


================================================
File: packages/radix-ui-themes/src/components/select.css
================================================
.rt-SelectTrigger {
  display: inline-flex;
  align-items: center;
  justify-content: space-between;
  flex-shrink: 0;
  user-select: none;
  vertical-align: top;
  line-height: var(--height);

  font-family: var(--default-font-family);
  font-weight: var(--font-weight-regular);
  font-style: normal;
  text-align: start;

  &:where(:focus-visible) {
    outline: 2px solid var(--focus-8);
    outline-offset: -1px;
  }
}

.rt-SelectTriggerInner {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.rt-SelectIcon {
  flex-shrink: 0;

  :where(.rt-SelectTrigger:not(.rt-variant-ghost)) & {
    opacity: 0.9;
  }
}

.rt-SelectContent {
  --scrollarea-scrollbar-vertical-margin-top: var(--select-content-padding);
  --scrollarea-scrollbar-vertical-margin-bottom: var(--select-content-padding);
  --scrollarea-scrollbar-horizontal-margin-left: var(--select-content-padding);
  --scrollarea-scrollbar-horizontal-margin-right: var(--select-content-padding);

  overflow: hidden;
  background-color: var(--color-panel-solid);

  &:where([data-side]) {
    min-width: var(--radix-select-trigger-width);
    max-height: var(--radix-select-content-available-height);
    transform-origin: var(--radix-select-content-transform-origin);
  }
}

.rt-SelectViewport {
  box-sizing: border-box;
  padding: var(--select-content-padding);

  :where(.rt-SelectContent:has(.rt-ScrollAreaScrollbar[data-orientation='vertical'])) & {
    padding-right: var(--space-3);
  }
}

.rt-SelectItem {
  display: flex;
  align-items: center;
  height: var(--select-item-height);
  padding-left: var(--select-item-indicator-width);
  padding-right: var(--select-item-indicator-width);
  position: relative;
  box-sizing: border-box;
  outline: none;
  scroll-margin: var(--select-content-padding) 0;

  /* Fix sticky text highlighting after selection in Firefox */
  user-select: none;

  /* Cursors */
  cursor: var(--cursor-menu-item);
  &:where([data-disabled]) {
    cursor: default;
  }
}

.rt-SelectItemIndicator {
  position: absolute;
  left: 0;
  width: var(--select-item-indicator-width);
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

.rt-SelectSeparator {
  height: 1px;
  margin-top: var(--space-2);
  margin-bottom: var(--space-2);
  margin-left: var(--select-item-indicator-width);
  margin-right: var(--select-separator-margin-right);
}

.rt-SelectLabel {
  display: flex;
  align-items: center;
  height: var(--select-item-height);
  padding-left: var(--select-item-indicator-width);
  padding-right: var(--select-item-indicator-width);
  color: var(--gray-a10);
  user-select: none;
  cursor: default;

  :where(.rt-SelectItem) + & {
    margin-top: var(--space-2);
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * TRIGGER SIZES                                                                                   *
 *                                                                                                 *
 ***************************************************************************************************/

.rt-SelectTrigger {
  color: var(--gray-12);

  &:where(:not(.rt-variant-ghost)) {
    box-sizing: border-box;
    height: var(--select-trigger-height);
  }
  &:where(.rt-variant-ghost) {
    box-sizing: content-box;
    height: fit-content;
    padding: var(--select-trigger-ghost-padding-y) var(--select-trigger-ghost-padding-x);

    /* We reset the defined margin variables to avoid inheriting them from a higher component */
    /* If a margin IS defined on the component itself, the utility class will win and reset it */
    --margin-top: 0px;
    --margin-right: 0px;
    --margin-bottom: 0px;
    --margin-left: 0px;

    /* Define the overrides to incorporate the negative margins */
    --margin-top-override: calc(var(--margin-top) - var(--select-trigger-ghost-padding-y));
    --margin-right-override: calc(var(--margin-right) - var(--select-trigger-ghost-padding-x));
    --margin-bottom-override: calc(var(--margin-bottom) - var(--select-trigger-ghost-padding-y));
    --margin-left-override: calc(var(--margin-left) - var(--select-trigger-ghost-padding-x));

    /* Reset the overrides on direct children */
    :where(&) > * {
      --margin-top-override: initial;
      --margin-right-override: initial;
      --margin-bottom-override: initial;
      --margin-left-override: initial;
    }

    margin: var(--margin-top-override) var(--margin-right-override) var(--margin-bottom-override)
      var(--margin-left-override);
  }
}

@breakpoints {
  .rt-SelectTrigger {
    &:where(.rt-r-size-1) {
      --select-trigger-height: var(--space-5);
      gap: var(--space-1);
      font-size: var(--font-size-1);
      line-height: var(--line-height-1);
      letter-spacing: var(--letter-spacing-1);
      border-radius: max(var(--radius-1), var(--radius-full));

      &:where(:not(.rt-variant-ghost)) {
        padding-left: var(--space-2);
        padding-right: var(--space-2);
      }
      &:where(.rt-variant-ghost) {
        --select-trigger-ghost-padding-x: var(--space-2);
        --select-trigger-ghost-padding-y: var(--space-1);
      }
    }
    &:where(.rt-r-size-2) {
      --select-trigger-height: var(--space-6);
      gap: calc(var(--space-1) * 1.5);
      font-size: var(--font-size-2);
      line-height: var(--line-height-2);
      letter-spacing: var(--letter-spacing-2);
      border-radius: max(var(--radius-2), var(--radius-full));

      &:where(:not(.rt-variant-ghost)) {
        padding-left: var(--space-3);
        padding-right: var(--space-3);
      }
      &:where(.rt-variant-ghost) {
        --select-trigger-ghost-padding-x: var(--space-2);
        --select-trigger-ghost-padding-y: var(--space-1);
      }
    }
    &:where(.rt-r-size-3) {
      --select-trigger-height: var(--space-7);
      gap: var(--space-2);
      font-size: var(--font-size-3);
      line-height: var(--line-height-3);
      letter-spacing: var(--letter-spacing-3);
      border-radius: max(var(--radius-3), var(--radius-full));

      &:where(:not(.rt-variant-ghost)) {
        padding-left: var(--space-4);
        padding-right: var(--space-4);
      }
      &:where(.rt-variant-ghost) {
        --select-trigger-ghost-padding-x: var(--space-3);
        --select-trigger-ghost-padding-y: calc(var(--space-1) * 1.5);
      }
      & :where(.rt-SelectIcon) {
        width: 11px;
        height: 11px;
      }
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * CONTENT SIZES                                                                                   *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-SelectContent {
    &:where(.rt-r-size-1) {
      --select-content-padding: var(--space-1);
      --select-item-height: var(--space-5);
      --select-item-indicator-width: calc(var(--space-5) / 1.2);
      --select-separator-margin-right: var(--space-2);
      border-radius: var(--radius-3);

      & :where(.rt-SelectLabel) {
        font-size: var(--font-size-1);
        letter-spacing: var(--letter-spacing-1);
        line-height: var(--line-height-1);
      }
      & :where(.rt-SelectItem) {
        font-size: var(--font-size-1);
        line-height: var(--line-height-1);
        letter-spacing: var(--letter-spacing-1);
        border-radius: var(--radius-1);
      }
      & :where(.rt-SelectItemIndicatorIcon) {
        width: calc(8px * var(--scaling));
        height: calc(8px * var(--scaling));
      }
    }
    &:where(.rt-r-size-2, .rt-r-size-3) {
      --select-content-padding: var(--space-2);
      --select-item-height: var(--space-6);
      --select-item-indicator-width: var(--space-5);
      --select-separator-margin-right: var(--space-3);
      border-radius: var(--radius-4);

      & :where(.rt-SelectLabel) {
        font-size: var(--font-size-2);
        letter-spacing: var(--letter-spacing-2);
        line-height: var(--line-height-2);
      }
      & :where(.rt-SelectItem) {
        line-height: var(--line-height-2);
        border-radius: var(--radius-2);
      }
    }
    &:where(.rt-r-size-2) {
      & :where(.rt-SelectItem) {
        font-size: var(--font-size-2);
        letter-spacing: var(--letter-spacing-2);
      }
      & :where(.rt-SelectItemIndicatorIcon) {
        width: calc(10px * var(--scaling));
        height: calc(10px * var(--scaling));
      }
    }
    &:where(.rt-r-size-3) {
      & :where(.rt-SelectItem) {
        font-size: var(--font-size-3);
        letter-spacing: var(--letter-spacing-3);
      }
      & :where(.rt-SelectItemIndicatorIcon) {
        width: calc(10px * var(--scaling));
        height: calc(10px * var(--scaling));
      }
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * TRIGGER VARIANTS                                                                                *
 *                                                                                                 *
 ***************************************************************************************************/

/* surface */

.rt-SelectTrigger:where(.rt-variant-surface) {
  color: var(--gray-12);
  background-color: var(--color-surface);
  box-shadow: inset 0 0 0 1px var(--gray-a7);

  @media (hover: hover) {
    &:where(:hover) {
      box-shadow: inset 0 0 0 1px var(--gray-a8);
    }
  }
  &:where([data-state='open']) {
    box-shadow: inset 0 0 0 1px var(--gray-a8);
  }
  &:where(:disabled) {
    color: var(--gray-a11);
    background-color: var(--gray-a2);
    box-shadow: inset 0 0 0 1px var(--gray-a6);
  }
  &:where([data-placeholder]) {
    & :where(.rt-SelectTriggerInner) {
      color: var(--gray-a10);
    }
  }
}

/* classic */

/* prettier-ignore */
:where(.radix-themes) {
  --select-trigger-classic-box-shadow:
		inset 0 0 0 1px var(--gray-a5),
		inset 0 2px 1px var(--white-a11),
		inset 0 -2px 1px var(--gray-a4)
	;
}

/* prettier-ignore */
:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  --select-trigger-classic-box-shadow:
    inset 0 0 0 1px var(--white-a4),
    inset 0 1px 1px var(--white-a4),
    inset 0 -1px 1px var(--black-a9)
	;
}

.rt-SelectTrigger:where(.rt-variant-classic) {
  color: var(--gray-12);
  background-image: linear-gradient(var(--gray-2), var(--gray-1));
  box-shadow: var(--select-trigger-classic-box-shadow);
  position: relative;
  z-index: 0;

  &::before {
    content: '';
    position: absolute;
    z-index: -1;
    inset: 0;
    border: 2px solid transparent;
    background-clip: content-box;
    border-radius: inherit;
    pointer-events: none;
    background-image: linear-gradient(var(--black-a1) -20%, transparent, var(--white-a1) 130%),
      linear-gradient(var(--color-surface), transparent);
  }

  @media (hover: hover) {
    &:where(:hover) {
      box-shadow: inset 0 0 0 1px var(--gray-a3), var(--select-trigger-classic-box-shadow);

      &::before {
        background-image: linear-gradient(var(--black-a1) -15%, transparent, var(--white-a1) 120%),
          linear-gradient(var(--gray-2), var(--gray-1));
      }
    }
  }
  &:where([data-state='open']) {
    box-shadow: inset 0 0 0 1px var(--gray-a3), var(--select-trigger-classic-box-shadow);

    &::before {
      background-image: linear-gradient(var(--black-a1) -15%, transparent, var(--white-a1) 120%),
        linear-gradient(var(--gray-2), var(--gray-1));
    }
  }
  &:where(:disabled) {
    color: var(--gray-a11);
    background-color: var(--gray-2);
    background-image: none;
    /* Use disabled button style for the shadow */
    box-shadow: var(--base-button-classic-disabled-box-shadow);
    &::before {
      background-color: var(--gray-a2);
      background-image: linear-gradient(var(--black-a1) -20%, transparent, var(--white-a1));
    }
  }
  &:where([data-placeholder]) {
    & :where(.rt-SelectTriggerInner) {
      color: var(--gray-a10);
    }
  }
}

/* soft / ghost */

.rt-SelectTrigger:where(.rt-variant-soft),
.rt-SelectTrigger:where(.rt-variant-ghost) {
  color: var(--accent-12);

  &:where([data-placeholder]) {
    & :where(.rt-SelectTriggerInner) {
      color: var(--accent-12);
      opacity: 0.6;
    }
  }
}

.rt-SelectTrigger:where(.rt-variant-soft) {
  background-color: var(--accent-a3);

  @media (hover: hover) {
    &:where(:hover) {
      background-color: var(--accent-a4);
    }
  }
  &:where([data-state='open']) {
    background-color: var(--accent-a4);
  }
  &:where(:focus-visible) {
    /* Use gray outline when component color is gray */
    outline-color: var(--accent-8);
  }
  &:where(:disabled) {
    color: var(--gray-a11);
    background-color: var(--gray-a3);
  }
}

.rt-SelectTrigger:where(.rt-variant-ghost) {
  @media (hover: hover) {
    &:where(:hover) {
      background-color: var(--accent-a3);
    }
  }
  &:where([data-state='open']) {
    background-color: var(--accent-a3);
  }
  &:where(:disabled) {
    color: var(--gray-a11);
    background-color: transparent;
  }
}

/* all disabled */
.rt-SelectTrigger {
  &:where(:disabled) {
    & :where(.rt-SelectIcon) {
      color: var(--gray-a9);
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * MENU VARIANTS                                                                                   *
 *                                                                                                 *
 ***************************************************************************************************/

.rt-SelectContent {
  box-shadow: var(--shadow-5);
}

.rt-SelectItem:where([data-disabled]) {
  color: var(--gray-a8);
}

.rt-SelectSeparator {
  background-color: var(--gray-a6);
}

/* solid */

.rt-SelectContent:where(.rt-variant-solid) {
  & :where(.rt-SelectItem[data-highlighted]) {
    background-color: var(--accent-9);
    color: var(--accent-contrast);
  }
  &:where(.rt-high-contrast) :where(.rt-SelectItem[data-highlighted]) {
    background-color: var(--accent-12);
    color: var(--accent-1);
  }
}

/* soft */

.rt-SelectContent:where(.rt-variant-soft) {
  & :where(.rt-SelectItem[data-highlighted]) {
    background-color: var(--accent-a4);
  }
}


================================================
File: packages/radix-ui-themes/src/components/select.props.tsx
================================================
import { colorPropDef } from '../props/color.prop.js';
import { highContrastPropDef } from '../props/high-contrast.prop.js';
import { radiusPropDef } from '../props/radius.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;

const selectRootPropDefs = {
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '2', responsive: true },
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
};

const triggerVariants = ['classic', 'surface', 'soft', 'ghost'] as const;

const selectTriggerPropDefs = {
  variant: { type: 'enum', className: 'rt-variant', values: triggerVariants, default: 'surface' },
  ...colorPropDef,
  ...radiusPropDef,
  placeholder: { type: 'string' },
} satisfies {
  variant: PropDef<(typeof triggerVariants)[number]>;
  placeholder: PropDef<string>;
};

const contentVariants = ['solid', 'soft'] as const;

const selectContentPropDefs = {
  variant: { type: 'enum', className: 'rt-variant', values: contentVariants, default: 'solid' },
  ...colorPropDef,
  ...highContrastPropDef,
} satisfies {
  variant: PropDef<(typeof contentVariants)[number]>;
};

export { selectRootPropDefs, selectTriggerPropDefs, selectContentPropDefs };


================================================
File: packages/radix-ui-themes/src/components/select.tsx
================================================
'use client';

import * as React from 'react';
import classNames from 'classnames';
import { Select as SelectPrimitive, ScrollArea as ScrollAreaPrimitive } from 'radix-ui';

import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';
import { ChevronDownIcon, ThickCheckIcon } from './icons.js';
import {
  selectRootPropDefs,
  selectTriggerPropDefs,
  selectContentPropDefs,
} from './select.props.js';
import { useThemeContext, Theme } from './theme.js';

import type { MarginProps } from '../props/margin.props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';

type SelectRootOwnProps = GetPropDefTypes<typeof selectRootPropDefs>;

type SelectContextValue = SelectRootOwnProps;
const SelectContext = React.createContext<SelectContextValue>({});

interface SelectRootProps extends SelectPrimitive.SelectProps, SelectContextValue {}
const SelectRoot: React.FC<SelectRootProps> = (props) => {
  const { children, size = selectRootPropDefs.size.default, ...rootProps } = props;
  return (
    <SelectPrimitive.Root {...rootProps}>
      <SelectContext.Provider value={React.useMemo(() => ({ size }), [size])}>
        {children}
      </SelectContext.Provider>
    </SelectPrimitive.Root>
  );
};
SelectRoot.displayName = 'Select.Root';

type SelectTriggerElement = React.ElementRef<typeof SelectPrimitive.Trigger>;
type SelectTriggerOwnProps = GetPropDefTypes<typeof selectTriggerPropDefs>;
interface SelectTriggerProps
  extends ComponentPropsWithout<typeof SelectPrimitive.Trigger, RemovedProps>,
    MarginProps,
    SelectTriggerOwnProps {}
const SelectTrigger = React.forwardRef<SelectTriggerElement, SelectTriggerProps>(
  (props, forwardedRef) => {
    const context = React.useContext(SelectContext);
    const { children, className, color, radius, placeholder, ...triggerProps } = extractProps(
      // Pass size value from the context to generate styles
      { size: context?.size, ...props },
      // Pass size prop def to allow it to be extracted
      { size: selectRootPropDefs.size },
      selectTriggerPropDefs,
      marginPropDefs
    );
    return (
      <SelectPrimitive.Trigger asChild>
        <button
          data-accent-color={color}
          data-radius={radius}
          {...triggerProps}
          ref={forwardedRef}
          className={classNames('rt-reset', 'rt-SelectTrigger', className)}
        >
          <span className="rt-SelectTriggerInner">
            <SelectPrimitive.Value placeholder={placeholder}>{children}</SelectPrimitive.Value>
          </span>
          <SelectPrimitive.Icon asChild>
            <ChevronDownIcon className="rt-SelectIcon" />
          </SelectPrimitive.Icon>
        </button>
      </SelectPrimitive.Trigger>
    );
  }
);
SelectTrigger.displayName = 'Select.Trigger';

type SelectContentElement = React.ElementRef<typeof SelectPrimitive.Content>;
type SelectContentOwnProps = GetPropDefTypes<typeof selectContentPropDefs>;
interface SelectContentProps
  extends ComponentPropsWithout<typeof SelectPrimitive.Content, RemovedProps>,
    SelectContentOwnProps {
  container?: React.ComponentPropsWithoutRef<typeof SelectPrimitive.Portal>['container'];
}
const SelectContent = React.forwardRef<SelectContentElement, SelectContentProps>(
  (props, forwardedRef) => {
    const context = React.useContext(SelectContext);
    const { className, children, color, container, ...contentProps } = extractProps(
      // Pass size value from the context to generate styles
      { size: context?.size, ...props },
      // Pass size prop def to allow it to be extracted
      { size: selectRootPropDefs.size },
      selectContentPropDefs
    );
    const themeContext = useThemeContext();
    const resolvedColor = color || themeContext.accentColor;
    return (
      <SelectPrimitive.Portal container={container}>
        <Theme asChild>
          <SelectPrimitive.Content
            data-accent-color={resolvedColor}
            sideOffset={4}
            {...contentProps}
            asChild={false}
            ref={forwardedRef}
            className={classNames(
              { 'rt-PopperContent': contentProps.position === 'popper' },
              'rt-SelectContent',
              className
            )}
          >
            <ScrollAreaPrimitive.Root type="auto" className="rt-ScrollAreaRoot">
              <SelectPrimitive.Viewport asChild className="rt-SelectViewport">
                <ScrollAreaPrimitive.Viewport
                  className="rt-ScrollAreaViewport"
                  style={{ overflowY: undefined }}
                >
                  {children}
                </ScrollAreaPrimitive.Viewport>
              </SelectPrimitive.Viewport>
              <ScrollAreaPrimitive.Scrollbar
                className="rt-ScrollAreaScrollbar rt-r-size-1"
                orientation="vertical"
              >
                <ScrollAreaPrimitive.Thumb className="rt-ScrollAreaThumb" />
              </ScrollAreaPrimitive.Scrollbar>
            </ScrollAreaPrimitive.Root>
          </SelectPrimitive.Content>
        </Theme>
      </SelectPrimitive.Portal>
    );
  }
);
SelectContent.displayName = 'Select.Content';

type SelectItemElement = React.ElementRef<typeof SelectPrimitive.Item>;
interface SelectItemProps
  extends ComponentPropsWithout<typeof SelectPrimitive.Item, RemovedProps> {}
const SelectItem = React.forwardRef<SelectItemElement, SelectItemProps>((props, forwardedRef) => {
  const { className, children, ...itemProps } = props;
  return (
    <SelectPrimitive.Item
      {...itemProps}
      asChild={false}
      ref={forwardedRef}
      className={classNames('rt-SelectItem', className)}
    >
      <SelectPrimitive.ItemIndicator className="rt-SelectItemIndicator">
        <ThickCheckIcon className="rt-SelectItemIndicatorIcon" />
      </SelectPrimitive.ItemIndicator>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  );
});
SelectItem.displayName = 'Select.Item';

type SelectGroupElement = React.ElementRef<typeof SelectPrimitive.Group>;
interface SelectGroupProps
  extends ComponentPropsWithout<typeof SelectPrimitive.Group, RemovedProps> {}
const SelectGroup = React.forwardRef<SelectGroupElement, SelectGroupProps>(
  ({ className, ...props }, forwardedRef) => (
    <SelectPrimitive.Group
      {...props}
      asChild={false}
      ref={forwardedRef}
      className={classNames('rt-SelectGroup', className)}
    />
  )
);
SelectGroup.displayName = 'Select.Group';

type SelectLabelElement = React.ElementRef<typeof SelectPrimitive.Label>;
interface SelectLabelProps
  extends ComponentPropsWithout<typeof SelectPrimitive.Label, RemovedProps> {}
const SelectLabel = React.forwardRef<SelectLabelElement, SelectLabelProps>(
  ({ className, ...props }, forwardedRef) => (
    <SelectPrimitive.Label
      {...props}
      asChild={false}
      ref={forwardedRef}
      className={classNames('rt-SelectLabel', className)}
    />
  )
);
SelectLabel.displayName = 'Select.Label';

type SelectSeparatorElement = React.ElementRef<typeof SelectPrimitive.Separator>;
interface SelectSeparatorProps
  extends ComponentPropsWithout<typeof SelectPrimitive.Separator, RemovedProps> {}
const SelectSeparator = React.forwardRef<SelectSeparatorElement, SelectSeparatorProps>(
  ({ className, ...props }, forwardedRef) => (
    <SelectPrimitive.Separator
      {...props}
      asChild={false}
      ref={forwardedRef}
      className={classNames('rt-SelectSeparator', className)}
    />
  )
);
SelectSeparator.displayName = 'Select.Separator';

export {
  SelectRoot as Root,
  SelectTrigger as Trigger,
  SelectContent as Content,
  SelectItem as Item,
  SelectGroup as Group,
  SelectLabel as Label,
  SelectSeparator as Separator,
};

export type {
  SelectRootProps as RootProps,
  SelectTriggerProps as TriggerProps,
  SelectContentProps as ContentProps,
  SelectItemProps as ItemProps,
  SelectGroupProps as GroupProps,
  SelectLabelProps as LabelProps,
  SelectSeparatorProps as SeparatorProps,
};


================================================
File: packages/radix-ui-themes/src/components/separator.css
================================================
.rt-Separator {
  display: block;
  background-color: var(--accent-a6);
}

/***************************************************************************************************
 *                                                                                                 *
 * ORIENTATION                                                                                     *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-Separator {
    &:where(.rt-r-orientation-horizontal) {
      width: var(--separator-size);
      height: 1px;
    }
    &:where(.rt-r-orientation-vertical) {
      width: 1px;
      height: var(--separator-size);
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-Separator {
    &:where(.rt-r-size-1) {
      --separator-size: var(--space-4);
    }
    &:where(.rt-r-size-2) {
      --separator-size: var(--space-6);
    }
    &:where(.rt-r-size-3) {
      --separator-size: var(--space-9);
    }
    &:where(.rt-r-size-4) {
      --separator-size: 100%;
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/separator.props.tsx
================================================
import { colorPropDef } from '../props/color.prop.js';

import type { PropDef } from '../props/prop-def.js';

const orientationValues = ['horizontal', 'vertical'] as const;
const sizes = ['1', '2', '3', '4'] as const;

const separatorPropDefs = {
  orientation: {
    type: 'enum',
    className: 'rt-r-orientation',
    values: orientationValues,
    default: 'horizontal',
    responsive: true,
  },
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '1', responsive: true },
  color: { ...colorPropDef.color, default: 'gray' },
  decorative: { type: 'boolean', default: true },
} satisfies {
  orientation: PropDef<(typeof orientationValues)[number]>;
  size: PropDef<(typeof sizes)[number]>;
  color: typeof colorPropDef.color;
  decorative: PropDef<boolean>;
};

export { separatorPropDefs };


================================================
File: packages/radix-ui-themes/src/components/separator.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';

import { separatorPropDefs } from './separator.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type SeparatorElement = React.ElementRef<'span'>;
type SeparatorOwnProps = GetPropDefTypes<typeof separatorPropDefs>;
interface SeparatorProps
  extends ComponentPropsWithout<'span', RemovedProps>,
    MarginProps,
    SeparatorOwnProps {}
const Separator = React.forwardRef<SeparatorElement, SeparatorProps>((props, forwardedRef) => {
  const { className, color, decorative, ...separatorProps } = extractProps(
    props,
    separatorPropDefs,
    marginPropDefs
  );
  return (
    <span
      data-accent-color={color}
      role={decorative ? undefined : 'separator'}
      {...separatorProps}
      ref={forwardedRef}
      className={classNames('rt-Separator', className)}
    />
  );
});
Separator.displayName = 'Separator';

export { Separator };
export type { SeparatorProps };


================================================
File: packages/radix-ui-themes/src/components/skeleton.css
================================================
.rt-Skeleton {
  --skeleton-radius: var(--skeleton-radius-override);
  --skeleton-height: var(--skeleton-height-override);
  border-radius: var(--radius-1);
  animation: rt-skeleton-pulse 1000ms infinite alternate-reverse !important;
  background-image: none !important;
  background-clip: border-box !important;
  border: none !important;
  box-shadow: none !important;
  box-decoration-break: clone !important;
  color: transparent !important;
  outline: none !important;
  pointer-events: none !important;
  user-select: none !important;
  cursor: default !important;
}

/*
 * Take font differences out of equation for inline Skeletons that just wrap text.
 * This makes the dimensions consistent between the following non-Skeleton and Skeleton text:
 * ```
 * <Text>Example text</Text>
 *
 * <Text>
 *   <Skeleton>Example text</Skeleton>
 * </Text>
 * ```
 *
 * Will NOT collapse Skeletons as the browsers use line-height on inline elements just for alignment.
 */
.rt-Skeleton:where([data-inline-skeleton]) {
  line-height: 0;
  /* Font metrics on Arial yield much nicer height for the text background bounding box */
  font-family: Arial, sans-serif !important;
}

:where(.rt-Skeleton:empty) {
  display: block;
  height: var(--space-3);
}

.rt-Skeleton > *,
.rt-Skeleton::after,
.rt-Skeleton::before {
  visibility: hidden !important;
}

@keyframes rt-skeleton-pulse {
  from {
    background-color: var(--gray-a3);
  }
  to {
    background-color: var(--gray-a4);
  }
}


================================================
File: packages/radix-ui-themes/src/components/skeleton.props.tsx
================================================
import { heightPropDefs } from '../props/height.props.js';
import { widthPropDefs } from '../props/width.props.js';

import type { PropDef } from '../props/prop-def.js';

const skeletonPropDefs = {
  loading: { type: 'boolean', default: true },
  ...widthPropDefs,
  ...heightPropDefs,
} satisfies {
  loading: PropDef<boolean>;
};

export { skeletonPropDefs };


================================================
File: packages/radix-ui-themes/src/components/skeleton.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { inert } from '../helpers/inert.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';
import { skeletonPropDefs } from './skeleton.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';

type SkeletonElement = React.ElementRef<'span'>;
type SkeletonOwnProps = GetPropDefTypes<typeof skeletonPropDefs>;
interface SkeletonProps
  extends ComponentPropsWithout<'span', RemovedProps>,
    MarginProps,
    SkeletonOwnProps {}
const Skeleton = React.forwardRef<SkeletonElement, SkeletonProps>((props, forwardedRef) => {
  const { children, className, loading, ...skeletonProps } = extractProps(
    props,
    skeletonPropDefs,
    marginPropDefs
  );

  if (!loading) return children;

  const Tag = React.isValidElement(children) ? Slot.Root : 'span';

  return (
    <Tag
      ref={forwardedRef}
      aria-hidden
      className={classNames('rt-Skeleton', className)}
      data-inline-skeleton={React.isValidElement(children) ? undefined : true}
      tabIndex={-1}
      // @ts-expect-error
      inert={inert}
      {...skeletonProps}
    >
      {children}
    </Tag>
  );
});
Skeleton.displayName = 'Skeleton';

export { Skeleton };
export type { SkeletonProps };


================================================
File: packages/radix-ui-themes/src/components/slider.css
================================================
.rt-SliderRoot {
  --slider-thumb-size: calc(var(--slider-track-size) + var(--space-1));

  position: relative;
  display: flex;
  align-items: center;
  flex-grow: 1;

  border-radius: max(
    calc(var(--radius-factor) * var(--slider-track-size) / 3),
    calc(var(--radius-factor) * var(--radius-thumb))
  );

  /* ensures no selection */
  user-select: none;
  /* disable browser handling of all panning and zooming gestures on touch devices */
  touch-action: none;

  &:where([data-orientation='horizontal']) {
    width: stretch;
    height: var(--slider-track-size);
  }
  &:where([data-orientation='vertical']) {
    height: stretch;
    flex-direction: column;
    width: var(--slider-track-size);
  }
}

.rt-SliderTrack {
  overflow: hidden;
  position: relative;
  flex-grow: 1;

  border-radius: inherit;

  &:where([data-orientation='horizontal']) {
    height: var(--slider-track-size);
  }
  &:where([data-orientation='vertical']) {
    width: var(--slider-track-size);
  }
}

.rt-SliderRange {
  position: absolute;
  border-radius: inherit;

  &:where([data-orientation='horizontal']) {
    height: 100%;
  }

  &:where([data-orientation='vertical']) {
    width: 100%;
  }
}

.rt-SliderThumb {
  display: block;
  width: var(--slider-thumb-size);
  height: var(--slider-thumb-size);

  /* Safari */
  outline: 0;

  &::before {
    content: '';
    position: absolute;
    z-index: -1;
    width: calc(var(--slider-thumb-size) * 3);
    height: calc(var(--slider-thumb-size) * 3);
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  /* Larger visible thumb so that it slightly overshoots the range */
  &::after {
    content: '';
    position: absolute;
    inset: calc(-0.25 * var(--slider-track-size));
    background-color: white;
    border-radius: max(var(--radius-1), var(--radius-thumb));
    box-shadow: var(--slider-thumb-box-shadow);
    cursor: var(--cursor-slider-thumb);
  }

  &:where(:focus-visible)::after {
    box-shadow: var(--slider-thumb-box-shadow), 0 0 0 3px var(--accent-3), 0 0 0 5px var(--focus-8);
  }

  &:where(:active) {
    cursor: var(--cursor-slider-thumb-active);
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-SliderRoot {
    &:where(.rt-r-size-1) {
      --slider-track-size: calc(var(--space-2) * 0.75);
    }
    &:where(.rt-r-size-2) {
      --slider-track-size: var(--space-2);
    }
    &:where(.rt-r-size-3) {
      --slider-track-size: calc(var(--space-2) * 1.25);
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

/* surface */

.rt-SliderRoot:where(.rt-variant-surface) {
  & :where(.rt-SliderTrack) {
    background-color: var(--gray-a3);
    box-shadow: inset 0 0 0 1px var(--gray-a5);

    &:where([data-disabled]) {
      box-shadow: inset 0 0 0 1px var(--gray-a4);
    }
  }

  & :where(.rt-SliderRange) {
    background-color: var(--accent-track);
    background-image: var(--slider-range-high-contrast-background-image);
    box-shadow: inset 0 0 0 1px var(--gray-a5);
  }

  & :where(.rt-SliderThumb) {
    --slider-thumb-box-shadow: 0 0 0 1px var(--black-a4);

    &:where([data-disabled])::after {
      background-color: var(--gray-1);
      box-shadow: 0 0 0 1px var(--gray-6);
    }
  }
}

/* classic */

.rt-SliderRoot:where(.rt-variant-classic) {
  & :where(.rt-SliderTrack) {
    background-color: var(--gray-a3);
    position: relative;

    &::before {
      content: '';
      inset: 0;
      position: absolute;
      border-radius: inherit;
      box-shadow: var(--shadow-1);
    }
    &:where([data-disabled])::before {
      opacity: 0.5;
    }
  }

  & :where(.rt-SliderRange) {
    background-color: var(--accent-track);
    background-image: var(--slider-range-high-contrast-background-image);
    box-shadow: inset 0 0 0 1px var(--gray-a3), inset 0 0 0 1px var(--accent-a4), inset 0 0 0 1px var(--black-a1),
      inset 0 1.5px 2px 0 var(--black-a2);

    &:where(.rt-high-contrast) {
      box-shadow: inset 0 0 0 1px var(--gray-a3), inset 0 0 0 1px var(--black-a2), inset 0 1.5px 2px 0 var(--black-a2);
    }
  }

  & :where(.rt-SliderThumb) {
    /* prettier-ignore */
    --slider-thumb-box-shadow:
      0 0 0 1px var(--black-a3),
      0 1px 3px var(--black-a1),
      0 2px 4px -1px var(--black-a1);

    &:where([data-disabled])::after {
      background-color: var(--gray-1);
      box-shadow: 0 0 0 1px var(--gray-6);
    }
  }
}

/* soft */

.rt-SliderRoot:where(.rt-variant-soft) {
  & :where(.rt-SliderTrack) {
    background-color: var(--gray-a4);
    /* Blend with white to increase contrast in dark mode */
    background-image: linear-gradient(var(--white-a1), var(--white-a1));

    &:where([data-disabled]) {
      background-color: var(--gray-a4);
      background-image: none;
    }
  }

  & :where(.rt-SliderRange) {
    background-image: linear-gradient(var(--accent-a5), var(--accent-a5)),
      var(--slider-range-high-contrast-background-image);
    background-color: var(--accent-6);
  }

  & :where(.rt-SliderThumb) {
    --slider-thumb-box-shadow: 0 0 0 1px var(--black-a3), 0 0 0 1px var(--gray-a2), 0 0 0 1px var(--accent-a2),
      0 1px 2px var(--gray-a4), 0 1px 3px -0.5px var(--gray-a3);

    &:where([data-disabled])::after {
      background-color: var(--gray-1);
      box-shadow: 0 0 0 1px var(--gray-5);
    }
  }
}

/* all high-contrast */

:where(.radix-themes) {
  --slider-range-high-contrast-background-image: linear-gradient(var(--black-a8), var(--black-a8));
}
:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  --slider-range-high-contrast-background-image: none;
}
.rt-SliderRoot:where(:not(.rt-high-contrast)) {
  --slider-range-high-contrast-background-image: none;
}

:where(.radix-themes) {
  --slider-disabled-blend-mode: multiply;
}
:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  --slider-disabled-blend-mode: screen;
}

/* all disabled Sliders */

[data-disabled] {
  .rt-SliderRoot:where(&) {
    cursor: var(--cursor-disabled);
    mix-blend-mode: var(--slider-disabled-blend-mode);
  }
  .rt-SliderRange:where(&) {
    background-color: transparent;
    background-image: none;
    box-shadow: none;
  }
  .rt-SliderThumb:where(&),
  .rt-SliderThumb:where(&)::after {
    cursor: var(--cursor-disabled);
  }
}


================================================
File: packages/radix-ui-themes/src/components/slider.props.tsx
================================================
import { colorPropDef } from '../props/color.prop.js';
import { highContrastPropDef } from '../props/high-contrast.prop.js';
import { radiusPropDef } from '../props/radius.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;
const variants = ['classic', 'surface', 'soft'] as const;

const sliderPropDefs = {
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '2', responsive: true },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'surface' },
  ...colorPropDef,
  ...highContrastPropDef,
  ...radiusPropDef,
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
};

export { sliderPropDefs };


================================================
File: packages/radix-ui-themes/src/components/slider.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slider as SliderPrimitive } from 'radix-ui';

import { sliderPropDefs } from './slider.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type SliderElement = React.ElementRef<typeof SliderPrimitive.Root>;
type SliderOwnProps = GetPropDefTypes<typeof sliderPropDefs>;
interface SliderProps
  extends ComponentPropsWithout<
      typeof SliderPrimitive.Root,
      'asChild' | 'color' | 'children' | 'defaultChecked'
    >,
    MarginProps,
    SliderOwnProps {}
const Slider = React.forwardRef<SliderElement, SliderProps>((props, forwardedRef) => {
  const { className, color, radius, tabIndex, ...sliderProps } = extractProps(
    props,
    sliderPropDefs,
    marginPropDefs
  );
  return (
    <SliderPrimitive.Root
      data-accent-color={color}
      data-radius={radius}
      ref={forwardedRef}
      {...sliderProps}
      asChild={false}
      className={classNames('rt-SliderRoot', className)}
    >
      <SliderPrimitive.Track className="rt-SliderTrack">
        <SliderPrimitive.Range
          className={classNames('rt-SliderRange', { 'rt-high-contrast': props.highContrast })}
          data-inverted={sliderProps.inverted ? '' : undefined}
        />
      </SliderPrimitive.Track>
      {(sliderProps.value ?? sliderProps.defaultValue ?? []).map((value, index) => (
        <SliderPrimitive.Thumb
          key={index}
          className="rt-SliderThumb"
          {...(tabIndex !== undefined ? { tabIndex } : undefined)}
        />
      ))}
    </SliderPrimitive.Root>
  );
});
Slider.displayName = 'Slider';

export { Slider };
export type { SliderProps };


================================================
File: packages/radix-ui-themes/src/components/slot.tsx
================================================
import { Slot as SlotPrimitive } from 'radix-ui';
export const Root = SlotPrimitive.Root;
export const Slot = SlotPrimitive.Root;
export const Slottable = SlotPrimitive.Slottable;


================================================
File: packages/radix-ui-themes/src/components/spinner.css
================================================
.radix-themes {
  --spinner-animation-duration: 800ms;
  --spinner-opacity: 0.65;
}

.rt-Spinner {
  display: block;
  position: relative;
  opacity: var(--spinner-opacity);
}

.rt-SpinnerLeaf {
  position: absolute;
  top: 0;
  left: calc(50% - 12.5% / 2);
  width: 12.5%;
  height: 100%;
  animation: rt-spinner-leaf-fade var(--spinner-animation-duration) linear infinite;

  &::before {
    content: '';
    display: block;
    width: 100%;
    height: 30%;
    border-radius: var(--radius-1);
    background-color: currentColor;
  }

  &:where(:nth-child(1)) {
    transform: rotate(0deg);
    animation-delay: calc(-8 / 8 * var(--spinner-animation-duration));
  }
  &:where(:nth-child(2)) {
    transform: rotate(45deg);
    animation-delay: calc(-7 / 8 * var(--spinner-animation-duration));
  }
  &:where(:nth-child(3)) {
    transform: rotate(90deg);
    animation-delay: calc(-6 / 8 * var(--spinner-animation-duration));
  }
  &:where(:nth-child(4)) {
    transform: rotate(135deg);
    animation-delay: calc(-5 / 8 * var(--spinner-animation-duration));
  }
  &:where(:nth-child(5)) {
    transform: rotate(180deg);
    animation-delay: calc(-4 / 8 * var(--spinner-animation-duration));
  }
  &:where(:nth-child(6)) {
    transform: rotate(225deg);
    animation-delay: calc(-3 / 8 * var(--spinner-animation-duration));
  }
  &:where(:nth-child(7)) {
    transform: rotate(270deg);
    animation-delay: calc(-2 / 8 * var(--spinner-animation-duration));
  }
  &:where(:nth-child(8)) {
    transform: rotate(315deg);
    animation-delay: calc(-1 / 8 * var(--spinner-animation-duration));
  }
}

@keyframes rt-spinner-leaf-fade {
  from {
    opacity: 1;
  }
  to {
    opacity: 0.25;
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-Spinner {
    &:where(.rt-r-size-1) {
      width: var(--space-3);
      height: var(--space-3);
    }
    &:where(.rt-r-size-2) {
      width: var(--space-4);
      height: var(--space-4);
    }
    &:where(.rt-r-size-3) {
      width: calc(1.25 * var(--space-4));
      height: calc(1.25 * var(--space-4));
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/spinner.props.tsx
================================================
import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;

const spinnerPropDefs = {
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '2', responsive: true },
  loading: { type: 'boolean', default: true },
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  loading: PropDef<boolean>;
};

export { spinnerPropDefs };


================================================
File: packages/radix-ui-themes/src/components/spinner.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';

import { Flex } from './flex.js';
import { spinnerPropDefs } from './spinner.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type SpinnerElement = React.ElementRef<'span'>;
type SpinnerOwnProps = GetPropDefTypes<typeof spinnerPropDefs>;
interface SpinnerProps
  extends ComponentPropsWithout<'span', RemovedProps>,
    MarginProps,
    SpinnerOwnProps {}
const Spinner = React.forwardRef<SpinnerElement, SpinnerProps>((props, forwardedRef) => {
  const { className, children, loading, ...spinnerProps } = extractProps(
    props,
    spinnerPropDefs,
    marginPropDefs
  );

  if (!loading) return children;

  const spinner = (
    <span {...spinnerProps} ref={forwardedRef} className={classNames('rt-Spinner', className)}>
      <span className="rt-SpinnerLeaf" />
      <span className="rt-SpinnerLeaf" />
      <span className="rt-SpinnerLeaf" />
      <span className="rt-SpinnerLeaf" />
      <span className="rt-SpinnerLeaf" />
      <span className="rt-SpinnerLeaf" />
      <span className="rt-SpinnerLeaf" />
      <span className="rt-SpinnerLeaf" />
    </span>
  );

  if (children === undefined) return spinner;

  return (
    <Flex asChild position="relative" align="center" justify="center">
      <span>
        {/**
         * `display: contents` removes the content from the accessibility tree in some browsers,
         * so we force remove it with `aria-hidden`
         */}
        <span aria-hidden style={{ display: 'contents', visibility: 'hidden' }} inert={undefined}>
          {children}
        </span>

        <Flex asChild align="center" justify="center" position="absolute" inset="0">
          <span>{spinner}</span>
        </Flex>
      </span>
    </Flex>
  );
});
Spinner.displayName = 'Spinner';

export { Spinner };
export type { SpinnerProps };


================================================
File: packages/radix-ui-themes/src/components/strong.css
================================================
.rt-Strong {
  font-family: var(--strong-font-family);
  font-size: calc(var(--strong-font-size-adjust) * 1em);
  font-style: var(--strong-font-style);
  font-weight: var(--strong-font-weight);
  letter-spacing: calc(
    var(--strong-letter-spacing) + var(--letter-spacing, var(--default-letter-spacing))
  );

  & :where(&) {
    font-size: inherit;
  }
}


================================================
File: packages/radix-ui-themes/src/components/strong.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { textWrapPropDef } from '../props/text-wrap.prop.js';
import { truncatePropDef } from '../props/truncate.prop.js';

const strongPropDefs = {
  ...asChildPropDef,
  ...truncatePropDef,
  ...textWrapPropDef,
};

export { strongPropDefs };


================================================
File: packages/radix-ui-themes/src/components/strong.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { extractProps } from '../helpers/extract-props.js';
import { strongPropDefs } from './strong.props.js';

import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type StrongElement = React.ElementRef<'strong'>;
type StrongOwnProps = GetPropDefTypes<typeof strongPropDefs>;
interface StrongProps extends ComponentPropsWithout<'strong', RemovedProps>, StrongOwnProps {}
const Strong = React.forwardRef<StrongElement, StrongProps>((props, forwardedRef) => {
  const { asChild, className, ...strongProps } = extractProps(props, strongPropDefs);
  const Comp = asChild ? Slot.Root : 'strong';
  return (
    <Comp {...strongProps} ref={forwardedRef} className={classNames('rt-Strong', className)} />
  );
});
Strong.displayName = 'Strong';

export { Strong };
export type { StrongProps };


================================================
File: packages/radix-ui-themes/src/components/switch.css
================================================
:where(.radix-themes) {
  --switch-disabled-blend-mode: multiply;
  --switch-high-contrast-checked-color-overlay: var(--black-a8);
  --switch-high-contrast-checked-active-before-filter: contrast(0.82) saturate(1.2) brightness(1.16);
}

:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  --switch-disabled-blend-mode: screen;
  --switch-high-contrast-checked-color-overlay: transparent;
  --switch-high-contrast-checked-active-before-filter: brightness(1.08);
}

.rt-SwitchRoot {
  position: relative;
  display: inline-flex;
  align-items: center;
  vertical-align: top;
  flex-shrink: 0;

  /* Unless in a skeleton, align with text line height when possible and fall back to own height */
  height: var(--skeleton-height, var(--line-height, var(--switch-height)));
  --skeleton-height-override: var(--switch-height);

  /* Set root radius when in a skeleton */
  border-radius: var(--skeleton-radius);
  --skeleton-radius-override: var(--switch-border-radius);

  --switch-width: calc(var(--switch-height) * 1.75);
  --switch-thumb-inset: 1px;
  --switch-thumb-size: calc(var(--switch-height) - var(--switch-thumb-inset) * 2);
  --switch-thumb-translate-x: calc(var(--switch-width) - var(--switch-height));

  &::before {
    content: '';
    display: block;
    width: var(--switch-width);
    height: var(--switch-height);
    border-radius: var(--switch-border-radius);
    transition: background-position, background-color, box-shadow, filter;
    transition-timing-function: linear, ease-in-out, ease-in-out, ease-in-out;
    background-repeat: no-repeat;

    /*
     * Length of the gradient is: switch width for the checked part, plus switch
     * height for the thumb part, plus another switch width for the unchecked part
     */
    background-size: calc(var(--switch-width) * 2 + var(--switch-height)) 100%;
  }

  &:where([data-state='unchecked'])::before {
    transition-duration: 120ms, 140ms, 140ms, 140ms;
    background-position-x: 100%;
  }
  &:where([data-state='checked'])::before {
    transition-duration: 160ms, 140ms, 140ms, 140ms;
    background-position: 0%;
  }
  &:where(:active)::before {
    transition-duration: 30ms;
  }
  &:where(:focus-visible)::before {
    outline: 2px solid var(--focus-8);
    outline-offset: 2px;
  }

  /* Cursors */
  &::before {
    cursor: var(--cursor-switch);
  }
  &:where([data-disabled])::before {
    cursor: var(--cursor-disabled);
  }
}

.rt-SwitchThumb {
  background-color: white;
  position: absolute;
  left: var(--switch-thumb-inset);
  width: var(--switch-thumb-size);
  height: var(--switch-thumb-size);
  border-radius: calc(var(--switch-border-radius) - var(--switch-thumb-inset));
  transition: transform 140ms cubic-bezier(0.45, 0.05, 0.55, 0.95), box-shadow 140ms ease-in-out;

  &:where([data-state='checked']) {
    transform: translateX(var(--switch-thumb-translate-x));
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-SwitchRoot {
    &:where(.rt-r-size-1) {
      --switch-height: var(--space-4);
      --switch-border-radius: max(var(--radius-1), var(--radius-thumb));
    }
    &:where(.rt-r-size-2) {
      --switch-height: calc(var(--space-5) * 5 / 6);
      --switch-border-radius: max(var(--radius-2), var(--radius-thumb));
    }
    &:where(.rt-r-size-3) {
      --switch-height: var(--space-5);
      --switch-border-radius: max(var(--radius-2), var(--radius-thumb));
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

/* surface */

:where(.radix-themes) {
  --switch-surface-checked-active-filter: brightness(0.92) saturate(1.1);
}

:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  --switch-surface-checked-active-filter: brightness(1.08);
}

.rt-SwitchRoot:where(.rt-variant-surface) {
  &::before {
    background-color: var(--gray-a3);
    background-image: linear-gradient(to right, var(--accent-track) 40%, transparent 60%);
    box-shadow: inset 0 0 0 1px var(--gray-a5);
  }
  &:where(:active)::before {
    background-color: var(--gray-a4);
  }
  &:where([data-state='checked']:active)::before {
    filter: var(--switch-surface-checked-active-filter);
  }
  &:where(.rt-high-contrast) {
    &::before {
      /* prettier-ignore */
      background-image:
        linear-gradient(to right, var(--switch-high-contrast-checked-color-overlay) 40%, transparent 60%),
        linear-gradient(to right, var(--accent-track) 40%, transparent 60%);
    }
    &:where([data-state='checked']:active)::before {
      filter: var(--switch-high-contrast-checked-active-before-filter);
    }
  }
  &:where([data-disabled]) {
    mix-blend-mode: var(--switch-disabled-blend-mode);

    &::before {
      filter: none;
      background-image: none;
      background-color: var(--gray-a3);
      box-shadow: inset 0 0 0 1px var(--gray-a3);
    }
  }

  & :where(.rt-SwitchThumb) {
    &:where([data-state='unchecked']) {
      box-shadow: 0 0 1px 1px var(--black-a2), 0 1px 1px var(--black-a1), 0 2px 4px -1px var(--black-a1);
    }
    &:where([data-state='checked']) {
      box-shadow: 0 1px 3px var(--black-a2), 0 2px 4px -1px var(--black-a1), 0 0 0 1px var(--black-a1),
        0 0 0 1px var(--accent-a4), -1px 0 1px var(--black-a2);

      &:where(.rt-high-contrast) {
        box-shadow: 0 1px 3px var(--black-a2), 0 2px 4px -1px var(--black-a1), 0 0 0 1px var(--black-a2),
          -1px 0 1px var(--black-a2);
      }
    }
    &:where([data-disabled]) {
      background-color: var(--gray-2);
      box-shadow: 0 0 0 1px var(--gray-a2), 0 1px 3px var(--black-a1);
      /* Avoid the Chrome P3 bug with transition through red when changing light/dark mode */
      transition: none;
    }
  }
}

/* classic */

:where(.radix-themes) {
  --switch-surface-checked-active-filter: brightness(0.92) saturate(1.1);
}
:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  --switch-surface-checked-active-filter: brightness(1.08);
}

.rt-SwitchRoot:where(.rt-variant-classic) {
  &::before {
    background-image: linear-gradient(to right, var(--accent-track) 40%, transparent 60%);
    background-color: var(--gray-a4);
    box-shadow: var(--shadow-1);
  }
  &:where([data-state='unchecked']:active)::before {
    background-color: var(--gray-a5);
  }
  &:where([data-state='checked'])::before {
    box-shadow: inset 0 0 0 1px var(--gray-a3), inset 0 0 0 1px var(--accent-a4), inset 0 0 0 1px var(--black-a1),
      inset 0 1.5px 2px 0 var(--black-a2);
  }
  &:where([data-state='checked']:active)::before {
    filter: var(--switch-surface-checked-active-filter);
  }
  &:where(.rt-high-contrast) {
    &::before {
      box-shadow: inset 0 0 0 1px var(--gray-a3), inset 0 0 0 1px var(--black-a2), inset 0 1.5px 2px 0 var(--black-a2);

      /* prettier-ignore */
      background-image:
        linear-gradient(to right, var(--switch-high-contrast-checked-color-overlay) 40%, transparent 60%),
        linear-gradient(to right, var(--accent-track) 40%, transparent 60%);
    }
    &:where([data-state='checked']:active)::before {
      filter: var(--switch-high-contrast-checked-active-before-filter);
    }
  }
  &:where([data-disabled]) {
    mix-blend-mode: var(--switch-disabled-blend-mode);

    &::before {
      filter: none;
      background-image: none;
      background-color: var(--gray-a5);
      box-shadow: var(--shadow-1);
      opacity: 0.5;
    }
  }

  & :where(.rt-SwitchThumb) {
    &:where([data-state='unchecked']) {
      box-shadow: 0 1px 3px var(--black-a3), 0 2px 4px -1px var(--black-a1), 0 0 0 1px var(--black-a2);
    }
    &:where([data-state='checked']) {
      box-shadow: 0 1px 3px var(--black-a2), 0 2px 4px -1px var(--black-a1), 0 0 0 1px var(--black-a1),
        0 0 0 1px var(--accent-a4), -1px 0 1px var(--black-a2);

      &:where(.rt-high-contrast) {
        box-shadow: 0 1px 3px var(--black-a2), 0 2px 4px -1px var(--black-a1), 0 0 0 1px var(--black-a2),
          -1px 0 1px var(--black-a2);
      }
    }
    &:where([data-disabled]) {
      background-color: var(--gray-2);
      box-shadow: 0 0 0 1px var(--gray-a2), 0 1px 3px var(--black-a1);
      /* Avoid the Chrome P3 bug with transition through red when changing light/dark mode */
      transition: none;
    }
  }
}

/* soft */

.rt-SwitchRoot:where(.rt-variant-soft) {
  /* prettier-ignore */
  &::before {
    background-image:
      linear-gradient(to right, var(--accent-a4) 40%, transparent 60%),
      linear-gradient(to right, var(--accent-a4) 40%, transparent 60%),
      /* Blend with white to increase contrast in dark mode */
      linear-gradient(to right, var(--accent-a4) 40%, var(--white-a1) 60%),
      linear-gradient(to right, var(--gray-a2) 40%, var(--gray-a3) 60%);
  }
  &:where([data-state='unchecked'])::before {
    background-color: var(--gray-a3);
  }
  &:where(:active)::before {
    background-color: var(--gray-a4);
  }
  &:where(.rt-high-contrast) {
    &::before {
      /* prettier-ignore */
      background-image:
        linear-gradient(to right, var(--switch-high-contrast-checked-color-overlay) 40%, transparent 60%),
        linear-gradient(to right, var(--accent-a6) 40%, transparent 60%),
        linear-gradient(to right, var(--accent-a6) 40%, transparent 60%),
        linear-gradient(to right, var(--accent-a6) 40%, var(--white-a1) 60%),
        linear-gradient(to right, var(--accent-a3) 40%, var(--gray-a3) 60%);
    }
    &:where([data-state='checked']:active)::before {
      filter: var(--switch-high-contrast-checked-active-before-filter);
    }
  }
  &:where([data-disabled]) {
    mix-blend-mode: var(--switch-disabled-blend-mode);

    &::before {
      filter: none;
      background-image: none;
      background-color: var(--gray-a4);
    }
  }

  & :where(.rt-SwitchThumb) {
    filter: saturate(0.45);

    &:where([data-state='unchecked']) {
      box-shadow: 0 0 0 1px var(--black-a1), 0 1px 3px var(--black-a1), 0 1px 3px var(--black-a1),
        0 2px 4px -1px var(--black-a1);
    }

    &:where([data-state='checked']) {
      box-shadow: 0 0 0 1px var(--black-a1), 0 1px 3px var(--black-a2), 0 1px 3px var(--accent-a3),
        0 2px 4px -1px var(--accent-a3);
    }

    &:where([data-disabled]) {
      filter: none;
      background-color: var(--gray-2);
      box-shadow: 0 0 0 1px var(--gray-a2), 0 1px 3px var(--black-a1);
      /* Avoid the Chrome P3 bug with transition through red when changing light/dark mode */
      transition: none;
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/switch.props.tsx
================================================
import { colorPropDef } from '../props/color.prop.js';
import { highContrastPropDef } from '../props/high-contrast.prop.js';
import { radiusPropDef } from '../props/radius.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;
const variants = ['classic', 'surface', 'soft'] as const;

const switchPropDefs = {
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '2', responsive: true },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'surface' },
  ...colorPropDef,
  ...highContrastPropDef,
  ...radiusPropDef,
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
};

export { switchPropDefs };


================================================
File: packages/radix-ui-themes/src/components/switch.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Switch as SwitchPrimitive } from 'radix-ui';

import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';
import { switchPropDefs } from './switch.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';
import type { ComponentPropsWithout } from '../helpers/component-props.js';

type SwitchElement = React.ElementRef<typeof SwitchPrimitive.Root>;
type SwitchOwnProps = GetPropDefTypes<typeof switchPropDefs>;
interface SwitchProps
  extends ComponentPropsWithout<
      typeof SwitchPrimitive.Root,
      'asChild' | 'color' | 'defaultValue' | 'children'
    >,
    MarginProps,
    SwitchOwnProps {}
const Switch = React.forwardRef<SwitchElement, SwitchProps>((props, forwardedRef) => {
  const { className, color, radius, ...switchProps } = extractProps(
    props,
    switchPropDefs,
    marginPropDefs
  );
  return (
    <SwitchPrimitive.Root
      data-accent-color={color}
      data-radius={radius}
      {...switchProps}
      asChild={false}
      ref={forwardedRef}
      className={classNames('rt-reset', 'rt-SwitchRoot', className)}
    >
      <SwitchPrimitive.Thumb
        className={classNames('rt-SwitchThumb', { 'rt-high-contrast': props.highContrast })}
      />
    </SwitchPrimitive.Root>
  );
});
Switch.displayName = 'Switch';

export { Switch };
export type { SwitchProps };


================================================
File: packages/radix-ui-themes/src/components/tab-nav.css
================================================
@import './_internal/base-tab-list.css';

.rt-TabNavItem {
  display: flex;
}


================================================
File: packages/radix-ui-themes/src/components/tab-nav.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';

import type { PropDef } from '../props/prop-def.js';

const tabNavLinkPropDefs = {
  ...asChildPropDef,
  active: { type: 'boolean', default: false },
} satisfies {
  active: PropDef<boolean>;
};

export { baseTabListPropDefs as tabNavRootPropDefs } from './_internal/base-tab-list.props.js';
export { tabNavLinkPropDefs };


================================================
File: packages/radix-ui-themes/src/components/tab-nav.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { NavigationMenu } from 'radix-ui';

import { tabNavRootPropDefs } from './tab-nav.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { getSubtree } from '../helpers/get-subtree.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { tabNavLinkPropDefs } from './tab-nav.props.js';
import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type TabNavRootElement = React.ElementRef<typeof NavigationMenu.Root>;
type TabNavRootElementProps = ComponentPropsWithout<'nav', RemovedProps>;
type TabNavOwnProps = GetPropDefTypes<typeof tabNavRootPropDefs>;
interface TabNavRootProps
  extends Omit<TabNavRootElementProps, 'defaultValue' | 'dir' | 'color'>,
    MarginProps,
    TabNavOwnProps {}
const TabNavRoot = React.forwardRef<TabNavRootElement, TabNavRootProps>((props, forwardedRef) => {
  const { children, className, color, ...rootProps } = extractProps(
    props,
    tabNavRootPropDefs,
    marginPropDefs
  );
  return (
    <NavigationMenu.Root
      className="rt-TabNavRoot"
      data-accent-color={color}
      {...rootProps}
      asChild={false}
      ref={forwardedRef}
    >
      <NavigationMenu.List
        className={classNames('rt-reset', 'rt-BaseTabList', 'rt-TabNavList', className)}
      >
        {children}
      </NavigationMenu.List>
    </NavigationMenu.Root>
  );
});
TabNavRoot.displayName = 'TabNav.Root';

type TabNavLinkElement = React.ElementRef<typeof NavigationMenu.Link>;
type TabNavLinkOwnProps = GetPropDefTypes<typeof tabNavLinkPropDefs>;
interface TabNavLinkProps
  extends ComponentPropsWithout<typeof NavigationMenu.Link, RemovedProps | 'onSelect'>,
    TabNavLinkOwnProps {}
const TabNavLink = React.forwardRef<TabNavLinkElement, TabNavLinkProps>((props, forwardedRef) => {
  const { asChild, children, className, ...linkProps } = props;

  return (
    <NavigationMenu.Item className="rt-TabNavItem">
      <NavigationMenu.Link
        {...linkProps}
        ref={forwardedRef}
        className={classNames('rt-reset', 'rt-BaseTabListTrigger', 'rt-TabNavLink', className)}
        onSelect={undefined}
        asChild={asChild}
      >
        {getSubtree({ asChild, children }, (children) => (
          <>
            <span className="rt-BaseTabListTriggerInner rt-TabNavLinkInner">{children}</span>
            <span className="rt-BaseTabListTriggerInnerHidden rt-TabNavLinkInnerHidden">
              {children}
            </span>
          </>
        ))}
      </NavigationMenu.Link>
    </NavigationMenu.Item>
  );
});
TabNavLink.displayName = 'TabNav.Link';

export { TabNavRoot as Root, TabNavLink as Link };
export type { TabNavRootProps as RootProps, TabNavLinkProps as LinkProps };


================================================
File: packages/radix-ui-themes/src/components/table.css
================================================
.rt-TableRootTable {
  --table-row-background-color: transparent;
  --table-row-box-shadow: inset 0 -1px var(--gray-a5);

  width: 100%;
  text-align: left;
  vertical-align: top;
  border-collapse: collapse;
  border-radius: calc(var(--table-border-radius) - 1px);
  border-spacing: 0;
  box-sizing: border-box;

  /* Makes "height: 100%" work on content inside cells */
  height: 0;
}

.rt-TableHeader {
  vertical-align: inherit;
}

.rt-TableBody {
  vertical-align: inherit;
}

.rt-TableRow {
  vertical-align: inherit;
  color: var(--gray-12);
}

.rt-TableCell {
  background-color: var(--table-row-background-color);
  box-shadow: var(--table-row-box-shadow);
  box-sizing: border-box;
  vertical-align: inherit;
  padding: var(--table-cell-padding);
  /* Works as min-height */
  height: var(--table-cell-min-height);

  /* Inset with Table */
  .rt-Inset :where(&:first-child) {
    padding-left: var(--inset-padding-left, var(--table-cell-padding));
  }
  .rt-Inset :where(&:last-child) {
    padding-right: var(--inset-padding-right, var(--table-cell-padding));
  }
}
.rt-TableColumnHeaderCell {
  font-weight: bold;
}
.rt-TableRowHeaderCell {
  font-weight: normal;
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-TableRoot {
    &:where(.rt-r-size-1) {
      --table-border-radius: var(--radius-3);
      --table-cell-padding: var(--space-2);
      --table-cell-min-height: calc(36px * var(--scaling));

      & :where(.rt-TableRootTable) {
        font-size: var(--font-size-2);
        line-height: var(--line-height-2);
      }
    }
    &:where(.rt-r-size-2) {
      --table-border-radius: var(--radius-4);
      --table-cell-padding: var(--space-3);
      --table-cell-min-height: calc(44px * var(--scaling));

      & :where(.rt-TableRootTable) {
        font-size: var(--font-size-2);
        line-height: var(--line-height-2);
      }
    }
    &:where(.rt-r-size-3) {
      --table-border-radius: var(--radius-4);
      --table-cell-padding: var(--space-3) var(--space-4);
      --table-cell-min-height: var(--space-8);

      & :where(.rt-TableRootTable) {
        font-size: var(--font-size-3);
        line-height: var(--line-height-3);
      }
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

/* surface */

.rt-TableRoot:where(.rt-variant-surface) {
  box-sizing: border-box;
  border: 1px solid var(--gray-a5);
  border-radius: var(--table-border-radius);
  background-color: var(--color-panel);
  backdrop-filter: var(--backdrop-filter-panel);
  background-clip: padding-box;
  position: relative;

  /* When possible, use half-transparent gray for nicer border blending with the background */
  @supports (box-shadow: 0 0 0 1px color-mix(in oklab, white, black)) {
    border-color: color-mix(in oklab, var(--gray-a5), var(--gray-6));
  }

  & :where(.rt-TableRootTable) {
    overflow: hidden;

    & :where(.rt-TableHeader) {
      --table-row-background-color: var(--gray-a2);
    }
    & :where(.rt-TableBody) :where(.rt-TableRow:last-child) {
      --table-row-box-shadow: none;
    }
  }
}

/* ghost */

.rt-TableRoot:where(.rt-variant-ghost) {
  --scrollarea-scrollbar-horizontal-margin-left: 0;
  --scrollarea-scrollbar-horizontal-margin-right: 0;
}


================================================
File: packages/radix-ui-themes/src/components/table.props.tsx
================================================
import { paddingPropDefs } from '../props/padding.props.js';
import { widthPropDefs } from '../props/width.props.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;
const variants = ['surface', 'ghost'] as const;
const layoutValues = ['auto', 'fixed'] as const;

const tableRootPropDefs = {
  size: {
    type: 'enum',
    className: 'rt-r-size',
    values: sizes,
    default: '2',
    responsive: true,
  },
  variant: {
    type: 'enum',
    className: 'rt-variant',
    values: variants,
    default: 'ghost',
  },
  layout: {
    type: 'enum',
    className: 'rt-r-tl',
    values: layoutValues,
    responsive: true,
  },
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
  layout: PropDef<(typeof layoutValues)[number]>;
};

const rowAlign = ['start', 'center', 'end', 'baseline'] as const;

const tableRowPropDefs = {
  align: {
    type: 'enum',
    className: 'rt-r-va',
    values: rowAlign,
    parseValue: parseAlignValue,
    responsive: true,
  },
} satisfies {
  align: PropDef<(typeof rowAlign)[number]>;
};

function parseAlignValue(value: string) {
  return {
    baseline: 'baseline',
    start: 'top',
    center: 'middle',
    end: 'bottom',
  }[value];
}

const justifyValues = ['start', 'center', 'end'] as const;

const tableCellPropDefs = {
  justify: {
    type: 'enum',
    className: 'rt-r-ta',
    values: justifyValues,
    parseValue: parseJustifyValue,
    responsive: true,
  },
  ...widthPropDefs,
  ...paddingPropDefs,
} satisfies {
  justify: PropDef<(typeof justifyValues)[number]>;
};

function parseJustifyValue(value: string) {
  return {
    start: 'left',
    center: 'center',
    end: 'right',
  }[value];
}

export { tableRootPropDefs, tableRowPropDefs, tableCellPropDefs };


================================================
File: packages/radix-ui-themes/src/components/table.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';

import { tableRootPropDefs, tableRowPropDefs, tableCellPropDefs } from './table.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { getResponsiveClassNames } from '../helpers/get-responsive-styles.js';
import { marginPropDefs } from '../props/margin.props.js';
import { ScrollArea } from './scroll-area.js';

import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { MarginProps } from '../props/margin.props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type TableRootElement = React.ElementRef<'div'>;
type TableRootOwnProps = GetPropDefTypes<typeof tableRootPropDefs>;
interface TableRootProps
  extends ComponentPropsWithout<'div', RemovedProps>,
    MarginProps,
    TableRootOwnProps {}
const TableRoot = React.forwardRef<TableRootElement, TableRootProps>((props, forwardedRef) => {
  const { layout: layoutPropDef, ...rootPropDefs } = tableRootPropDefs;
  const { className, children, layout, ...rootProps } = extractProps(
    props,
    rootPropDefs,
    marginPropDefs
  );
  const tableLayoutClassNames = getResponsiveClassNames({
    value: layout,
    className: tableRootPropDefs.layout.className,
    propValues: tableRootPropDefs.layout.values,
  });
  return (
    <div ref={forwardedRef} className={classNames('rt-TableRoot', className)} {...rootProps}>
      <ScrollArea>
        <table className={classNames('rt-TableRootTable', tableLayoutClassNames)}>{children}</table>
      </ScrollArea>
    </div>
  );
});
TableRoot.displayName = 'Table.Root';

type TableHeaderElement = React.ElementRef<'thead'>;
interface TableHeaderProps extends ComponentPropsWithout<'thead', RemovedProps> {}
const TableHeader = React.forwardRef<TableHeaderElement, TableHeaderProps>(
  ({ className, ...props }, forwardedRef) => (
    <thead {...props} ref={forwardedRef} className={classNames('rt-TableHeader', className)} />
  )
);
TableHeader.displayName = 'Table.Header';

type TableBodyElement = React.ElementRef<'tbody'>;
interface TableBodyProps extends ComponentPropsWithout<'tbody', RemovedProps> {}
const TableBody = React.forwardRef<TableBodyElement, TableBodyProps>(
  ({ className, ...props }, forwardedRef) => (
    <tbody {...props} ref={forwardedRef} className={classNames('rt-TableBody', className)} />
  )
);
TableBody.displayName = 'Table.Body';

type TableRowElement = React.ElementRef<'tr'>;
type TableRowOwnProps = GetPropDefTypes<typeof tableRowPropDefs>;
interface TableRowProps extends ComponentPropsWithout<'tr', RemovedProps>, TableRowOwnProps {}
const TableRow = React.forwardRef<TableRowElement, TableRowProps>((props, forwardedRef) => {
  const { className, ...rowProps } = extractProps(props, tableRowPropDefs);
  return <tr {...rowProps} ref={forwardedRef} className={classNames('rt-TableRow', className)} />;
});
TableRow.displayName = 'Table.Row';

type TableCellElement = React.ElementRef<'td'>;
type TableCellOwnProps = GetPropDefTypes<typeof tableCellPropDefs>;
interface TableCellProps
  extends ComponentPropsWithout<'td', RemovedProps | 'width'>,
    TableCellOwnProps {}
const TableCell = React.forwardRef<TableCellElement, TableCellProps>((props, forwardedRef) => {
  const { className, ...cellProps } = extractProps(props, tableCellPropDefs);
  return <td className={classNames('rt-TableCell', className)} ref={forwardedRef} {...cellProps} />;
});
TableCell.displayName = 'Table.Cell';

type TableColumnHeaderCellElement = React.ElementRef<'th'>;
interface TableColumnHeaderCellProps
  extends ComponentPropsWithout<'th', RemovedProps>,
    TableCellOwnProps {}
const TableColumnHeaderCell = React.forwardRef<
  TableColumnHeaderCellElement,
  TableColumnHeaderCellProps
>((props, forwardedRef) => {
  const { className, ...cellProps } = extractProps(props, tableCellPropDefs);
  return (
    <th
      className={classNames('rt-TableCell', 'rt-TableColumnHeaderCell', className)}
      scope="col"
      ref={forwardedRef}
      {...cellProps}
    />
  );
});
TableColumnHeaderCell.displayName = 'Table.ColumnHeaderCell';

type TableRowHeaderCellElement = React.ElementRef<'th'>;
interface TableRowHeaderCellProps
  extends ComponentPropsWithout<'th', RemovedProps>,
    TableCellOwnProps {}
const TableRowHeaderCell = React.forwardRef<TableRowHeaderCellElement, TableRowHeaderCellProps>(
  (props, forwardedRef) => {
    const { className, ...cellProps } = extractProps(props, tableCellPropDefs);
    return (
      <th
        className={classNames('rt-TableCell', 'rt-TableRowHeaderCell', className)}
        scope="row"
        ref={forwardedRef}
        {...cellProps}
      />
    );
  }
);
TableRowHeaderCell.displayName = 'Table.RowHeaderCell';

export {
  TableRoot as Root,
  TableHeader as Header,
  TableBody as Body,
  TableRow as Row,
  TableCell as Cell,
  TableColumnHeaderCell as ColumnHeaderCell,
  TableRowHeaderCell as RowHeaderCell,
};

export type {
  TableRootProps as RootProps,
  TableHeaderProps as HeaderProps,
  TableBodyProps as BodyProps,
  TableRowProps as RowProps,
  TableCellProps as CellProps,
  TableColumnHeaderCellProps as ColumnHeaderCellProps,
  TableRowHeaderCellProps as RowHeaderCellProps,
};


================================================
File: packages/radix-ui-themes/src/components/tabs.css
================================================
@import './_internal/base-tab-list.css';

.rt-TabsContent {
  position: relative;
  outline: 0;
}

.rt-TabsContent:where(:focus-visible) {
  outline: 2px solid var(--focus-8);
}


================================================
File: packages/radix-ui-themes/src/components/tabs.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';

const tabsRootPropDefs = {
  ...asChildPropDef,
};

const tabsContentPropDefs = {
  ...asChildPropDef,
};

export { baseTabListPropDefs as tabsListPropDefs } from './_internal/base-tab-list.props.js';
export { tabsRootPropDefs, tabsContentPropDefs };


================================================
File: packages/radix-ui-themes/src/components/tabs.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Tabs as TabsPrimitive } from 'radix-ui';

import { tabsListPropDefs } from './tabs.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { tabsContentPropDefs, tabsRootPropDefs } from './tabs.props.js';
import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type TabsRootElement = React.ElementRef<typeof TabsPrimitive.Root>;
type TabsRootOwnProps = GetPropDefTypes<typeof tabsRootPropDefs>;
interface TabsRootProps
  extends ComponentPropsWithout<typeof TabsPrimitive.Root, 'asChild' | 'color' | 'defaultChecked'>,
    MarginProps,
    TabsRootOwnProps {}
const TabsRoot = React.forwardRef<TabsRootElement, TabsRootProps>((props, forwardedRef) => {
  const { className, ...rootProps } = extractProps(props, marginPropDefs);
  return (
    <TabsPrimitive.Root
      {...rootProps}
      ref={forwardedRef}
      className={classNames('rt-TabsRoot', className)}
    />
  );
});
TabsRoot.displayName = 'Tabs.Root';

type TabsListElement = React.ElementRef<typeof TabsPrimitive.List>;
type TabsListOwnProps = GetPropDefTypes<typeof tabsListPropDefs>;
interface TabsListProps
  extends ComponentPropsWithout<typeof TabsPrimitive.List, RemovedProps>,
    MarginProps,
    TabsListOwnProps {}
const TabsList = React.forwardRef<TabsListElement, TabsListProps>((props, forwardedRef) => {
  const { className, color, ...listProps } = extractProps(props, tabsListPropDefs, marginPropDefs);
  return (
    <TabsPrimitive.List
      data-accent-color={color}
      {...listProps}
      asChild={false}
      ref={forwardedRef}
      className={classNames('rt-BaseTabList', 'rt-TabsList', className)}
    />
  );
});
TabsList.displayName = 'Tabs.List';

type TabsTriggerElement = React.ElementRef<typeof TabsPrimitive.Trigger>;
interface TabsTriggerProps
  extends ComponentPropsWithout<typeof TabsPrimitive.Trigger, RemovedProps> {}
const TabsTrigger = React.forwardRef<TabsTriggerElement, TabsTriggerProps>(
  (props, forwardedRef) => {
    const { className, children, ...triggerProps } = props;
    return (
      <TabsPrimitive.Trigger
        {...triggerProps}
        asChild={false}
        ref={forwardedRef}
        className={classNames('rt-reset', 'rt-BaseTabListTrigger', 'rt-TabsTrigger', className)}
      >
        <span className="rt-BaseTabListTriggerInner rt-TabsTriggerInner">{children}</span>
        <span className="rt-BaseTabListTriggerInnerHidden rt-TabsTriggerInnerHidden">
          {children}
        </span>
      </TabsPrimitive.Trigger>
    );
  }
);
TabsTrigger.displayName = 'Tabs.Trigger';

type TabsContentElement = React.ElementRef<typeof TabsPrimitive.Content>;
type TabsContentOwnProps = GetPropDefTypes<typeof tabsContentPropDefs>;
interface TabsContentProps
  extends ComponentPropsWithout<typeof TabsPrimitive.Content, RemovedProps>,
    MarginProps,
    TabsContentOwnProps {}
const TabsContent = React.forwardRef<TabsContentElement, TabsContentProps>(
  (props, forwardedRef) => {
    const { className, ...contentProps } = extractProps(props, marginPropDefs);
    return (
      <TabsPrimitive.Content
        {...contentProps}
        ref={forwardedRef}
        className={classNames('rt-TabsContent', className)}
      />
    );
  }
);
TabsContent.displayName = 'Tabs.Content';

export { TabsRoot as Root, TabsList as List, TabsTrigger as Trigger, TabsContent as Content };
export type {
  TabsRootProps as RootProps,
  TabsListProps as ListProps,
  TabsTriggerProps as TriggerProps,
  TabsContentProps as ContentProps,
};


================================================
File: packages/radix-ui-themes/src/components/text-area.css
================================================
.rt-TextAreaRoot {
  display: flex;
  flex-direction: column;
  box-sizing: border-box;

  font-family: var(--default-font-family);
  font-weight: var(--font-weight-regular);
  font-style: normal;
  text-align: start;

  /* Allows the `resize` property to work on the div */
  overflow: hidden;

  &:where(:focus-within) {
    outline: 2px solid var(--focus-8);
    outline-offset: -1px;
  }
}

.rt-TextAreaInput {
  border-radius: inherit;
  resize: none;

  display: block;
  width: 100%;
  flex-grow: 1;

  /* scrollbar */
  & {
    /* Arrow mouse cursor over the scrollbar */
    cursor: auto;
  }
  &::-webkit-scrollbar {
    width: var(--space-3);
    height: var(--space-3);
  }
  &::-webkit-scrollbar-track,
  &::-webkit-scrollbar-thumb {
    background-clip: content-box;
    border: var(--space-1) solid transparent;
    border-radius: var(--space-3);
  }
  &::-webkit-scrollbar-track {
    background-color: var(--gray-a3);
  }
  &::-webkit-scrollbar-thumb {
    background-color: var(--gray-a8);
  }
  @media (hover: hover) {
    :where(&:not(:disabled))::-webkit-scrollbar-thumb:hover {
      background-color: var(--gray-a9);
    }
  }
  &:where(:autofill, [data-com-onepassword-filled]) {
    /* Reliably removes native autofill colors */
    background-clip: text;
    -webkit-text-fill-color: var(--gray-12);
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

.rt-TextAreaRoot {
  box-sizing: border-box;
  padding: var(--text-area-border-width);
}
.rt-TextAreaInput {
  padding: var(--text-area-padding-y) var(--text-area-padding-x);
}

@breakpoints {
  .rt-TextAreaRoot {
    &:where(.rt-r-size-1) {
      min-height: var(--space-8);
      border-radius: var(--radius-2);

      & :where(.rt-TextAreaInput) {
        /* Clip text to border */
        --text-area-padding-y: calc(var(--space-1) - var(--text-area-border-width));
        --text-area-padding-x: calc(var(--space-1) * 1.5 - var(--text-area-border-width));
        font-size: var(--font-size-1);
        line-height: var(--line-height-1);
        letter-spacing: var(--letter-spacing-1);
      }
    }
    &:where(.rt-r-size-2) {
      min-height: var(--space-9);
      border-radius: var(--radius-2);

      & :where(.rt-TextAreaInput) {
        /* Clip text to border */
        --text-area-padding-y: calc(var(--space-1) * 1.5 - var(--text-area-border-width));
        --text-area-padding-x: calc(var(--space-2) - var(--text-area-border-width));
        font-size: var(--font-size-2);
        line-height: var(--line-height-2);
        letter-spacing: var(--letter-spacing-2);
      }
    }
    &:where(.rt-r-size-3) {
      min-height: 80px;
      border-radius: var(--radius-3);

      & :where(.rt-TextAreaInput) {
        /* Clip text to border */
        --text-area-padding-y: calc(var(--space-2) - var(--text-area-border-width));
        --text-area-padding-x: calc(var(--space-3) - var(--text-area-border-width));
        font-size: var(--font-size-3);
        line-height: var(--line-height-3);
        letter-spacing: var(--letter-spacing-3);
      }
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

/* surface */
.rt-TextAreaRoot:where(.rt-variant-surface) {
  --text-area-border-width: 1px;

  /* Blend inner shadow with page background */
  background-clip: content-box;
  background-color: var(--color-surface);
  box-shadow: inset 0 0 0 var(--text-area-border-width) var(--gray-a7);
  color: var(--gray-12);

  & :where(.rt-TextAreaInput) {
    &::placeholder {
      color: var(--gray-a10);
    }
  }

  /* prettier-ignore */
  &:where(:has(.rt-TextAreaInput:where(:autofill, [data-com-onepassword-filled]):not(:disabled, :read-only))) {
    /* Blend with focus color */
    background-image: linear-gradient(var(--focus-a2), var(--focus-a2));
    box-shadow: inset 0 0 0 1px var(--focus-a5), inset 0 0 0 1px var(--gray-a5);
  }

  &:where(:has(.rt-TextAreaInput:where(:disabled, :read-only))) {
    /* Blend with grey */
    background-image: linear-gradient(var(--gray-a2), var(--gray-a2));
    box-shadow: inset 0 0 0 var(--text-area-border-width) var(--gray-a6);
  }
}

/* classic */
.rt-TextAreaRoot:where(.rt-variant-classic) {
  --text-area-border-width: 1px;

  /* Blend inner shadow with page background */
  background-clip: content-box;
  background-color: var(--color-surface);
  box-shadow: var(--shadow-1);
  color: var(--gray-12);

  & :where(.rt-TextAreaInput) {
    &::placeholder {
      color: var(--gray-a10);
    }
  }

  /* prettier-ignore */
  &:where(:has(.rt-TextAreaInput:where(:autofill, [data-com-onepassword-filled]):not(:disabled, :read-only))) {
    /* Blend with focus color */
    background-image: linear-gradient(var(--focus-a2), var(--focus-a2));
    box-shadow: inset 0 0 0 1px var(--focus-a5), inset 0 0 0 1px var(--gray-a5);
  }

  &:where(:has(.rt-TextAreaInput:where(:disabled, :read-only))) {
    /* Blend with grey */
    background-image: linear-gradient(var(--gray-a2), var(--gray-a2));
  }
}

/* soft */
.rt-TextAreaRoot:where(.rt-variant-soft) {
  --text-area-border-width: 0px;

  background-color: var(--accent-a3);
  color: var(--accent-12);

  & :where(.rt-TextAreaInput) {
    &::selection {
      /* Use gray selection when component color is gray */
      background-color: var(--accent-a5);
    }
    &::placeholder {
      color: var(--accent-12);
      opacity: 0.65;
    }
  }

  &:where(:focus-within) {
    /* Use gray outline when component color is gray */
    outline-color: var(--accent-8);
  }

  /* prettier-ignore */
  &:where(:has(.rt-TextAreaInput:where(:autofill, [data-com-onepassword-filled]):not(:disabled, :read-only))) {
    /* Use gray autofill color when component color is gray */
    box-shadow: inset 0 0 0 1px var(--accent-a5), inset 0 0 0 1px var(--gray-a4);
  }

  &:where(:has(.rt-TextAreaInput:where(:disabled, :read-only))) {
    background-color: var(--gray-a3);
  }
}

/* all disabled and read-only text-areas */
.rt-TextAreaInput {
  &:where(:disabled, :read-only) {
    cursor: text;
    color: var(--gray-a11);
    /* Safari */
    -webkit-text-fill-color: var(--gray-a11);

    &::placeholder {
      opacity: 0.5;
    }
    &:where(:placeholder-shown) {
      cursor: var(--cursor-disabled);
    }
    &::selection {
      background-color: var(--gray-a5);
    }
    .rt-TextAreaRoot:where(:focus-within:has(&)) {
      outline-color: var(--gray-8);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/text-area.props.tsx
================================================
import { colorPropDef } from '../props/color.prop.js';
import { radiusPropDef } from '../props/radius.prop.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;
const variants = ['classic', 'surface', 'soft'] as const;
const resizeValues = ['none', 'vertical', 'horizontal', 'both'] as const;

// prettier-ignore
const textAreaPropDefs = {
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '2', responsive: true },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'surface' },
  resize: { type: 'enum', className: 'rt-r-resize', values: resizeValues,  responsive: true },
  ...colorPropDef,
  ...radiusPropDef,
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
  resize: PropDef<(typeof resizeValues)[number]>;
    };

export { textAreaPropDefs };


================================================
File: packages/radix-ui-themes/src/components/text-area.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';

import { textAreaPropDefs } from './text-area.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type TextAreaElement = React.ElementRef<'textarea'>;
type TextAreaOwnProps = GetPropDefTypes<typeof textAreaPropDefs> & {
  defaultValue?: string;
  value?: string;
};
interface TextAreaProps
  extends ComponentPropsWithout<'textarea', RemovedProps | 'size' | 'value'>,
    MarginProps,
    TextAreaOwnProps {}
const TextArea = React.forwardRef<TextAreaElement, TextAreaProps>((props, forwardedRef) => {
  const { className, color, radius, style, ...textAreaProps } = extractProps(
    props,
    textAreaPropDefs,
    marginPropDefs
  );
  return (
    <div
      data-accent-color={color}
      data-radius={radius}
      className={classNames('rt-TextAreaRoot', className)}
      style={style}
    >
      <textarea className="rt-reset rt-TextAreaInput" ref={forwardedRef} {...textAreaProps} />
    </div>
  );
});
TextArea.displayName = 'TextArea';

export { TextArea };
export type { TextAreaProps };


================================================
File: packages/radix-ui-themes/src/components/text-field.css
================================================
.rt-TextFieldRoot {
  display: flex;
  align-items: stretch;

  font-family: var(--default-font-family);
  font-weight: var(--font-weight-regular);
  font-style: normal;
  text-align: start;

  @supports selector(:has(*)) {
    &:where(:has(.rt-TextFieldInput:focus)) {
      outline: 2px solid var(--text-field-focus-color);
      outline-offset: -1px;
    }
  }
  @supports not selector(:has(*)) {
    &:where(:focus-within) {
      outline: 2px solid var(--text-field-focus-color);
      outline-offset: -1px;
    }
  }

  &::selection {
    background-color: var(--text-field-selection-color);
  }
}

.rt-TextFieldInput {
  /*
   * Flex layout edge case: when the parent container of TextFieldRoot
   * is smaller than the intrinsic width of TextFieldInput with all the slots,
   * this actually causes the input to shrink the available width.
   */
  width: 100%;

  /* Fix date inputs alignment in Chrome and Safari */
  display: flex;
  align-items: center;

  /* Inherit alignment from root in case it's overriden */
  text-align: inherit;

  /*
   * Hide type="number" input stepper because it's small, ugly, hard to use, and if
   * needed, a nicer one can be easily implemented with own buttons in the Slot part.
   */
  &:where([type='number']) {
    -moz-appearance: textfield;
  }
  &::-webkit-inner-spin-button {
    appearance: none;
  }

  /* Remove the native cancel button */
  &::-webkit-search-cancel-button {
    appearance: none;
  }

  &::selection {
    background-color: var(--text-field-selection-color);
  }

  /*
   * Style the date inputs:
   * https://codepen.io/andresdamelio/pen/KKbvdYb
   */

  /* Chrome’s calendar and time icons */
  &::-webkit-calendar-picker-indicator {
    box-sizing: content-box;
    width: var(--text-field-native-icon-size);
    height: var(--text-field-native-icon-size);
    padding: var(--space-1);
    margin-left: 0;
    margin-right: calc(var(--space-1) * -1);
    border-radius: calc(var(--text-field-border-radius) - 2px);
  }
  /* Chrome’s calendar icon */
  &:where(:not([type='time']))::-webkit-calendar-picker-indicator {
    margin-left: var(--space-1);
  }
  &::-webkit-calendar-picker-indicator:where(:hover) {
    background-color: var(--gray-a3);
  }
  &::-webkit-calendar-picker-indicator:where(:focus-visible) {
    outline: 2px solid var(--text-field-focus-color);
  }

  /* Remove focus ring from date fields and use the selection color */
  &::-webkit-datetime-edit-ampm-field,
  &::-webkit-datetime-edit-day-field,
  &::-webkit-datetime-edit-hour-field,
  &::-webkit-datetime-edit-millisecond-field,
  &::-webkit-datetime-edit-minute-field,
  &::-webkit-datetime-edit-month-field,
  &::-webkit-datetime-edit-second-field,
  &::-webkit-datetime-edit-week-field,
  &::-webkit-datetime-edit-year-field {
    &:where(:focus) {
      background-color: var(--text-field-selection-color);
      color: inherit;
      outline: none;
    }
  }

  @supports selector(:has(*)) {
    &:where(:autofill, [data-com-onepassword-filled]) {
      /* Reliably removes native autofill colors */
      background-clip: text;
      -webkit-text-fill-color: var(--gray-12);
    }
  }
}

.rt-TextFieldSlot {
  box-sizing: border-box;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  cursor: text;

  /* A slot that is not a right-side slot goes on the left */
  &:where(:not([data-side='right'])) {
    order: -1;
    margin-left: calc(var(--text-field-border-width) * -1);
    margin-right: 0;
  }

  &:where([data-side='right']),
  /*
   * A slot followed by a left-side slot that is not a left-side slot itself goes on the right.
   * In simple terms, this makes it so that two slots without an explicit side work automatically.
   */
  :where(&:not([data-side='right'])) ~ &:where(:not([data-side='left'])) {
    order: 0;
    margin-left: 0;
    margin-right: calc(var(--text-field-border-width) * -1);
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

.rt-TextFieldRoot {
  box-sizing: border-box;
  height: var(--text-field-height);
  padding: var(--text-field-border-width);
  border-radius: var(--text-field-border-radius);
}
.rt-TextFieldInput {
  /* Clip text to the border radius of the Root */
  border-radius: calc(var(--text-field-border-radius) - var(--text-field-border-width));

  /* Equivalent to padding-left, but doesn't cut off long values when cursor is at the end. */
  text-indent: var(--text-field-padding);

  &:where([type='date'], [type='datetime-local'], [type='time'], [type='week'], [type='month']) {
    /* Safari is buggy with text-indent for these input types */
    text-indent: 0;
    padding-left: var(--text-field-padding);
    padding-right: var(--text-field-padding);
  }

  /* Remove border-radius and text-indent/padding on the left if there’s a left-side slot */
  &:where(:has(~ .rt-TextFieldSlot:not([data-side='right']))) {
    text-indent: 0;
    padding-left: 0;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  /* Remove border-radius and padding on the right if there’s a right-side slot */
  /* prettier-ignore */
  &:where(:has(
    ~ .rt-TextFieldSlot[data-side='right'],
    ~ .rt-TextFieldSlot:not([data-side='right']) ~ .rt-TextFieldSlot:not([data-side='left'])
  )) {
    padding-right: 0;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }
}

@breakpoints {
  .rt-TextFieldRoot {
    &:where(.rt-r-size-1) {
      --text-field-height: var(--space-5);
      --text-field-padding: calc(var(--space-1) * 1.5 - var(--text-field-border-width));
      --text-field-border-radius: max(var(--radius-2), var(--radius-full));
      --text-field-native-icon-size: var(--space-3);
      font-size: var(--font-size-1);
      letter-spacing: var(--letter-spacing-1);

      & :where(.rt-TextFieldSlot) {
        gap: var(--space-2);
        padding-left: var(--space-1);
        padding-right: var(--space-1);
      }

      & :where(.rt-TextFieldInput) {
        /* Reset size 2 padding bottom */
        padding-bottom: 0px;

        /* Safari credentials autofill icon */
        &::-webkit-textfield-decoration-container {
          padding-right: 0px;
          margin-right: -2px;
        }
      }
    }

    &:where(.rt-r-size-2) {
      --text-field-height: var(--space-6);
      --text-field-padding: calc(var(--space-2) - var(--text-field-border-width));
      --text-field-border-radius: max(var(--radius-2), var(--radius-full));
      --text-field-native-icon-size: var(--space-4);
      font-size: var(--font-size-2);
      letter-spacing: var(--letter-spacing-2);

      & :where(.rt-TextFieldInput) {
        /* Avoid 1px baseline jitter when layout around the text field is subpixel-sized (e.g. vh units). */
        /* Works because as of Nov 2023, Chrome computes input text bounding box height as 16.5px on @2x screens. */
        padding-bottom: 0.5px;

        /* Safari credentials autofill icon */
        &::-webkit-textfield-decoration-container {
          padding-right: 2px;
          margin-right: 0px;
        }
      }

      & :where(.rt-TextFieldSlot) {
        gap: var(--space-2);
        padding-left: var(--space-2);
        padding-right: var(--space-2);
      }
    }

    &:where(.rt-r-size-3) {
      --text-field-height: var(--space-7);
      --text-field-padding: calc(var(--space-3) - var(--text-field-border-width));
      --text-field-border-radius: max(var(--radius-3), var(--radius-full));
      --text-field-native-icon-size: var(--space-4);
      font-size: var(--font-size-3);
      letter-spacing: var(--letter-spacing-3);

      & :where(.rt-TextFieldInput) {
        /* Reset size 2 padding bottom */
        padding-bottom: 0px;

        /* Safari credentials autofill icon */
        &::-webkit-textfield-decoration-container {
          padding-right: 5px;
          margin-right: 0px;
        }
      }

      & :where(.rt-TextFieldSlot) {
        gap: var(--space-3);
        padding-left: var(--space-3);
        padding-right: var(--space-3);
      }
    }
  }
}

/***************************************************************************************************
	*                                                                                                 *
	* VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

/* surface */

.rt-TextFieldRoot:where(.rt-variant-surface) {
  --text-field-selection-color: var(--focus-a5);
  --text-field-focus-color: var(--focus-8);
  --text-field-border-width: 1px;

  /* Blend inner shadow with page background */
  background-clip: content-box;
  background-color: var(--color-surface);
  box-shadow: inset 0 0 0 var(--text-field-border-width) var(--gray-a7);
  color: var(--gray-12);

  & :where(.rt-TextFieldInput) {
    &::placeholder {
      color: var(--gray-a10);
    }
  }

  & :where(.rt-TextFieldSlot) {
    color: var(--gray-a11);

    &:where([data-accent-color]) {
      color: var(--accent-a11);
    }
  }

  /* prettier-ignore */
  &:where(:has(.rt-TextFieldInput:where(:autofill, [data-com-onepassword-filled]):not(:disabled, :read-only))) {
    /* Blend with focus color */
    background-image: linear-gradient(var(--focus-a2), var(--focus-a2));
    box-shadow: inset 0 0 0 1px var(--focus-a5), inset 0 0 0 1px var(--gray-a5);
  }

  &:where(:has(.rt-TextFieldInput:where(:disabled, :read-only))) {
    /* Blend with grey */
    background-image: linear-gradient(var(--gray-a2), var(--gray-a2));
    box-shadow: inset 0 0 0 var(--text-field-border-width) var(--gray-a6);
  }
}

/* classic */

.rt-TextFieldRoot:where(.rt-variant-classic) {
  --text-field-selection-color: var(--focus-a5);
  --text-field-focus-color: var(--focus-8);
  --text-field-border-width: 1px;

  /* Blend inner shadow with page background */
  background-clip: content-box;
  background-color: var(--color-surface);
  box-shadow: var(--shadow-1);
  color: var(--gray-12);

  & :where(.rt-TextFieldInput) {
    &::placeholder {
      color: var(--gray-a10);
    }
  }

  & :where(.rt-TextFieldSlot) {
    color: var(--gray-a11);

    &:where([data-accent-color]) {
      color: var(--accent-a11);
    }
  }

  /* prettier-ignore */
  &:where(:has(.rt-TextFieldInput:where(:autofill, [data-com-onepassword-filled]):not(:disabled, :read-only))) {
    /* Blend with focus color */
    background-image: linear-gradient(var(--focus-a2), var(--focus-a2));
    box-shadow: inset 0 0 0 1px var(--focus-a5), inset 0 0 0 1px var(--gray-a5);
  }

  &:where(:has(.rt-TextFieldInput:where(:disabled, :read-only))) {
    /* Blend with grey */
    background-image: linear-gradient(var(--gray-a2), var(--gray-a2));
  }
}

/* soft */

.rt-TextFieldRoot:where(.rt-variant-soft) {
  --text-field-selection-color: var(--accent-a5);
  --text-field-focus-color: var(--accent-8);
  --text-field-border-width: 0px;

  background-color: var(--accent-a3);
  color: var(--accent-12);

  & :where(.rt-TextFieldInput) {
    &::placeholder {
      color: var(--accent-12);
      opacity: 0.6;
    }
  }

  & :where(.rt-TextFieldSlot) {
    color: var(--accent-12);

    &:where([data-accent-color]) {
      color: var(--accent-a11);
    }
  }

  /* prettier-ignore */
  &:where(:has(.rt-TextFieldInput:where(:autofill, [data-com-onepassword-filled]):not(:disabled, :read-only))) {
    /* Use gray autofill color when component color is gray */
    box-shadow: inset 0 0 0 1px var(--accent-a5), inset 0 0 0 1px var(--gray-a4);
  }

  &:where(:has(.rt-TextFieldInput:where(:disabled, :read-only))) {
    background-color: var(--gray-a3);
  }
}

/* all disabled and read-only text fields */

.rt-TextFieldInput {
  &:where(:disabled, :read-only) {
    cursor: text;
    color: var(--gray-a11);
    /* Safari */
    -webkit-text-fill-color: var(--gray-a11);

    &::placeholder {
      opacity: 0.5;
    }
    &:where(:placeholder-shown) {
      cursor: var(--cursor-disabled);

      & ~ :where(.rt-TextFieldSlot) {
        cursor: var(--cursor-disabled);
      }
    }

    .rt-TextFieldRoot:where(:has(&)) {
      --text-field-selection-color: var(--gray-a5);
      --text-field-focus-color: var(--gray-8);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/text-field.props.tsx
================================================
import { colorPropDef } from '../props/color.prop.js';
import { paddingPropDefs } from '../props/padding.props.js';
import { radiusPropDef } from '../props/radius.prop.js';
import { flexPropDefs } from './flex.props.js';

import type { PropDef } from '../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;
const variants = ['classic', 'surface', 'soft'] as const;

const textFieldRootPropDefs = {
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '2', responsive: true },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'surface' },
  ...colorPropDef,
  ...radiusPropDef,
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
};

const sides = ['left', 'right'] as const;

const textFieldSlotPropDefs = {
  side: { type: 'enum', values: sides },
  ...colorPropDef,
  gap: flexPropDefs.gap,
  px: paddingPropDefs.px,
  pl: paddingPropDefs.pl,
  pr: paddingPropDefs.pr,
} satisfies {
  side: PropDef<(typeof sides)[number]>;
  gap: typeof flexPropDefs.gap;
  px: typeof paddingPropDefs.px;
  pl: typeof paddingPropDefs.pl;
  pr: typeof paddingPropDefs.pr;
};

export { textFieldRootPropDefs, textFieldSlotPropDefs };


================================================
File: packages/radix-ui-themes/src/components/text-field.tsx
================================================
'use client';

import * as React from 'react';
import classNames from 'classnames';
import { composeRefs } from 'radix-ui/internal';

import { textFieldRootPropDefs, textFieldSlotPropDefs } from './text-field.props.js';
import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { NotInputTextualAttributes } from '../helpers/input-attributes.js';
import type { MarginProps } from '../props/margin.props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type TextFieldRootElement = React.ElementRef<'input'>;
type TextFieldRootOwnProps = GetPropDefTypes<typeof textFieldRootPropDefs> & {
  defaultValue?: string | number;
  value?: string | number;
  type?:
    | 'date'
    | 'datetime-local'
    | 'email'
    | 'hidden'
    | 'month'
    | 'number'
    | 'password'
    | 'search'
    | 'tel'
    | 'text'
    | 'time'
    | 'url'
    | 'week';
};
type TextFieldInputProps = ComponentPropsWithout<
  'input',
  NotInputTextualAttributes | 'color' | 'defaultValue' | 'size' | 'type' | 'value'
>;
interface TextFieldRootProps extends TextFieldInputProps, MarginProps, TextFieldRootOwnProps {}
const TextFieldRoot = React.forwardRef<TextFieldRootElement, TextFieldRootProps>(
  (props, forwardedRef) => {
    const inputRef = React.useRef<HTMLInputElement>(null);
    const { children, className, color, radius, style, ...inputProps } = extractProps(
      props,
      textFieldRootPropDefs,
      marginPropDefs
    );
    return (
      <div
        data-accent-color={color}
        data-radius={radius}
        style={style}
        className={classNames('rt-TextFieldRoot', className)}
        onPointerDown={(event) => {
          const target = event.target as HTMLElement;
          if (target.closest('input, button, a')) return;

          const input = inputRef.current;
          if (!input) return;

          // Same selector as in the CSS to find the right slot
          const isRightSlot = target.closest(`
            .rt-TextFieldSlot[data-side='right'],
            .rt-TextFieldSlot:not([data-side='right']) ~ .rt-TextFieldSlot:not([data-side='left'])
          `);

          const cursorPosition = isRightSlot ? input.value.length : 0;

          requestAnimationFrame(() => {
            // Only some input types support this, browsers will throw an error if not supported
            // See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange#:~:text=Note%20that%20according,not%20support%20selection%22.
            try {
              input.setSelectionRange(cursorPosition, cursorPosition);
            } catch {}
            input.focus();
          });
        }}
      >
        <input
          spellCheck="false"
          {...inputProps}
          ref={composeRefs(inputRef, forwardedRef)}
          className="rt-reset rt-TextFieldInput"
        />
        {children}
      </div>
    );
  }
);
TextFieldRoot.displayName = 'TextField.Root';

type TextFieldSlotElement = React.ElementRef<'div'>;
type TextFieldSlotOwnProps = GetPropDefTypes<typeof textFieldSlotPropDefs>;
interface TextFieldSlotProps
  extends ComponentPropsWithout<'div', RemovedProps>,
    TextFieldSlotOwnProps {}
const TextFieldSlot = React.forwardRef<TextFieldSlotElement, TextFieldSlotProps>(
  (props, forwardedRef) => {
    const { className, color, side, ...slotProps } = extractProps(props, textFieldSlotPropDefs);
    return (
      <div
        data-accent-color={color}
        data-side={side}
        {...slotProps}
        ref={forwardedRef}
        className={classNames('rt-TextFieldSlot', className)}
      />
    );
  }
);
TextFieldSlot.displayName = 'TextField.Slot';

export { TextFieldRoot as Root, TextFieldSlot as Slot };
export type { TextFieldRootProps as RootProps, TextFieldSlotProps as SlotProps };


================================================
File: packages/radix-ui-themes/src/components/text.css
================================================
.rt-Text {
  line-height: var(--line-height, var(--default-line-height));
  letter-spacing: var(--letter-spacing, inherit);

  :where(&) {
    margin: 0;
  }

  &:where([data-accent-color]) {
    color: var(--accent-a11);
  }

  &:where([data-accent-color].rt-high-contrast),
  :where([data-accent-color]:not(.radix-themes)) &:where(.rt-high-contrast) {
    color: var(--accent-12);
  }

  /* stylelint-disable selector-max-type */
  &:where(label) {
    /* Better -webkit-tap-highlight-color */
    @media (pointer: coarse) {
      -webkit-tap-highlight-color: transparent;
      &:where(:active) {
        outline: 0.75em solid var(--gray-a4);
        outline-offset: -0.6em;
      }
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-Text {
    &:where(.rt-r-size-1) {
      font-size: var(--font-size-1);
      --line-height: var(--line-height-1);
      --letter-spacing: var(--letter-spacing-1);
    }
    &:where(.rt-r-size-2) {
      font-size: var(--font-size-2);
      --line-height: var(--line-height-2);
      --letter-spacing: var(--letter-spacing-2);
    }
    &:where(.rt-r-size-3) {
      font-size: var(--font-size-3);
      --line-height: var(--line-height-3);
      --letter-spacing: var(--letter-spacing-3);
    }
    &:where(.rt-r-size-4) {
      font-size: var(--font-size-4);
      --line-height: var(--line-height-4);
      --letter-spacing: var(--letter-spacing-4);
    }
    &:where(.rt-r-size-5) {
      font-size: var(--font-size-5);
      --line-height: var(--line-height-5);
      --letter-spacing: var(--letter-spacing-5);
    }
    &:where(.rt-r-size-6) {
      font-size: var(--font-size-6);
      --line-height: var(--line-height-6);
      --letter-spacing: var(--letter-spacing-6);
    }
    &:where(.rt-r-size-7) {
      font-size: var(--font-size-7);
      --line-height: var(--line-height-7);
      --letter-spacing: var(--letter-spacing-7);
    }
    &:where(.rt-r-size-8) {
      font-size: var(--font-size-8);
      --line-height: var(--line-height-8);
      --letter-spacing: var(--letter-spacing-8);
    }
    &:where(.rt-r-size-9) {
      font-size: var(--font-size-9);
      --line-height: var(--line-height-9);
      --letter-spacing: var(--letter-spacing-9);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/text.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { colorPropDef } from '../props/color.prop.js';
import { highContrastPropDef } from '../props/high-contrast.prop.js';
import { leadingTrimPropDef } from '../props/leading-trim.prop.js';
import { textAlignPropDef } from '../props/text-align.prop.js';
import { textWrapPropDef } from '../props/text-wrap.prop.js';
import { truncatePropDef } from '../props/truncate.prop.js';
import { weightPropDef } from '../props/weight.prop.js';

import type { PropDef } from '../props/prop-def.js';

const as = ['span', 'div', 'label', 'p'] as const;
const sizes = ['1', '2', '3', '4', '5', '6', '7', '8', '9'] as const;

const textPropDefs = {
  as: { type: 'enum', values: as, default: 'span' },
  ...asChildPropDef,
  size: {
    type: 'enum',
    className: 'rt-r-size',
    values: sizes,
    responsive: true,
  },
  ...weightPropDef,
  ...textAlignPropDef,
  ...leadingTrimPropDef,
  ...truncatePropDef,
  ...textWrapPropDef,
  ...colorPropDef,
  ...highContrastPropDef,
} satisfies {
  as: PropDef<(typeof as)[number]>;
  size: PropDef<(typeof sizes)[number]>;
};

export { textPropDefs };


================================================
File: packages/radix-ui-themes/src/components/text.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { extractProps } from '../helpers/extract-props.js';
import { marginPropDefs } from '../props/margin.props.js';
import { textPropDefs } from './text.props.js';

import type { MarginProps } from '../props/margin.props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';

type TextElement = React.ElementRef<'span'>;
type TextOwnProps = GetPropDefTypes<typeof textPropDefs>;
interface CommonTextProps extends MarginProps, TextOwnProps {}
type TextSpanProps = { as?: 'span' } & ComponentPropsWithout<'span', RemovedProps>;
type TextDivProps = { as: 'div' } & ComponentPropsWithout<'div', RemovedProps>;
type TextLabelProps = { as: 'label' } & ComponentPropsWithout<'label', RemovedProps>;
type TextPProps = { as: 'p' } & ComponentPropsWithout<'p', RemovedProps>;
type TextProps = CommonTextProps & (TextSpanProps | TextDivProps | TextLabelProps | TextPProps);

const Text = React.forwardRef<TextElement, TextProps>((props, forwardedRef) => {
  const {
    children,
    className,
    asChild,
    as: Tag = 'span',
    color,
    ...textProps
  } = extractProps(props, textPropDefs, marginPropDefs);
  return (
    <Slot.Root
      data-accent-color={color}
      {...textProps}
      ref={forwardedRef}
      className={classNames('rt-Text', className)}
    >
      {asChild ? children : <Tag>{children}</Tag>}
    </Slot.Root>
  );
});
Text.displayName = 'Text';

export { Text };
export type { TextProps };


================================================
File: packages/radix-ui-themes/src/components/theme-panel.css
================================================
.rt-ThemePanelShortcut {
  &:where(:focus-visible) {
    outline-style: solid;
    outline-width: 2px;
    outline-offset: 2px;
    outline-color: var(--accent-9);
  }
}

.rt-ThemePanelSwatch,
.rt-ThemePanelRadioCard {
  position: relative;
}

.rt-ThemePanelSwatchInput,
.rt-ThemePanelRadioCardInput {
  appearance: none;
  margin: 0;
  outline: none;
  outline-width: 2px;
  position: absolute;
  inset: 0;
  border-radius: inherit;

  /* iOS Safari */
  width: 100%;
  height: 100%;
}

.rt-ThemePanelSwatch {
  width: var(--space-5);
  height: var(--space-5);
  border-radius: 100%;
}

.rt-ThemePanelSwatchInput {
  outline-offset: 2px;

  &:where(:checked) {
    outline-style: solid;
    outline-color: var(--gray-12);
  }
  &:where(:focus-visible) {
    outline-style: solid;
    outline-color: var(--accent-9);
  }
}

.rt-ThemePanelRadioCard {
  border-radius: var(--radius-1);
  box-shadow: 0 0 0 1px var(--gray-7);
}

.rt-ThemePanelRadioCardInput {
  outline-offset: -1px;

  &:where(:checked) {
    outline-style: solid;
    outline-color: var(--gray-12);
  }
  &:where(:focus-visible) {
    background-color: var(--accent-a3);
    outline-style: solid;
    outline-color: var(--accent-9);
  }
}


================================================
File: packages/radix-ui-themes/src/components/theme-panel.tsx
================================================
'use client';

import * as React from 'react';
import { useCallbackRef } from 'radix-ui/internal';

import {
  AccessibleIcon,
  Box,
  Button,
  Flex,
  Grid,
  Heading,
  IconButton,
  Kbd,
  Popover,
  ScrollArea,
  Text,
  Tooltip,
} from '../index.js';
import { Theme, useThemeContext } from './theme.js';
import { inert } from '../helpers/inert.js';
import { getMatchingGrayColor } from '../helpers/get-matching-gray-color.js';
import { themePropDefs } from './theme.props.js';

import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

interface ThemePanelProps extends Omit<ThemePanelImplProps, keyof ThemePanelImplPrivateProps> {
  defaultOpen?: boolean;
}
const ThemePanel = React.forwardRef<ThemePanelImplElement, ThemePanelProps>(
  ({ defaultOpen = true, ...props }, forwardedRef) => {
    const [open, setOpen] = React.useState(defaultOpen);
    return <ThemePanelImpl {...props} ref={forwardedRef} open={open} onOpenChange={setOpen} />;
  }
);
ThemePanel.displayName = 'ThemePanel';

type ThemePanelImplElement = React.ElementRef<'div'>;
interface ThemePanelImplPrivateProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}
interface ThemePanelImplProps
  extends ComponentPropsWithout<'div', RemovedProps>,
    ThemePanelImplPrivateProps {
  onAppearanceChange?: (value: 'light' | 'dark') => void;
}
const ThemePanelImpl = React.forwardRef<ThemePanelImplElement, ThemePanelImplProps>(
  (props, forwardedRef) => {
    const { open, onOpenChange, onAppearanceChange: onAppearanceChangeProp, ...panelProps } = props;
    const themeContext = useThemeContext();
    const {
      appearance,
      onAppearanceChange,
      accentColor,
      onAccentColorChange,
      grayColor,
      onGrayColorChange,
      panelBackground,
      onPanelBackgroundChange,
      radius,
      onRadiusChange,
      scaling,
      onScalingChange,
    } = themeContext;

    const hasOnAppearanceChangeProp = onAppearanceChangeProp !== undefined;
    const handleAppearanceChangeProp = useCallbackRef(onAppearanceChangeProp);
    const handleAppearanceChange = React.useCallback(
      (value: 'light' | 'dark') => {
        const cleanup = disableAnimation();

        if (appearance !== 'inherit') {
          onAppearanceChange(value);
          return;
        }

        if (hasOnAppearanceChangeProp) {
          handleAppearanceChangeProp(value);
        } else {
          setResolvedAppearance(value);
          updateRootAppearanceClass(value);
        }

        cleanup();
      },
      [appearance, onAppearanceChange, hasOnAppearanceChangeProp, handleAppearanceChangeProp]
    );

    const autoMatchedGray = getMatchingGrayColor(accentColor);
    const resolvedGrayColor = grayColor === 'auto' ? autoMatchedGray : grayColor;

    const [copyState, setCopyState] = React.useState<'idle' | 'copying' | 'copied'>('idle');
    async function handleCopyThemeConfig() {
      const theme = {
        appearance: appearance === themePropDefs.appearance.default ? undefined : appearance,
        accentColor: accentColor === themePropDefs.accentColor.default ? undefined : accentColor,
        grayColor: grayColor === themePropDefs.grayColor.default ? undefined : grayColor,
        panelBackground:
          panelBackground === themePropDefs.panelBackground.default ? undefined : panelBackground,
        radius: radius === themePropDefs.radius.default ? undefined : radius,
        scaling: scaling === themePropDefs.scaling.default ? undefined : scaling,
      } satisfies GetPropDefTypes<typeof themePropDefs>;

      const props = Object.keys(theme)
        .filter((key) => theme[key as keyof typeof theme] !== undefined)
        .map((key) => `${key}="${theme[key as keyof typeof theme]}"`)
        .join(' ');

      const textToCopy = props ? `<Theme ${props}>` : '<Theme>';

      setCopyState('copying');
      await navigator.clipboard.writeText(textToCopy);
      setCopyState('copied');
      setTimeout(() => setCopyState('idle'), 2000);
    }

    const [resolvedAppearance, setResolvedAppearance] = React.useState<'light' | 'dark' | null>(
      appearance === 'inherit' ? null : appearance
    );

    const keyboardInputElement = `
      [contenteditable],
      [role="combobox"],
      [role="listbox"],
      [role="menu"],
      input:not([type="radio"], [type="checkbox"]),
      select,
      textarea
    `;

    // quickly show/hide using "T" keypress
    React.useEffect(() => {
      function handleKeydown(event: KeyboardEvent) {
        const isModifierActive = event.altKey || event.ctrlKey || event.shiftKey || event.metaKey;
        const isKeyboardInputActive = document.activeElement?.closest(keyboardInputElement);
        const isKeyT = event.key?.toUpperCase() === 'T' && !isModifierActive;
        if (isKeyT && !isKeyboardInputActive) {
          onOpenChange(!open);
        }
      }
      document.addEventListener('keydown', handleKeydown);
      return () => document.removeEventListener('keydown', handleKeydown);
    }, [onOpenChange, open, keyboardInputElement]);

    // quickly toggle appearance using "D" keypress
    React.useEffect(() => {
      function handleKeydown(event: KeyboardEvent) {
        const isModifierActive = event.altKey || event.ctrlKey || event.shiftKey || event.metaKey;
        const isKeyboardInputActive = document.activeElement?.closest(keyboardInputElement);
        const isKeyD = event.key?.toUpperCase() === 'D' && !isModifierActive;
        if (isKeyD && !isKeyboardInputActive) {
          handleAppearanceChange(resolvedAppearance === 'light' ? 'dark' : 'light');
        }
      }
      document.addEventListener('keydown', handleKeydown);
      return () => document.removeEventListener('keydown', handleKeydown);
    }, [handleAppearanceChange, resolvedAppearance, keyboardInputElement]);

    React.useEffect(() => {
      const root = document.documentElement;
      const body = document.body;

      function update() {
        const hasDarkClass =
          root.classList.contains('dark') ||
          root.classList.contains('dark-theme') ||
          body.classList.contains('dark') ||
          body.classList.contains('dark-theme');

        if (appearance === 'inherit') {
          setResolvedAppearance(hasDarkClass ? 'dark' : 'light');
        } else {
          setResolvedAppearance(appearance);
        }
      }

      const classNameObserver = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
          if (mutation.attributeName === 'class') {
            update();
          }
        });
      });

      update();

      // Observe <html> and <body> for `class` changes only when the appearance is inherited from them
      if (appearance === 'inherit') {
        classNameObserver.observe(root, { attributes: true });
        classNameObserver.observe(body, { attributes: true });
      }

      return () => classNameObserver.disconnect();
    }, [appearance]);

    return (
      <Theme asChild radius="medium" scaling="100%">
        <Flex
          direction="column"
          position="fixed"
          top="0"
          right="0"
          mr="4"
          mt="4"
          // @ts-ignore
          inert={open ? undefined : inert}
          {...panelProps}
          ref={forwardedRef}
          style={{
            zIndex: 9999,
            overflow: 'hidden',
            maxHeight: 'calc(100vh - var(--space-4) - var(--space-4))',
            borderRadius: 'var(--radius-4)',
            backgroundColor: 'var(--color-panel-solid)',
            transformOrigin: 'top center',
            transitionProperty: 'transform, box-shadow',
            transitionDuration: '200ms',
            transitionTimingFunction: open ? 'ease-out' : 'ease-in',
            transform: open ? 'none' : 'translateX(105%)',
            boxShadow: open ? 'var(--shadow-5)' : 'var(--shadow-2)',
            ...props.style,
          }}
        >
          <ScrollArea>
            <Box flexGrow="1" p="5" position="relative">
              <Box position="absolute" top="0" right="0" m="2">
                <Tooltip
                  content="Press T to show/hide the Theme Panel"
                  side="bottom"
                  sideOffset={6}
                >
                  <Kbd asChild size="3" tabIndex={0} className="rt-ThemePanelShortcut">
                    <button onClick={() => onOpenChange(!open)}>T</button>
                  </Kbd>
                </Tooltip>
              </Box>

              <Heading size="5" trim="both" as="h3" mb="5">
                Theme
              </Heading>

              <Text id="accent-color-title" as="p" size="2" weight="medium" mt="5">
                Accent color
              </Text>

              <Grid columns="10" gap="2" mt="3" role="group" aria-labelledby="accent-color-title">
                {themePropDefs.accentColor.values.map((color) => (
                  <label
                    key={color}
                    className="rt-ThemePanelSwatch"
                    style={{ backgroundColor: `var(--${color}-9)` }}
                  >
                    <Tooltip
                      content={`${upperFirst(color)}${
                        accentColor === 'gray' && resolvedGrayColor !== 'gray'
                          ? ` (${upperFirst(resolvedGrayColor)})`
                          : ''
                      }`}
                    >
                      <input
                        className="rt-ThemePanelSwatchInput"
                        type="radio"
                        name="accentColor"
                        value={color}
                        checked={accentColor === color}
                        onChange={(event) =>
                          onAccentColorChange(event.target.value as typeof accentColor)
                        }
                      />
                    </Tooltip>
                  </label>
                ))}
              </Grid>

              <Flex asChild align="center" justify="between">
                <Text as="p" id="gray-color-title" size="2" weight="medium" mt="5">
                  Gray color
                </Text>
              </Flex>

              <Grid columns="10" gap="2" mt="3" role="group" aria-labelledby="gray-color-title">
                {themePropDefs.grayColor.values.map((gray) => (
                  <Flex key={gray} asChild align="center" justify="center">
                    <label
                      className="rt-ThemePanelSwatch"
                      style={{
                        backgroundColor:
                          gray === 'auto'
                            ? `var(--${autoMatchedGray}-9)`
                            : gray === 'gray'
                            ? 'var(--gray-9)'
                            : `var(--${gray}-9)`,
                        // we override --gray so pure gray doesn't exist anymore
                        // recover something as close as possible by desaturating
                        filter: gray === 'gray' ? 'saturate(0)' : undefined,
                      }}
                    >
                      <Tooltip
                        content={`${upperFirst(gray)}${
                          gray === 'auto' ? ` (${upperFirst(autoMatchedGray)})` : ''
                        }`}
                      >
                        <input
                          className="rt-ThemePanelSwatchInput"
                          type="radio"
                          name="grayColor"
                          value={gray}
                          checked={grayColor === gray}
                          onChange={(event) =>
                            onGrayColorChange(event.target.value as typeof grayColor)
                          }
                        />
                      </Tooltip>
                    </label>
                  </Flex>
                ))}
              </Grid>

              <Text id="appearance-title" as="p" size="2" weight="medium" mt="5">
                Appearance
              </Text>

              <Grid columns="2" gap="2" mt="3" role="group" aria-labelledby="appearance-title">
                {(['light', 'dark'] as const).map((value) => (
                  <label key={value} className="rt-ThemePanelRadioCard">
                    <input
                      className="rt-ThemePanelRadioCardInput"
                      type="radio"
                      name="appearance"
                      value={value}
                      checked={resolvedAppearance === value}
                      onChange={(event) =>
                        handleAppearanceChange(event.target.value as 'light' | 'dark')
                      }
                    />
                    <Flex align="center" justify="center" height="32px" gap="2">
                      {value === 'light' ? (
                        <svg
                          width="15"
                          height="15"
                          viewBox="0 0 15 15"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                          style={{ margin: '0 -1px' }}
                        >
                          <path
                            d="M7.5 0C7.77614 0 8 0.223858 8 0.5V2.5C8 2.77614 7.77614 3 7.5 3C7.22386 3 7 2.77614 7 2.5V0.5C7 0.223858 7.22386 0 7.5 0ZM2.1967 2.1967C2.39196 2.00144 2.70854 2.00144 2.90381 2.1967L4.31802 3.61091C4.51328 3.80617 4.51328 4.12276 4.31802 4.31802C4.12276 4.51328 3.80617 4.51328 3.61091 4.31802L2.1967 2.90381C2.00144 2.70854 2.00144 2.39196 2.1967 2.1967ZM0.5 7C0.223858 7 0 7.22386 0 7.5C0 7.77614 0.223858 8 0.5 8H2.5C2.77614 8 3 7.77614 3 7.5C3 7.22386 2.77614 7 2.5 7H0.5ZM2.1967 12.8033C2.00144 12.608 2.00144 12.2915 2.1967 12.0962L3.61091 10.682C3.80617 10.4867 4.12276 10.4867 4.31802 10.682C4.51328 10.8772 4.51328 11.1938 4.31802 11.3891L2.90381 12.8033C2.70854 12.9986 2.39196 12.9986 2.1967 12.8033ZM12.5 7C12.2239 7 12 7.22386 12 7.5C12 7.77614 12.2239 8 12.5 8H14.5C14.7761 8 15 7.77614 15 7.5C15 7.22386 14.7761 7 14.5 7H12.5ZM10.682 4.31802C10.4867 4.12276 10.4867 3.80617 10.682 3.61091L12.0962 2.1967C12.2915 2.00144 12.608 2.00144 12.8033 2.1967C12.9986 2.39196 12.9986 2.70854 12.8033 2.90381L11.3891 4.31802C11.1938 4.51328 10.8772 4.51328 10.682 4.31802ZM8 12.5C8 12.2239 7.77614 12 7.5 12C7.22386 12 7 12.2239 7 12.5V14.5C7 14.7761 7.22386 15 7.5 15C7.77614 15 8 14.7761 8 14.5V12.5ZM10.682 10.682C10.8772 10.4867 11.1938 10.4867 11.3891 10.682L12.8033 12.0962C12.9986 12.2915 12.9986 12.608 12.8033 12.8033C12.608 12.9986 12.2915 12.9986 12.0962 12.8033L10.682 11.3891C10.4867 11.1938 10.4867 10.8772 10.682 10.682ZM5.5 7.5C5.5 6.39543 6.39543 5.5 7.5 5.5C8.60457 5.5 9.5 6.39543 9.5 7.5C9.5 8.60457 8.60457 9.5 7.5 9.5C6.39543 9.5 5.5 8.60457 5.5 7.5ZM7.5 4.5C5.84315 4.5 4.5 5.84315 4.5 7.5C4.5 9.15685 5.84315 10.5 7.5 10.5C9.15685 10.5 10.5 9.15685 10.5 7.5C10.5 5.84315 9.15685 4.5 7.5 4.5Z"
                            fill="currentColor"
                            fillRule="evenodd"
                            clipRule="evenodd"
                          ></path>
                        </svg>
                      ) : (
                        <svg
                          width="15"
                          height="15"
                          viewBox="0 0 15 15"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                          style={{ margin: '0 -1px' }}
                        >
                          <path
                            d="M2.89998 0.499976C2.89998 0.279062 2.72089 0.0999756 2.49998 0.0999756C2.27906 0.0999756 2.09998 0.279062 2.09998 0.499976V1.09998H1.49998C1.27906 1.09998 1.09998 1.27906 1.09998 1.49998C1.09998 1.72089 1.27906 1.89998 1.49998 1.89998H2.09998V2.49998C2.09998 2.72089 2.27906 2.89998 2.49998 2.89998C2.72089 2.89998 2.89998 2.72089 2.89998 2.49998V1.89998H3.49998C3.72089 1.89998 3.89998 1.72089 3.89998 1.49998C3.89998 1.27906 3.72089 1.09998 3.49998 1.09998H2.89998V0.499976ZM5.89998 3.49998C5.89998 3.27906 5.72089 3.09998 5.49998 3.09998C5.27906 3.09998 5.09998 3.27906 5.09998 3.49998V4.09998H4.49998C4.27906 4.09998 4.09998 4.27906 4.09998 4.49998C4.09998 4.72089 4.27906 4.89998 4.49998 4.89998H5.09998V5.49998C5.09998 5.72089 5.27906 5.89998 5.49998 5.89998C5.72089 5.89998 5.89998 5.72089 5.89998 5.49998V4.89998H6.49998C6.72089 4.89998 6.89998 4.72089 6.89998 4.49998C6.89998 4.27906 6.72089 4.09998 6.49998 4.09998H5.89998V3.49998ZM1.89998 6.49998C1.89998 6.27906 1.72089 6.09998 1.49998 6.09998C1.27906 6.09998 1.09998 6.27906 1.09998 6.49998V7.09998H0.499976C0.279062 7.09998 0.0999756 7.27906 0.0999756 7.49998C0.0999756 7.72089 0.279062 7.89998 0.499976 7.89998H1.09998V8.49998C1.09998 8.72089 1.27906 8.89997 1.49998 8.89997C1.72089 8.89997 1.89998 8.72089 1.89998 8.49998V7.89998H2.49998C2.72089 7.89998 2.89998 7.72089 2.89998 7.49998C2.89998 7.27906 2.72089 7.09998 2.49998 7.09998H1.89998V6.49998ZM8.54406 0.98184L8.24618 0.941586C8.03275 0.917676 7.90692 1.1655 8.02936 1.34194C8.17013 1.54479 8.29981 1.75592 8.41754 1.97445C8.91878 2.90485 9.20322 3.96932 9.20322 5.10022C9.20322 8.37201 6.82247 11.0878 3.69887 11.6097C3.45736 11.65 3.20988 11.6772 2.96008 11.6906C2.74563 11.702 2.62729 11.9535 2.77721 12.1072C2.84551 12.1773 2.91535 12.2458 2.98667 12.3128L3.05883 12.3795L3.31883 12.6045L3.50684 12.7532L3.62796 12.8433L3.81491 12.9742L3.99079 13.089C4.11175 13.1651 4.23536 13.2375 4.36157 13.3059L4.62496 13.4412L4.88553 13.5607L5.18837 13.6828L5.43169 13.7686C5.56564 13.8128 5.70149 13.8529 5.83857 13.8885C5.94262 13.9155 6.04767 13.9401 6.15405 13.9622C6.27993 13.9883 6.40713 14.0109 6.53544 14.0298L6.85241 14.0685L7.11934 14.0892C7.24637 14.0965 7.37436 14.1002 7.50322 14.1002C11.1483 14.1002 14.1032 11.1453 14.1032 7.50023C14.1032 7.25044 14.0893 7.00389 14.0623 6.76131L14.0255 6.48407C13.991 6.26083 13.9453 6.04129 13.8891 5.82642C13.8213 5.56709 13.7382 5.31398 13.6409 5.06881L13.5279 4.80132L13.4507 4.63542L13.3766 4.48666C13.2178 4.17773 13.0353 3.88295 12.8312 3.60423L12.6782 3.40352L12.4793 3.16432L12.3157 2.98361L12.1961 2.85951L12.0355 2.70246L11.8134 2.50184L11.4925 2.24191L11.2483 2.06498L10.9562 1.87446L10.6346 1.68894L10.3073 1.52378L10.1938 1.47176L9.95488 1.3706L9.67791 1.2669L9.42566 1.1846L9.10075 1.09489L8.83599 1.03486L8.54406 0.98184ZM10.4032 5.30023C10.4032 4.27588 10.2002 3.29829 9.83244 2.40604C11.7623 3.28995 13.1032 5.23862 13.1032 7.50023C13.1032 10.593 10.596 13.1002 7.50322 13.1002C6.63646 13.1002 5.81597 12.9036 5.08355 12.5522C6.5419 12.0941 7.81081 11.2082 8.74322 10.0416C8.87963 10.2284 9.10028 10.3497 9.34928 10.3497C9.76349 10.3497 10.0993 10.0139 10.0993 9.59971C10.0993 9.24256 9.84965 8.94373 9.51535 8.86816C9.57741 8.75165 9.63653 8.63334 9.6926 8.51332C9.88358 8.63163 10.1088 8.69993 10.35 8.69993C11.0403 8.69993 11.6 8.14028 11.6 7.44993C11.6 6.75976 11.0406 6.20024 10.3505 6.19993C10.3853 5.90487 10.4032 5.60464 10.4032 5.30023Z"
                            fill="currentColor"
                            fillRule="evenodd"
                            clipRule="evenodd"
                          ></path>
                        </svg>
                      )}
                      <Text size="1" weight="medium">
                        {upperFirst(value)}
                      </Text>
                    </Flex>
                  </label>
                ))}
              </Grid>

              <Text id="radius-title" as="p" size="2" weight="medium" mt="5">
                Radius
              </Text>

              <Grid columns="5" gap="2" mt="3" role="group" aria-labelledby="radius-title">
                {themePropDefs.radius.values.map((value) => (
                  <Flex key={value} direction="column" align="center">
                    <label className="rt-ThemePanelRadioCard">
                      <input
                        className="rt-ThemePanelRadioCardInput"
                        type="radio"
                        name="radius"
                        id={`theme-panel-radius-${value}`}
                        value={value}
                        checked={radius === value}
                        onChange={(event) => onRadiusChange(event.target.value as typeof radius)}
                      />
                      <Theme asChild radius={value}>
                        <Box
                          m="3"
                          width="32px"
                          height="32px"
                          style={{
                            borderTopLeftRadius: value === 'full' ? '80%' : 'var(--radius-5)',
                            backgroundImage:
                              'linear-gradient(to bottom right, var(--accent-3), var(--accent-4))',
                            borderTop: '2px solid var(--accent-a8)',
                            borderLeft: '2px solid var(--accent-a8)',
                          }}
                        />
                      </Theme>
                    </label>
                    <Box asChild pt="2">
                      <Text asChild size="1" color="gray">
                        <label htmlFor={`theme-panel-radius-${value}`}>{upperFirst(value)}</label>
                      </Text>
                    </Box>
                  </Flex>
                ))}
              </Grid>

              <Text id="scaling-title" as="p" size="2" weight="medium" mt="5">
                Scaling
              </Text>

              <Grid columns="5" gap="2" mt="3" role="group" aria-labelledby="scaling-title">
                {themePropDefs.scaling.values.map((value) => (
                  <label key={value} className="rt-ThemePanelRadioCard">
                    <input
                      className="rt-ThemePanelRadioCardInput"
                      type="radio"
                      name="scaling"
                      value={value}
                      checked={scaling === value}
                      onChange={(event) => onScalingChange(event.target.value as typeof scaling)}
                    />

                    <Flex align="center" justify="center" height="32px">
                      <Theme asChild scaling={value}>
                        <Flex align="center" justify="center">
                          <Text size="1" weight="medium">
                            {upperFirst(value)}
                          </Text>
                        </Flex>
                      </Theme>
                    </Flex>
                  </label>
                ))}
              </Grid>

              <Flex mt="5" align="center" gap="2">
                <Text id="panel-background-title" as="p" size="2" weight="medium">
                  Panel background
                </Text>

                <Popover.Root>
                  <Popover.Trigger>
                    <IconButton size="1" variant="ghost" color="gray">
                      <AccessibleIcon label="Learn more about panel background options">
                        <svg
                          width="15"
                          height="15"
                          viewBox="0 0 15 15"
                          fill="currentColor"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M7.49991 0.876892C3.84222 0.876892 0.877075 3.84204 0.877075 7.49972C0.877075 11.1574 3.84222 14.1226 7.49991 14.1226C11.1576 14.1226 14.1227 11.1574 14.1227 7.49972C14.1227 3.84204 11.1576 0.876892 7.49991 0.876892ZM1.82707 7.49972C1.82707 4.36671 4.36689 1.82689 7.49991 1.82689C10.6329 1.82689 13.1727 4.36671 13.1727 7.49972C13.1727 10.6327 10.6329 13.1726 7.49991 13.1726C4.36689 13.1726 1.82707 10.6327 1.82707 7.49972ZM8.24992 4.49999C8.24992 4.9142 7.91413 5.24999 7.49992 5.24999C7.08571 5.24999 6.74992 4.9142 6.74992 4.49999C6.74992 4.08577 7.08571 3.74999 7.49992 3.74999C7.91413 3.74999 8.24992 4.08577 8.24992 4.49999ZM6.00003 5.99999H6.50003H7.50003C7.77618 5.99999 8.00003 6.22384 8.00003 6.49999V9.99999H8.50003H9.00003V11H8.50003H7.50003H6.50003H6.00003V9.99999H6.50003H7.00003V6.99999H6.50003H6.00003V5.99999Z"
                            fillRule="evenodd"
                            clipRule="evenodd"
                          />
                        </svg>
                      </AccessibleIcon>
                    </IconButton>
                  </Popover.Trigger>

                  <Popover.Content size="1" style={{ maxWidth: 220 }} side="top" align="center">
                    <Text as="p" size="2">
                      Whether Card and Table panels are translucent, showing some of the background
                      behind them.
                    </Text>
                  </Popover.Content>
                </Popover.Root>
              </Flex>

              <Grid
                columns="2"
                gap="2"
                mt="3"
                role="group"
                aria-labelledby="panel-background-title"
              >
                {themePropDefs.panelBackground.values.map((value) => (
                  <label key={value} className="rt-ThemePanelRadioCard">
                    <input
                      className="rt-ThemePanelRadioCardInput"
                      type="radio"
                      name="panelBackground"
                      value={value}
                      checked={panelBackground === value}
                      onChange={(event) =>
                        onPanelBackgroundChange(event.target.value as typeof panelBackground)
                      }
                    />
                    <Flex align="center" justify="center" height="32px" gap="2">
                      {value === 'solid' ? (
                        <svg
                          width="15"
                          height="15"
                          viewBox="0 0 15 15"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                          style={{ margin: '0 -2px' }}
                        >
                          <path
                            d="M0.877075 7.49988C0.877075 3.84219 3.84222 0.877045 7.49991 0.877045C11.1576 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1575 0.877075 7.49988ZM7.49991 1.82704C4.36689 1.82704 1.82708 4.36686 1.82708 7.49988C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49988C13.1727 4.36686 10.6329 1.82704 7.49991 1.82704Z"
                            fill="currentColor"
                            fillRule="evenodd"
                            clipRule="evenodd"
                          ></path>
                        </svg>
                      ) : (
                        <svg
                          width="15"
                          height="15"
                          viewBox="0 0 15 15"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                          style={{ margin: '0 -2px' }}
                        >
                          <path
                            opacity=".05"
                            d="M6.78296 13.376C8.73904 9.95284 8.73904 5.04719 6.78296 1.62405L7.21708 1.37598C9.261 4.95283 9.261 10.0472 7.21708 13.624L6.78296 13.376Z"
                            fill="currentColor"
                            fillRule="evenodd"
                            clipRule="evenodd"
                          ></path>
                          <path
                            opacity=".1"
                            d="M7.28204 13.4775C9.23929 9.99523 9.23929 5.00475 7.28204 1.52248L7.71791 1.2775C9.76067 4.9119 9.76067 10.0881 7.71791 13.7225L7.28204 13.4775Z"
                            fill="currentColor"
                            fillRule="evenodd"
                            clipRule="evenodd"
                          ></path>
                          <path
                            opacity=".15"
                            d="M7.82098 13.5064C9.72502 9.99523 9.72636 5.01411 7.82492 1.50084L8.26465 1.26285C10.2465 4.92466 10.2451 10.085 8.26052 13.7448L7.82098 13.5064Z"
                            fill="currentColor"
                            fillRule="evenodd"
                            clipRule="evenodd"
                          ></path>
                          <path
                            opacity=".2"
                            d="M8.41284 13.429C10.1952 9.92842 10.1957 5.07537 8.41435 1.57402L8.85999 1.34729C10.7139 4.99113 10.7133 10.0128 8.85841 13.6559L8.41284 13.429Z"
                            fill="currentColor"
                            fillRule="evenodd"
                            clipRule="evenodd"
                          ></path>
                          <path
                            opacity=".25"
                            d="M9.02441 13.2956C10.6567 9.8379 10.6586 5.17715 9.03005 1.71656L9.48245 1.50366C11.1745 5.09919 11.1726 9.91629 9.47657 13.5091L9.02441 13.2956Z"
                            fill="currentColor"
                            fillRule="evenodd"
                            clipRule="evenodd"
                          ></path>
                          <path
                            opacity=".3"
                            d="M9.66809 13.0655C11.1097 9.69572 11.1107 5.3121 9.67088 1.94095L10.1307 1.74457C11.6241 5.24121 11.6231 9.76683 10.1278 13.2622L9.66809 13.0655Z"
                            fill="currentColor"
                            fillRule="evenodd"
                            clipRule="evenodd"
                          ></path>
                          <path
                            opacity=".35"
                            d="M10.331 12.7456C11.5551 9.52073 11.5564 5.49103 10.3347 2.26444L10.8024 2.0874C12.0672 5.42815 12.0659 9.58394 10.7985 12.9231L10.331 12.7456Z"
                            fill="currentColor"
                            fillRule="evenodd"
                            clipRule="evenodd"
                          ></path>
                          <path
                            opacity=".4"
                            d="M11.0155 12.2986C11.9938 9.29744 11.9948 5.71296 11.0184 2.71067L11.4939 2.55603C12.503 5.6589 12.502 9.35178 11.4909 12.4535L11.0155 12.2986Z"
                            fill="currentColor"
                            fillRule="evenodd"
                            clipRule="evenodd"
                          ></path>
                          <path
                            opacity=".45"
                            d="M11.7214 11.668C12.4254 9.01303 12.4262 5.99691 11.7237 3.34116L12.2071 3.21329C12.9318 5.95292 12.931 9.05728 12.2047 11.7961L11.7214 11.668Z"
                            fill="currentColor"
                            fillRule="evenodd"
                            clipRule="evenodd"
                          ></path>
                          <path
                            opacity=".5"
                            d="M12.4432 10.752C12.8524 8.63762 12.8523 6.36089 12.4429 4.2466L12.9338 4.15155C13.3553 6.32861 13.3554 8.66985 12.9341 10.847L12.4432 10.752Z"
                            fill="currentColor"
                            fillRule="evenodd"
                            clipRule="evenodd"
                          ></path>
                          <path
                            d="M0.877075 7.49988C0.877075 3.84219 3.84222 0.877045 7.49991 0.877045C11.1576 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1575 0.877075 7.49988ZM7.49991 1.82704C4.36689 1.82704 1.82708 4.36686 1.82708 7.49988C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49988C13.1727 4.36686 10.6329 1.82704 7.49991 1.82704Z"
                            fill="currentColor"
                            fillRule="evenodd"
                            clipRule="evenodd"
                          ></path>
                        </svg>
                      )}
                      <Text size="1" weight="medium">
                        {upperFirst(value)}
                      </Text>
                    </Flex>
                  </label>
                ))}
              </Grid>

              <Button mt="5" style={{ width: '100%' }} onClick={handleCopyThemeConfig}>
                {copyState === 'copied' ? 'Copied' : 'Copy Theme'}
              </Button>
            </Box>
          </ScrollArea>
        </Flex>
      </Theme>
    );
  }
);
ThemePanelImpl.displayName = 'ThemePanelImpl';

// https://github.com/pacocoursey/next-themes/blob/main/packages/next-themes/src/index.tsx#L285
function disableAnimation() {
  const css = document.createElement('style');
  css.appendChild(
    document.createTextNode(
      `*,*::before,*::after{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}`
    )
  );
  document.head.appendChild(css);

  return () => {
    // Force restyle
    (() => window.getComputedStyle(document.body))();

    // Wait for next tick before removing
    setTimeout(() => {
      document.head.removeChild(css);
    }, 1);
  };
}

function upperFirst(string: string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

function updateRootAppearanceClass(appearance: 'light' | 'dark') {
  const root = document.documentElement;
  const hasLightTheme = root.classList.contains('light-theme');
  const hasDarkTheme = root.classList.contains('dark-theme');
  const hasLight = root.classList.contains('light');
  const hasDark = root.classList.contains('dark');

  if (hasLightTheme || hasDarkTheme) {
    root.classList.remove('light-theme', 'dark-theme');
    root.style.colorScheme = appearance;
    root.classList.add(`${appearance}-theme`);
  }

  if (hasLight || hasDark) {
    root.classList.remove('light', 'dark');
    root.style.colorScheme = appearance;
    root.classList.add(appearance);
  }

  if (!hasLightTheme && !hasDarkTheme && !hasLight && !hasDark) {
    root.style.colorScheme = appearance;
    root.classList.add(appearance);
  }
}

export { ThemePanel };
export type { ThemePanelProps };


================================================
File: packages/radix-ui-themes/src/components/theme.props.tsx
================================================
import { asChildPropDef } from '../props/as-child.prop.js';
import { accentColors, grayColors } from '../props/color.prop.js';
import { radii } from '../props/radius.prop.js';

import type { GetPropDefTypes, PropDef } from '../props/prop-def.js';

const appearances = ['inherit', 'light', 'dark'] as const;
const panelBackgrounds = ['solid', 'translucent'] as const;
const scalings = ['90%', '95%', '100%', '105%', '110%'] as const;

const themePropDefs = {
  ...asChildPropDef,
  /**
   * Whether to apply background color to the Theme element.
   *
   * Defaults to true for the root Theme and for Theme elements that
   * have an explicit light or dark appearance prop.
   */
  hasBackground: { type: 'boolean', default: true },
  /**
   * Sets the color scheme of the theme, typcially referred to as light and dark mode.
   *
   * @link
   * https://www.radix-ui.com/themes/docs/theme/dark-mode
   */
  appearance: { type: 'enum', values: appearances, default: 'inherit' },
  /**
   * Selects one of the accent color options to use in the Theme.
   *
   * @link
   * https://www.radix-ui.com/themes/docs/theme/color
   */
  accentColor: { type: 'enum', values: accentColors, default: 'indigo' },
  /**
   * Selects one of the gray color options to use in the Theme.
   *
   * @link
   * https://www.radix-ui.com/themes/docs/theme/color
   */
  grayColor: { type: 'enum', values: grayColors, default: 'auto' },
  /**
   * Controls whether to use a solid or translucent background color on panelled
   * elements such as Card or Table is solid or translucent.
   *
   * @link
   * https://www.radix-ui.com/themes/docs/theme/visual-style
   */
  panelBackground: { type: 'enum', values: panelBackgrounds, default: 'translucent' },
  /**
   * Sets the default radius of the components.
   *
   * @link
   * https://www.radix-ui.com/themes/docs/theme/visual-style
   */
  radius: { type: 'enum', values: radii, default: 'medium' },
  /**
   * Sets a scaling multiplier for values like spacing, font sizes, line heights, etc. are scaled.
   *
   * @link
   * https://www.radix-ui.com/themes/docs/theme/layout
   */
  scaling: { type: 'enum', values: scalings, default: '100%' },
} satisfies {
  hasBackground: PropDef<boolean>;
  appearance: PropDef<(typeof appearances)[number]>;
  accentColor: PropDef<(typeof accentColors)[number]>;
  grayColor: PropDef<(typeof grayColors)[number]>;
  panelBackground: PropDef<(typeof panelBackgrounds)[number]>;
  radius: PropDef<(typeof radii)[number]>;
  scaling: PropDef<(typeof scalings)[number]>;
};

type ThemeOwnProps = GetPropDefTypes<typeof themePropDefs & typeof asChildPropDef>;

export { themePropDefs };
export type { ThemeOwnProps };


================================================
File: packages/radix-ui-themes/src/components/theme.tsx
================================================
'use client';

import * as React from 'react';
import classNames from 'classnames';
import { Direction, Slot, Tooltip as TooltipPrimitive } from 'radix-ui';

import { getMatchingGrayColor } from '../helpers/get-matching-gray-color.js';
import { themePropDefs } from './theme.props.js';

import type { ThemeOwnProps } from './theme.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';

const noop = () => {};

type ThemeAppearance = (typeof themePropDefs.appearance.values)[number];
type ThemeAccentColor = (typeof themePropDefs.accentColor.values)[number];
type ThemeGrayColor = (typeof themePropDefs.grayColor.values)[number];
type ThemePanelBackground = (typeof themePropDefs.panelBackground.values)[number];
type ThemeRadius = (typeof themePropDefs.radius.values)[number];
type ThemeScaling = (typeof themePropDefs.scaling.values)[number];

interface ThemeChangeHandlers {
  onAppearanceChange: (appearance: ThemeAppearance) => void;
  onAccentColorChange: (accentColor: ThemeAccentColor) => void;
  onGrayColorChange: (grayColor: ThemeGrayColor) => void;
  onPanelBackgroundChange: (panelBackground: ThemePanelBackground) => void;
  onRadiusChange: (radius: ThemeRadius) => void;
  onScalingChange: (scaling: ThemeScaling) => void;
}

interface ThemeContextValue extends ThemeChangeHandlers {
  appearance: ThemeAppearance;
  accentColor: ThemeAccentColor;
  grayColor: ThemeGrayColor;
  resolvedGrayColor: ThemeGrayColor;
  panelBackground: ThemePanelBackground;
  radius: ThemeRadius;
  scaling: ThemeScaling;
}
const ThemeContext = React.createContext<ThemeContextValue | undefined>(undefined);

function useThemeContext() {
  const context = React.useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('`useThemeContext` must be used within a `Theme`');
  }
  return context;
}

interface ThemeProps extends ThemeImplPublicProps {}
const Theme = React.forwardRef<ThemeImplElement, ThemeProps>((props, forwardedRef) => {
  const context = React.useContext(ThemeContext);
  const isRoot = context === undefined;
  if (isRoot) {
    return (
      <TooltipPrimitive.Provider delayDuration={200}>
        <Direction.Provider dir="ltr">
          <ThemeRoot {...props} ref={forwardedRef} />
        </Direction.Provider>
      </TooltipPrimitive.Provider>
    );
  }
  return <ThemeImpl {...props} ref={forwardedRef} />;
});
Theme.displayName = 'Theme';

const ThemeRoot = React.forwardRef<ThemeImplElement, ThemeImplPublicProps>(
  (props, forwardedRef) => {
    const {
      appearance: appearanceProp = themePropDefs.appearance.default,
      accentColor: accentColorProp = themePropDefs.accentColor.default,
      grayColor: grayColorProp = themePropDefs.grayColor.default,
      panelBackground: panelBackgroundProp = themePropDefs.panelBackground.default,
      radius: radiusProp = themePropDefs.radius.default,
      scaling: scalingProp = themePropDefs.scaling.default,
      hasBackground = themePropDefs.hasBackground.default,
      ...rootProps
    } = props;
    const [appearance, setAppearance] = React.useState(appearanceProp);
    React.useEffect(() => setAppearance(appearanceProp), [appearanceProp]);

    const [accentColor, setAccentColor] = React.useState(accentColorProp);
    React.useEffect(() => setAccentColor(accentColorProp), [accentColorProp]);

    const [grayColor, setGrayColor] = React.useState(grayColorProp);
    React.useEffect(() => setGrayColor(grayColorProp), [grayColorProp]);

    const [panelBackground, setPanelBackground] = React.useState(panelBackgroundProp);
    React.useEffect(() => setPanelBackground(panelBackgroundProp), [panelBackgroundProp]);

    const [radius, setRadius] = React.useState(radiusProp);
    React.useEffect(() => setRadius(radiusProp), [radiusProp]);

    const [scaling, setScaling] = React.useState(scalingProp);
    React.useEffect(() => setScaling(scalingProp), [scalingProp]);

    return (
      <ThemeImpl
        {...rootProps}
        ref={forwardedRef}
        isRoot
        hasBackground={hasBackground}
        //
        appearance={appearance}
        accentColor={accentColor}
        grayColor={grayColor}
        panelBackground={panelBackground}
        radius={radius}
        scaling={scaling}
        //
        onAppearanceChange={setAppearance}
        onAccentColorChange={setAccentColor}
        onGrayColorChange={setGrayColor}
        onPanelBackgroundChange={setPanelBackground}
        onRadiusChange={setRadius}
        onScalingChange={setScaling}
      />
    );
  }
);
ThemeRoot.displayName = 'ThemeRoot';

type ThemeImplElement = React.ElementRef<'div'>;
interface ThemeImplProps extends ThemeImplPublicProps, ThemeImplPrivateProps {}
interface ThemeImplPublicProps
  extends ComponentPropsWithout<'div', RemovedProps | 'dir'>,
    ThemeOwnProps {}
interface ThemeImplPrivateProps extends Partial<ThemeChangeHandlers> {
  isRoot?: boolean;
}
const ThemeImpl = React.forwardRef<ThemeImplElement, ThemeImplProps>((props, forwardedRef) => {
  const context = React.useContext(ThemeContext);
  const {
    asChild,
    isRoot,
    hasBackground: hasBackgroundProp,
    //
    appearance = context?.appearance ?? themePropDefs.appearance.default,
    accentColor = context?.accentColor ?? themePropDefs.accentColor.default,
    grayColor = context?.resolvedGrayColor ?? themePropDefs.grayColor.default,
    panelBackground = context?.panelBackground ?? themePropDefs.panelBackground.default,
    radius = context?.radius ?? themePropDefs.radius.default,
    scaling = context?.scaling ?? themePropDefs.scaling.default,
    //
    onAppearanceChange = noop,
    onAccentColorChange = noop,
    onGrayColorChange = noop,
    onPanelBackgroundChange = noop,
    onRadiusChange = noop,
    onScalingChange = noop,
    //
    ...themeProps
  } = props;
  const Comp = asChild ? Slot.Root : 'div';
  const resolvedGrayColor = grayColor === 'auto' ? getMatchingGrayColor(accentColor) : grayColor;
  const isExplicitAppearance = props.appearance === 'light' || props.appearance === 'dark';
  const hasBackground =
    hasBackgroundProp === undefined ? isRoot || isExplicitAppearance : hasBackgroundProp;
  return (
    <ThemeContext.Provider
      value={React.useMemo(
        () => ({
          appearance,
          accentColor,
          grayColor,
          resolvedGrayColor,
          panelBackground,
          radius,
          scaling,
          //
          onAppearanceChange,
          onAccentColorChange,
          onGrayColorChange,
          onPanelBackgroundChange,
          onRadiusChange,
          onScalingChange,
        }),
        [
          appearance,
          accentColor,
          grayColor,
          resolvedGrayColor,
          panelBackground,
          radius,
          scaling,
          //
          onAppearanceChange,
          onAccentColorChange,
          onGrayColorChange,
          onPanelBackgroundChange,
          onRadiusChange,
          onScalingChange,
        ]
      )}
    >
      <Comp
        data-is-root-theme={isRoot ? 'true' : 'false'}
        data-accent-color={accentColor}
        data-gray-color={resolvedGrayColor}
        // for nested `Theme` background
        data-has-background={hasBackground ? 'true' : 'false'}
        data-panel-background={panelBackground}
        data-radius={radius}
        data-scaling={scaling}
        ref={forwardedRef}
        {...themeProps}
        className={classNames(
          'radix-themes',
          {
            light: appearance === 'light',
            dark: appearance === 'dark',
          },
          themeProps.className
        )}
      />
    </ThemeContext.Provider>
  );
});
ThemeImpl.displayName = 'ThemeImpl';

export { Theme, ThemeContext, useThemeContext };
export type { ThemeProps };


================================================
File: packages/radix-ui-themes/src/components/tooltip.css
================================================
.rt-TooltipContent {
  box-sizing: border-box;
  padding: var(--space-1) var(--space-2);
  background-color: var(--gray-12);
  border-radius: var(--radius-2);

  transform-origin: var(--radix-tooltip-content-transform-origin);

  animation-duration: 140ms;
  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);

  @media (prefers-reduced-motion: no-preference) {
    &:where([data-state='delayed-open']) {
      &:where([data-side='top']) {
        animation-name: rt-slide-from-top, rt-fade-in;
      }
      &:where([data-side='bottom']) {
        animation-name: rt-slide-from-bottom, rt-fade-in;
      }
      &:where([data-side='left']) {
        animation-name: rt-slide-from-left, rt-fade-in;
      }
      &:where([data-side='right']) {
        animation-name: rt-slide-from-right, rt-fade-in;
      }
    }
  }
}

.rt-TooltipText {
  color: var(--gray-1);
  user-select: none;
  cursor: default;
}

.rt-TooltipArrow {
  fill: var(--gray-12);
}


================================================
File: packages/radix-ui-themes/src/components/tooltip.props.tsx
================================================
import { widthPropDefs } from '../props/width.props.js';

import type { PropDef, GetPropDefTypes } from '../props/prop-def.js';

const tooltipPropDefs = {
  content: { type: 'ReactNode', required: true },
  width: widthPropDefs.width,
  minWidth: widthPropDefs.minWidth,
  maxWidth: { ...widthPropDefs.maxWidth, default: '360px' },
} satisfies {
  width: PropDef<string>;
  minWidth: PropDef<string>;
  maxWidth: PropDef<string>;
  content: PropDef<React.ReactNode>;
};

type TooltipOwnProps = GetPropDefTypes<typeof tooltipPropDefs & typeof widthPropDefs>;

export { tooltipPropDefs };
export type { TooltipOwnProps };


================================================
File: packages/radix-ui-themes/src/components/tooltip.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Tooltip as TooltipPrimitive } from 'radix-ui';

import { Text } from './text.js';
import { Theme } from './theme.js';
import { extractProps } from '../helpers/extract-props.js';
import { tooltipPropDefs } from './tooltip.props.js';

import type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';
import type { GetPropDefTypes } from '../props/prop-def.js';

type TooltipElement = React.ElementRef<typeof TooltipPrimitive.Content>;
type TooltipOwnProps = GetPropDefTypes<typeof tooltipPropDefs>;
interface TooltipProps
  extends React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Root>,
    ComponentPropsWithout<typeof TooltipPrimitive.Content, RemovedProps | 'content'>,
    TooltipOwnProps {
  content: React.ReactNode;
  container?: React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Portal>['container'];
}
const Tooltip = React.forwardRef<TooltipElement, TooltipProps>((props, forwardedRef) => {
  const {
    children,
    className,
    open,
    defaultOpen,
    onOpenChange,
    delayDuration,
    disableHoverableContent,
    content,
    container,
    forceMount,
    ...tooltipContentProps
  } = extractProps(props, tooltipPropDefs);
  const rootProps = { open, defaultOpen, onOpenChange, delayDuration, disableHoverableContent };
  return (
    <TooltipPrimitive.Root {...rootProps}>
      <TooltipPrimitive.Trigger asChild>{children}</TooltipPrimitive.Trigger>
      <TooltipPrimitive.Portal container={container} forceMount={forceMount}>
        <Theme asChild>
          <TooltipPrimitive.Content
            sideOffset={4}
            collisionPadding={10}
            {...tooltipContentProps}
            asChild={false}
            ref={forwardedRef}
            className={classNames('rt-TooltipContent', className)}
          >
            <Text as="p" className="rt-TooltipText" size="1">
              {content}
            </Text>
            <TooltipPrimitive.Arrow className="rt-TooltipArrow" />
          </TooltipPrimitive.Content>
        </Theme>
      </TooltipPrimitive.Portal>
    </TooltipPrimitive.Root>
  );
});
Tooltip.displayName = 'Tooltip';

export { Tooltip };
export type { TooltipProps };


================================================
File: packages/radix-ui-themes/src/components/visually-hidden.tsx
================================================
import { VisuallyHidden as VisuallyHiddenPrimitive } from 'radix-ui';
export const VisuallyHidden = VisuallyHiddenPrimitive.Root;
export const Root = VisuallyHiddenPrimitive.Root;
export type VisuallyHiddenProps = VisuallyHiddenPrimitive.VisuallyHiddenProps;


================================================
File: packages/radix-ui-themes/src/components/_internal/base-button.css
================================================
.rt-BaseButton {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  user-select: none;
  vertical-align: top;

  font-family: var(--default-font-family);
  font-style: normal;
  text-align: center;

  &:where([data-disabled]) {
    --spinner-opacity: 1;
  }

  &:where(.rt-loading) {
    position: relative;
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

.rt-BaseButton {
  &:where(:not(.rt-variant-ghost)) {
    height: var(--base-button-height);
  }
  &:where(.rt-variant-ghost) {
    box-sizing: content-box;

    /* Make sure that the height is not stretched in a Flex/Grid layout */
    height: fit-content;
  }
}

@breakpoints {
  .rt-BaseButton {
    &:where(.rt-r-size-1) {
      --base-button-classic-active-padding-top: 1px;
      --base-button-height: var(--space-5);
      border-radius: max(var(--radius-1), var(--radius-full));
    }
    &:where(.rt-r-size-2) {
      --base-button-classic-active-padding-top: 2px;
      --base-button-height: var(--space-6);
      border-radius: max(var(--radius-2), var(--radius-full));
    }
    &:where(.rt-r-size-3) {
      --base-button-classic-active-padding-top: 2px;
      --base-button-height: var(--space-7);
      border-radius: max(var(--radius-3), var(--radius-full));
    }
    &:where(.rt-r-size-4) {
      --base-button-classic-active-padding-top: 2px;
      --base-button-height: var(--space-8);
      border-radius: max(var(--radius-4), var(--radius-full));
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

/* classic */

/* prettier-ignore */
:where(.radix-themes) {
  --base-button-classic-after-inset: 2px;
  --base-button-classic-box-shadow-top:
    inset 0 0 0 1px var(--gray-a4),
    inset 0 -2px 1px var(--gray-a3);
  --base-button-classic-box-shadow-bottom:
    inset 0 4px 2px -2px var(--white-a9),
    inset 0 2px 1px -1px var(--white-a9);
  --base-button-classic-disabled-box-shadow:
    var(--base-button-classic-box-shadow-top),
    var(--base-button-classic-box-shadow-bottom);
  --base-button-classic-active-filter: brightness(0.92) saturate(1.1);
  --base-button-classic-high-contrast-hover-filter: contrast(0.88) saturate(1.1) brightness(1.1);
  --base-button-classic-high-contrast-active-filter: contrast(0.82) saturate(1.2) brightness(1.16);
}
/* prettier-ignore */
:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  --base-button-classic-after-inset: 1px;
  --base-button-classic-box-shadow-top:
    inset 0 0 0 1px var(--white-a2),
    inset 0 4px 2px -2px var(--white-a3),
    inset 0 1px 1px var(--white-a6),
    inset 0 -1px 1px var(--black-a6);
  --base-button-classic-box-shadow-bottom: 0 0 transparent;
  --base-button-classic-disabled-box-shadow:
    inset 0 0 0 1px var(--gray-a5),
    inset 0 4px 2px -2px var(--gray-a2),
    inset 0 1px 1px var(--gray-a5),
    inset 0 -1px 1px var(--black-a3),
    inset 0 0 0 1px var(--gray-a2);
  --base-button-classic-active-filter: brightness(1.08);
  --base-button-classic-high-contrast-hover-filter: contrast(0.88) saturate(1.3) brightness(1.14);
  --base-button-classic-high-contrast-active-filter: brightness(0.95) saturate(1.2);
}

.rt-BaseButton:where(.rt-variant-classic) {
  background-color: var(--accent-9);
  color: var(--accent-contrast);
  position: relative;
  z-index: 0;

  /* prettier-ignore */
  background-image:
    linear-gradient(to bottom, transparent 50%, var(--gray-a4)),
    linear-gradient(to bottom, transparent 50%, var(--accent-9) 80%);

  /* prettier-ignore */
  box-shadow:
    var(--base-button-classic-box-shadow-top),
    inset 0 0 0 1px var(--accent-9),
    var(--base-button-classic-box-shadow-bottom);

  &::after {
    content: '';
    position: absolute;
    border-radius: inherit;
    pointer-events: none;
    inset: 0;
    z-index: -1;
    border: var(--base-button-classic-after-inset) solid transparent;
    background-clip: content-box;
    background-color: inherit;
    background-image: linear-gradient(var(--black-a1), transparent, var(--white-a2));
    box-shadow: inset 0 2px 3px -1px var(--white-a4);
  }
  &:where(.rt-high-contrast) {
    background-color: var(--accent-12);
    color: var(--gray-1);

    /* prettier-ignore */
    background-image:
      linear-gradient(to bottom, transparent 50%, var(--gray-a4)),
      linear-gradient(to bottom, transparent 50%, var(--accent-12) 80%);

    /* prettier-ignore */
    box-shadow:
      var(--base-button-classic-box-shadow-top),
      inset 0 0 0 1px var(--accent-12),
      var(--base-button-classic-box-shadow-bottom);

    &::after {
      background-image: linear-gradient(var(--black-a3), transparent, var(--white-a2));
    }
  }
  /* Better -webkit-tap-highlight-color */
  @media (pointer: coarse) {
    &:where(:active:not([data-state='open'])) {
      outline: 0.5em solid var(--accent-a4);
      outline-offset: 0;
    }
  }
  &:where(:focus-visible) {
    outline: 2px solid var(--focus-8);
    outline-offset: 2px;
  }
  @media (hover: hover) {
    &:where(:hover) {
      &::after {
        background-color: var(--accent-10);
        background-image: linear-gradient(var(--black-a2) -15%, transparent, var(--white-a3));
      }
      &:where(.rt-high-contrast) {
        filter: var(--base-button-classic-high-contrast-hover-filter);
        &::after {
          background-color: var(--accent-12);
          background-image: linear-gradient(var(--black-a5), transparent, var(--white-a2));
        }
      }
    }
  }
  &:where([data-state='open']) {
    &::after {
      background-color: var(--accent-10);
      background-image: linear-gradient(var(--black-a2) -15%, transparent, var(--white-a3));
    }
    &:where(.rt-high-contrast) {
      filter: var(--base-button-classic-high-contrast-hover-filter);
      &::after {
        background-color: var(--accent-12);
        background-image: linear-gradient(var(--black-a5), transparent, var(--white-a2));
      }
    }
  }
  &:where(:active:not([data-state='open'], [data-disabled])) {
    background-color: var(--accent-9);
    background-image: linear-gradient(var(--black-a1), transparent);
    padding-top: var(--base-button-classic-active-padding-top);

    /* prettier-ignore */
    box-shadow:
      inset 0 4px 2px -2px var(--gray-a4),
      inset 0 1px 1px var(--gray-a7),
      inset 0 0 0 1px var(--gray-a5),
      inset 0 0 0 1px var(--accent-9),
      inset 0 3px 2px var(--gray-a3),
      inset 0 0 0 1px var(--white-a7),
      inset 0 -2px 1px var(--white-a5);

    &::after {
      box-shadow: none;
      background-color: inherit;
      background-image: linear-gradient(var(--black-a2), transparent, var(--white-a3));
    }

    &:where(.rt-high-contrast) {
      background-color: var(--accent-12);
      filter: var(--base-button-classic-high-contrast-active-filter);

      /* prettier-ignore */
      box-shadow:
        var(--base-button__classic-active__shadow-front-layer),
        inset 0 0 0 1px var(--accent-12),
        var(--base-button__classic-active__shadow-bottom-layer);

      &::after {
        background-image: linear-gradient(var(--black-a5), transparent, var(--white-a3));
      }
    }
  }
  &:where([data-disabled]) {
    color: var(--gray-a8);
    background-color: var(--gray-2);
    background-image: none;
    box-shadow: var(--base-button-classic-disabled-box-shadow);
    outline: none;
    filter: none;

    &::after {
      box-shadow: none;
      background-color: var(--gray-a2);
      background-image: linear-gradient(var(--black-a1) -20%, transparent, var(--white-a1));
    }
  }
}

/* solid */

:where(.radix-themes) {
  --base-button-solid-active-filter: brightness(0.92) saturate(1.1);
  --base-button-solid-high-contrast-hover-filter: contrast(0.88) saturate(1.1) brightness(1.1);
  --base-button-solid-high-contrast-active-filter: contrast(0.82) saturate(1.2) brightness(1.16);
}
:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  --base-button-solid-active-filter: brightness(1.08);
  --base-button-solid-high-contrast-hover-filter: contrast(0.88) saturate(1.3) brightness(1.18);
  --base-button-solid-high-contrast-active-filter: brightness(0.95) saturate(1.2);
}

.rt-BaseButton:where(.rt-variant-solid) {
  background-color: var(--accent-9);
  color: var(--accent-contrast);

  @media (hover: hover) {
    &:where(:hover) {
      background-color: var(--accent-10);
    }
  }
  &:where([data-state='open']) {
    background-color: var(--accent-10);
  }
  &:where(:active:not([data-state='open'])) {
    background-color: var(--accent-10);
    filter: var(--base-button-solid-active-filter);
  }
  /* Better -webkit-tap-highlight-color */
  @media (pointer: coarse) {
    &:where(:active:not([data-state='open'])) {
      outline: 0.5em solid var(--accent-a4);
      outline-offset: 0;
    }
  }
  &:where(:focus-visible) {
    outline: 2px solid var(--focus-8);
    outline-offset: 2px;
  }
  &:where(.rt-high-contrast) {
    background-color: var(--accent-12);
    color: var(--gray-1);

    @media (hover: hover) {
      &:where(:hover) {
        background-color: var(--accent-12);
        filter: var(--base-button-solid-high-contrast-hover-filter);
      }
    }
    &:where([data-state='open']) {
      background-color: var(--accent-12);
      filter: var(--base-button-solid-high-contrast-hover-filter);
    }
    &:where(:active:not([data-state='open'])) {
      background-color: var(--accent-12);
      filter: var(--base-button-solid-high-contrast-active-filter);
    }
  }
  &:where([data-disabled]) {
    color: var(--gray-a8);
    background-color: var(--gray-a3);
    outline: none;
    filter: none;
  }
}

/* soft / ghost */

.rt-BaseButton:where(.rt-variant-soft, .rt-variant-ghost) {
  color: var(--accent-a11);

  &:where(.rt-high-contrast) {
    color: var(--accent-12);
  }
  &:where([data-disabled]) {
    color: var(--gray-a8);
    background-color: var(--gray-a3);
  }
}

.rt-BaseButton:where(.rt-variant-soft) {
  background-color: var(--accent-a3);

  &:where(:focus-visible) {
    outline: 2px solid var(--accent-8);
    outline-offset: -1px;
  }
  @media (hover: hover) {
    &:where(:hover) {
      background-color: var(--accent-a4);
    }
  }
  &:where([data-state='open']) {
    background-color: var(--accent-a4);
  }
  &:where(:active:not([data-state='open'])) {
    background-color: var(--accent-a5);
  }
  &:where([data-disabled]) {
    color: var(--gray-a8);
    background-color: var(--gray-a3);
  }
}

.rt-BaseButton:where(.rt-variant-ghost) {
  @media (hover: hover) {
    &:where(:hover) {
      background-color: var(--accent-a3);
    }
  }
  &:where(:focus-visible) {
    outline: 2px solid var(--focus-8);
    outline-offset: -1px;
  }
  &:where([data-state='open']) {
    background-color: var(--accent-a3);
  }
  &:where(:active:not([data-state='open'])) {
    background-color: var(--accent-a4);
  }
  &:where([data-disabled]) {
    color: var(--gray-a8);
    background-color: transparent;
  }
}

/* outline */

.rt-BaseButton:where(.rt-variant-outline) {
  box-shadow: inset 0 0 0 1px var(--accent-a8);
  color: var(--accent-a11);

  @media (hover: hover) {
    &:where(:hover) {
      background-color: var(--accent-a2);
    }
  }
  &:where([data-state='open']) {
    background-color: var(--accent-a2);
  }
  &:where(:active:not([data-state='open'])) {
    background-color: var(--accent-a3);
  }
  &:where(:focus-visible) {
    outline: 2px solid var(--focus-8);
    outline-offset: -1px;
  }
  &:where(.rt-high-contrast) {
    box-shadow: inset 0 0 0 1px var(--accent-a7), inset 0 0 0 1px var(--gray-a11);
    color: var(--accent-12);
  }
  &:where([data-disabled]) {
    color: var(--gray-a8);
    box-shadow: inset 0 0 0 1px var(--gray-a7);
    background-color: transparent;
  }
}

/* surface */

.rt-BaseButton:where(.rt-variant-surface) {
  background-color: var(--accent-surface);
  box-shadow: inset 0 0 0 1px var(--accent-a7);
  color: var(--accent-a11);

  @media (hover: hover) {
    &:where(:hover) {
      box-shadow: inset 0 0 0 1px var(--accent-a8);
    }
  }
  &:where([data-state='open']) {
    box-shadow: inset 0 0 0 1px var(--accent-a8);
  }
  &:where(:active:not([data-state='open'])) {
    background-color: var(--accent-a3);
    box-shadow: inset 0 0 0 1px var(--accent-a8);
  }
  &:where(:focus-visible) {
    outline: 2px solid var(--focus-8);
    outline-offset: -1px;
  }
  &:where(.rt-high-contrast) {
    color: var(--accent-12);
  }
  &:where([data-disabled]) {
    color: var(--gray-a8);
    box-shadow: inset 0 0 0 1px var(--gray-a6);
    background-color: var(--gray-a2);
  }
}


================================================
File: packages/radix-ui-themes/src/components/_internal/base-button.props.ts
================================================
import { asChildPropDef } from '../../props/as-child.prop.js';
import { accentColorPropDef } from '../../props/color.prop.js';
import { highContrastPropDef } from '../../props/high-contrast.prop.js';
import { radiusPropDef } from '../../props/radius.prop.js';

import type { PropDef } from '../../props/prop-def.js';

const sizes = ['1', '2', '3', '4'] as const;
const variants = ['classic', 'solid', 'soft', 'surface', 'outline', 'ghost'] as const;

const baseButtonPropDefs = {
  ...asChildPropDef,
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '2', responsive: true },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'solid' },
  ...accentColorPropDef,
  ...highContrastPropDef,
  ...radiusPropDef,
  loading: { type: 'boolean', className: 'rt-loading', default: false },
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
  loading: PropDef<boolean>;
};

export { baseButtonPropDefs };


================================================
File: packages/radix-ui-themes/src/components/_internal/base-button.tsx
================================================
import * as React from 'react';
import classNames from 'classnames';
import { Slot } from 'radix-ui';

import { baseButtonPropDefs } from './base-button.props.js';
import { Flex } from '../flex.js';
import { Spinner } from '../spinner.js';
import { VisuallyHidden } from '../visually-hidden.js';
import { extractProps } from '../../helpers/extract-props.js';
import { mapResponsiveProp, mapButtonSizeToSpinnerSize } from '../../helpers/map-prop-values.js';
import { marginPropDefs } from '../../props/margin.props.js';

import type { MarginProps } from '../../props/margin.props.js';
import type { ComponentPropsWithout, RemovedProps } from '../../helpers/component-props.js';
import type { GetPropDefTypes } from '../../props/prop-def.js';

type BaseButtonElement = React.ElementRef<'button'>;
type BaseButtonOwnProps = GetPropDefTypes<typeof baseButtonPropDefs>;
interface BaseButtonProps
  extends ComponentPropsWithout<'button', RemovedProps>,
    MarginProps,
    BaseButtonOwnProps {}
const BaseButton = React.forwardRef<BaseButtonElement, BaseButtonProps>((props, forwardedRef) => {
  const { size = baseButtonPropDefs.size.default } = props;
  const {
    className,
    children,
    asChild,
    color,
    radius,
    disabled = props.loading,
    ...baseButtonProps
  } = extractProps(props, baseButtonPropDefs, marginPropDefs);
  const Comp = asChild ? Slot.Root : 'button';
  return (
    <Comp
      // The `data-disabled` attribute enables correct styles when doing `<Button asChild disabled>`
      data-disabled={disabled || undefined}
      data-accent-color={color}
      data-radius={radius}
      {...baseButtonProps}
      ref={forwardedRef}
      className={classNames('rt-reset', 'rt-BaseButton', className)}
      disabled={disabled}
    >
      {props.loading ? (
        <>
          {/**
           * We need a wrapper to set `visibility: hidden` to hide the button content whilst we show the `Spinner`.
           * The button is a flex container with a `gap`, so we use `display: contents` to ensure the correct flex layout.
           *
           * However, `display: contents` removes the content from the accessibility tree in some browsers,
           * so we force remove it with `aria-hidden` and re-add it in the tree with `VisuallyHidden`
           */}
          <span style={{ display: 'contents', visibility: 'hidden' }} aria-hidden>
            {children}
          </span>
          <VisuallyHidden>{children}</VisuallyHidden>

          <Flex asChild align="center" justify="center" position="absolute" inset="0">
            <span>
              <Spinner size={mapResponsiveProp(size, mapButtonSizeToSpinnerSize)} />
            </span>
          </Flex>
        </>
      ) : (
        children
      )}
    </Comp>
  );
});
BaseButton.displayName = 'BaseButton';

export { BaseButton };
export type { BaseButtonProps };


================================================
File: packages/radix-ui-themes/src/components/_internal/base-card.css
================================================
.rt-BaseCard {
  display: block;
  position: relative;
  overflow: hidden;
  border-radius: var(--base-card-border-radius);

  /* Don't inherit typographic properties */
  font-family: var(--default-font-family);
  font-weight: var(--font-weight-normal);
  font-style: normal;
  text-align: start;

  --inset-border-width: var(--base-card-border-width);
  --inset-border-radius: var(--base-card-border-radius);
  padding-top: var(--base-card-padding-top);
  padding-right: var(--base-card-padding-right);
  padding-bottom: var(--base-card-padding-bottom);
  padding-left: var(--base-card-padding-left);
  box-sizing: border-box;

  /*
   * Some layout acrobatics with `var(--base-card-border-width)` because we want:
   * 1. <Card> with fixed height to clip overflowing content.
   * 2. <Inset> that clips to card’s border-box or padding-box depending on the `clip` value.
   *
   * To have both (1) and (2), we clip the content at the outer edge of `.rt-BaseCard` border, and use
   * a ::before pseudo-element for the background color, which is smaller by the border width on each side.
   */
  --inset-padding-top: calc(var(--base-card-padding-top) - var(--base-card-border-width));
  --inset-padding-right: calc(var(--base-card-padding-right) - var(--base-card-border-width));
  --inset-padding-bottom: calc(var(--base-card-padding-bottom) - var(--base-card-border-width));
  --inset-padding-left: calc(var(--base-card-padding-left) - var(--base-card-border-width));

  /*
   * ::before is used for the background color.
   * ::after is used for the inner border that goes on top the children.
   */
  &::before,
  &::after {
    content: '';
    position: absolute;
    pointer-events: none;
    transition: inherit;
    border-radius: calc(var(--base-card-border-radius) - var(--base-card-border-width));
    inset: var(--base-card-border-width);
  }

  /*
   * Background color:
   * 1. "z-index: -1" so that the background goes below the children
   * 2. "contain: paint" creates a new stacking context so that ::before doesn’t go below the card’s sibling elements
   */
  &::before {
    z-index: -1;
  }
  & {
    contain: paint;
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*          Shadows / Surface          */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

:where(.radix-themes) {
  --base-card-surface-box-shadow: 0 0 0 1px var(--gray-a5);
  --base-card-surface-hover-box-shadow: 0 0 0 1px var(--gray-a7);
  --base-card-surface-active-box-shadow: 0 0 0 1px var(--gray-a6);

  @supports (color: color-mix(in oklab, white, black)) {
    --base-card-surface-box-shadow: 0 0 0 1px color-mix(in oklab, var(--gray-a5), var(--gray-5) 25%);
    --base-card-surface-hover-box-shadow: 0 0 0 1px color-mix(in oklab, var(--gray-a7), var(--gray-7) 25%);
    --base-card-surface-active-box-shadow: 0 0 0 1px color-mix(in oklab, var(--gray-a6), var(--gray-6) 25%);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*          Shadows / Classic          */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

/*
 * 1. Outer shadow has to be the same as inner shadow, but with a 1px smaller spread value.
 * 2. Keep the initial state in sync with var(--shadow-2) in `shadow.css`.
 * 3. Make sure that between all states, the length of the shadow list matches:
 *    https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow#interpolation
 */

/* prettier-ignore */
:where(.radix-themes) {
  --base-card-classic-box-shadow-inner:
    0 0 0 1px var(--base-card-classic-border-color),
    0 0 0 1px var(--color-transparent),
    0 0 0 0.5px var(--black-a1),
    0 1px 1px 0 var(--gray-a2),
    0 2px 1px -1px var(--black-a1),
    0 1px 3px 0 var(--black-a1);
  --base-card-classic-box-shadow-outer:
    0 0 0 0 var(--base-card-classic-border-color),
    0 0 0 0 var(--color-transparent),
    0 0 0 0 var(--black-a1),
    0 1px 1px -1px var(--gray-a2),
    0 2px 1px -2px var(--black-a1),
    0 1px 3px -1px var(--black-a1);

  --base-card-classic-hover-box-shadow-inner:
    0 0 0 1px var(--base-card-classic-hover-border-color),
    0 1px 1px 1px var(--black-a1),
    0 2px 1px -1px var(--gray-a3),
    0 2px 3px -2px var(--black-a1),
    0 3px 12px -4px var(--gray-a3),
    0 4px 16px -8px var(--black-a1);
  --base-card-classic-hover-box-shadow-outer:
    0 0 0 0 var(--base-card-classic-hover-border-color),
    0 1px 1px 0 var(--black-a1),
    0 2px 1px -2px var(--gray-a3),
    0 2px 3px -3px var(--black-a1),
    0 3px 12px -5px var(--gray-a3),
    0 4px 16px -9px var(--black-a1);

  --base-card-classic-active-box-shadow-inner:
    0 0 0 1px var(--base-card-classic-active-border-color),
    0 0 0 1px var(--color-transparent),
    0 0 0 0.5px var(--black-a1),
    0 1px 1px 0 var(--gray-a4),
    0 2px 1px -1px var(--black-a1),
    0 1px 3px 0 var(--black-a1);
  --base-card-classic-active-box-shadow-outer:
    0 0 0 0 var(--base-card-classic-active-border-color),
    0 0 0 0 var(--color-transparent),
    0 0 0 0 var(--black-a1),
    0 1px 1px -1px var(--gray-a4),
    0 2px 1px -2px var(--black-a1),
    0 1px 3px -1px var(--black-a1);

  --base-card-classic-border-color: var(--gray-a3);
  --base-card-classic-hover-border-color: var(--gray-a3);
  --base-card-classic-active-border-color: var(--gray-a4);
  @supports (color: color-mix(in oklab, white, black)) {
    --base-card-classic-border-color: color-mix(in oklab, var(--gray-a3), var(--gray-3) 25%);
    --base-card-classic-hover-border-color: color-mix(in oklab, var(--gray-a4), var(--gray-4) 25%);
    --base-card-classic-active-border-color: color-mix(in oklab, var(--gray-a3), var(--gray-3) 25%);
  }
}

/* prettier-ignore */
:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  --base-card-classic-box-shadow-inner:
    0 0 0 1px var(--base-card-classic-border-color),
    0 0 0 1px var(--color-transparent),
    0 0 0 0.5px var(--black-a3),
    0 1px 1px 0 var(--black-a6),
    0 2px 1px -1px var(--black-a6),
    0 1px 3px 0 var(--black-a5);
  --base-card-classic-box-shadow-outer:
    0 0 0 0 var(--base-card-classic-border-color),
    0 0 0 0 var(--color-transparent),
    0 0 0 0 var(--black-a3),
    0 1px 1px -1px var(--black-a6),
    0 2px 1px -2px var(--black-a6),
    0 1px 3px -1px var(--black-a5);

  --base-card-classic-hover-box-shadow-inner:
    0 0 0 1px var(--base-card-classic-hover-border-color),
    0 0 1px 1px var(--gray-a4),
    0 0 1px -1px var(--gray-a4),
    0 0 3px -2px var(--gray-a3),
    0 0 12px -2px var(--gray-a3),
    0 0 16px -8px var(--gray-a7);
  --base-card-classic-hover-box-shadow-outer:
    0 0 0 0 var(--base-card-classic-hover-border-color),
    0 0 1px 0 var(--gray-a4),
    0 0 1px -2px var(--gray-a4),
    0 0 3px -3px var(--gray-a3),
    0 0 12px -3px var(--gray-a3),
    0 0 16px -9px var(--gray-a7);

  --base-card-classic-active-box-shadow-inner:
    0 0 0 1px var(--base-card-classic-active-border-color),
    0 0 0 1px var(--color-transparent),
    0 0 0 0.5px var(--black-a3),
    0 1px 1px 0 var(--black-a6),
    0 2px 1px -1px var(--black-a6),
    0 1px 3px 0 var(--black-a5);
  --base-card-classic-active-box-shadow-outer:
    0 0 0 0 var(--base-card-classic-active-border-color),
    0 0 0 0 var(--color-transparent),
    0 0 0 0 var(--black-a3),
    0 1px 1px -1px var(--black-a6),
    0 2px 1px -2px var(--black-a6),
    0 1px 3px -1px var(--black-a5);

  --base-card-classic-border-color: var(--gray-a6);
  --base-card-classic-hover-border-color: var(--gray-a6);
  --base-card-classic-active-border-color: var(--gray-a6);
  @supports (color: color-mix(in oklab, white, black)) {
    --base-card-classic-border-color: color-mix(in oklab, var(--gray-a6), var(--gray-6) 25%);
    --base-card-classic-hover-border-color: color-mix(in oklab, var(--gray-a6), var(--gray-6) 25%);
    --base-card-classic-active-border-color: color-mix(in oklab, var(--gray-a6), var(--gray-6) 25%);
  }
}


================================================
File: packages/radix-ui-themes/src/components/_internal/base-checkbox.css
================================================
.rt-BaseCheckboxRoot {
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  vertical-align: top;
  flex-shrink: 0;
  cursor: var(--cursor-checkbox);

  /* Unless in a skeleton, align with text line height when possible and fall back to own height */
  height: var(--skeleton-height, var(--line-height, var(--checkbox-size)));
  --skeleton-height-override: var(--checkbox-size);

  /* Set root radius when in a skeleton */
  border-radius: var(--skeleton-radius);
  --skeleton-radius-override: var(--checkbox-border-radius);

  &::before {
    content: '';
    display: block;
    height: var(--checkbox-size);
    width: var(--checkbox-size);
    border-radius: var(--checkbox-border-radius);
  }
}

.rt-BaseCheckboxIndicator {
  position: absolute;
  width: var(--checkbox-indicator-size);
  height: var(--checkbox-indicator-size);

  /* Required for subpixel alignment in Safari */
  transform: translate(-50%, -50%);
  top: 50%;
  left: 50%;
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-BaseCheckboxRoot {
    &:where(.rt-r-size-1) {
      --checkbox-size: calc(var(--space-4) * 0.875);
      --checkbox-indicator-size: calc(9px * var(--scaling));
      --checkbox-border-radius: calc(var(--radius-1) * 0.875);
    }
    &:where(.rt-r-size-2) {
      --checkbox-size: var(--space-4);
      --checkbox-indicator-size: calc(10px * var(--scaling));
      --checkbox-border-radius: var(--radius-1);
    }
    &:where(.rt-r-size-3) {
      --checkbox-size: calc(var(--space-4) * 1.25);
      --checkbox-indicator-size: calc(12px * var(--scaling));
      --checkbox-border-radius: calc(var(--radius-1) * 1.25);
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

/* surface */

.rt-BaseCheckboxRoot:where(.rt-variant-surface) {
  &:where([data-state='unchecked']) {
    &::before {
      background-color: var(--color-surface);
      box-shadow: inset 0 0 0 1px var(--gray-a7);
    }
  }

  &:where([data-state='checked'], [data-state='indeterminate']) {
    &::before {
      background-color: var(--accent-indicator);
    }
    & :where(.rt-BaseCheckboxIndicator) {
      color: var(--accent-contrast);
    }

    &:where(.rt-high-contrast) {
      &::before {
        background-color: var(--accent-12);
      }
      & :where(.rt-BaseCheckboxIndicator) {
        color: var(--accent-1);
      }
    }
  }

  &:where(:disabled) {
    &::before {
      box-shadow: inset 0 0 0 1px var(--gray-a6);
      background-color: transparent;
    }
    & :where(.rt-BaseCheckboxIndicator) {
      color: var(--gray-a8);
    }
  }
}

/* classic */

.rt-BaseCheckboxRoot:where(.rt-variant-classic) {
  &:where([data-state='unchecked']) {
    &::before {
      background-color: var(--color-surface);
      box-shadow: inset 0 0 0 1px var(--gray-a3), var(--shadow-1);
    }
  }

  &:where([data-state='checked'], [data-state='indeterminate']) {
    &::before {
      background-color: var(--accent-indicator);
      background-image: linear-gradient(to bottom, var(--white-a3), transparent, var(--black-a1));
      box-shadow: inset 0 0.5px 0.5px var(--white-a4), inset 0 -0.5px 0.5px var(--black-a4);
    }
    & :where(.rt-BaseCheckboxIndicator) {
      color: var(--accent-contrast);
    }

    &:where(.rt-high-contrast) {
      &::before {
        background-color: var(--accent-12);
      }
      & :where(.rt-BaseCheckboxIndicator) {
        color: var(--accent-1);
      }
    }
  }

  &:where(:disabled) {
    &::before {
      box-shadow: var(--shadow-1);
      background-color: transparent;
      background-image: none;
    }
    & :where(.rt-BaseCheckboxIndicator) {
      color: var(--gray-a8);
    }
  }
}

/* soft */

.rt-BaseCheckboxRoot:where(.rt-variant-soft) {
  &::before {
    background-color: var(--accent-a5);
  }

  &:where([data-state='checked'], [data-state='indeterminate']) {
    & :where(.rt-BaseCheckboxIndicator) {
      color: var(--accent-a11);
    }

    &:where(.rt-high-contrast) {
      & :where(.rt-BaseCheckboxIndicator) {
        color: var(--accent-12);
      }
    }
  }

  &:where(:disabled) {
    &::before {
      background-color: transparent;
    }
    & :where(.rt-BaseCheckboxIndicator) {
      color: var(--gray-a8);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/_internal/base-checkbox.props.ts
================================================
import { colorPropDef } from '../../props/color.prop.js';
import { highContrastPropDef } from '../../props/high-contrast.prop.js';

import type { PropDef } from '../../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;
const variants = ['classic', 'surface', 'soft'] as const;

const baseCheckboxPropDefs = {
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '2', responsive: true },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'surface' },
  ...colorPropDef,
  ...highContrastPropDef,
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
};

export { baseCheckboxPropDefs };


================================================
File: packages/radix-ui-themes/src/components/_internal/base-dialog.css
================================================
.rt-BaseDialogOverlay {
  position: fixed;
  inset: 0;

  &::before {
    position: fixed;
    content: '';
    inset: 0;
    background-color: var(--color-overlay);
  }
}

.rt-BaseDialogScroll {
  display: flex;
  overflow: auto;
  position: absolute;
  inset: 0;
}

.rt-BaseDialogScrollPadding {
  flex-grow: 1;
  margin: auto;
  padding-top: var(--space-6);
  padding-bottom: max(var(--space-6), 6vh);
  padding-left: var(--space-4);
  padding-right: var(--space-4);
}

@breakpoints {
  .rt-BaseDialogScrollPadding:where(.rt-r-align-start) {
    margin-top: 0;
  }
  .rt-BaseDialogScrollPadding:where(.rt-r-align-center) {
    margin-top: auto;
  }
}

.rt-BaseDialogContent {
  margin: auto;
  width: 100%;
  z-index: 1;
  position: relative;
  box-sizing: border-box;
  overflow: auto;

  --inset-padding-top: var(--dialog-content-padding);
  --inset-padding-right: var(--dialog-content-padding);
  --inset-padding-bottom: var(--dialog-content-padding);
  --inset-padding-left: var(--dialog-content-padding);
  padding: var(--dialog-content-padding);
  box-sizing: border-box;

  background-color: var(--color-panel-solid);
  box-shadow: var(--shadow-6);
  outline: none;
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-BaseDialogContent {
    &:where(.rt-r-size-1) {
      --dialog-content-padding: var(--space-3);
      border-radius: var(--radius-4);
    }
    &:where(.rt-r-size-2) {
      --dialog-content-padding: var(--space-4);
      border-radius: var(--radius-4);
    }
    &:where(.rt-r-size-3) {
      --dialog-content-padding: var(--space-5);
      border-radius: var(--radius-5);
    }
    &:where(.rt-r-size-4) {
      --dialog-content-padding: var(--space-6);
      border-radius: var(--radius-5);
    }
  }
}

@media (prefers-reduced-motion: no-preference) {
  @keyframes rt-dialog-overlay-no-op {
    from {
      opacity: 1;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes rt-dialog-content-show {
    from {
      opacity: 0;
      transform: translateY(5px) scale(0.97);
    }
    to {
      opacity: 1;
      transform: translateY(0px) scale(1);
    }
  }

  @keyframes rt-dialog-content-hide {
    from {
      opacity: 1;
      transform: translateY(0px) scale(1);
    }
    to {
      opacity: 0;
      transform: translateY(5px) scale(0.99);
    }
  }

  .rt-BaseDialogOverlay {
    /* Keep the overlay mounted until the children have animated */
    &:where([data-state='closed']) {
      animation: rt-dialog-overlay-no-op 160ms cubic-bezier(0.16, 1, 0.3, 1);
    }
    &:where([data-state='open'])::before {
      animation: rt-fade-in 200ms cubic-bezier(0.16, 1, 0.3, 1);
    }
    &:where([data-state='closed'])::before {
      opacity: 0;
      animation: rt-fade-out 160ms cubic-bezier(0.16, 1, 0.3, 1);
    }
  }

  .rt-BaseDialogContent {
    &:where([data-state='open']) {
      animation: rt-dialog-content-show 200ms cubic-bezier(0.16, 1, 0.3, 1);
    }
    &:where([data-state='closed']) {
      opacity: 0;
      animation: rt-dialog-content-hide 100ms cubic-bezier(0.16, 1, 0.3, 1);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/_internal/base-menu.css
================================================
.rt-BaseMenuContent {
  --scrollarea-scrollbar-vertical-margin-top: var(--base-menu-content-padding);
  --scrollarea-scrollbar-vertical-margin-bottom: var(--base-menu-content-padding);
  --scrollarea-scrollbar-horizontal-margin-left: var(--base-menu-content-padding);
  --scrollarea-scrollbar-horizontal-margin-right: var(--base-menu-content-padding);

  display: flex;
  flex-direction: column;
  box-sizing: border-box;
  overflow: hidden;
  background-color: var(--base-menu-bg);
}

.rt-BaseMenuViewport {
  flex: 1 1 0%;
  display: flex;
  flex-direction: column;
  overflow: auto;
  padding: var(--base-menu-content-padding);
  box-sizing: border-box;

  :where(.rt-BaseMenuContent:has(.rt-ScrollAreaScrollbar[data-orientation='vertical'])) & {
    padding-right: var(--space-3);
  }
}

.rt-BaseMenuItem {
  display: flex;
  align-items: center;
  gap: var(--space-2);
  height: var(--base-menu-item-height);
  padding-left: var(--base-menu-item-padding-left);
  padding-right: var(--base-menu-item-padding-right);
  box-sizing: border-box;
  position: relative;
  outline: none;
  scroll-margin: var(--base-menu-content-padding) 0;

  /* Fix sticky text highlighting after selection in Firefox */
  user-select: none;

  /* Cursors */
  cursor: var(--cursor-menu-item);
  &:where([data-disabled]) {
    cursor: default;
  }
}

.rt-BaseMenuShortcut {
  display: flex;
  align-items: center;
  margin-left: auto;
  padding-left: var(--space-4);
}

.rt-BaseMenuSubTriggerIcon {
  color: var(--gray-12);
  margin-right: calc(-2px * var(--scaling));
}

.rt-BaseMenuItemIndicator {
  position: absolute;
  left: 0;
  width: var(--base-menu-item-padding-left);
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

.rt-BaseMenuSeparator {
  height: 1px;
  margin-top: var(--space-2);
  margin-bottom: var(--space-2);
  margin-left: var(--base-menu-item-padding-left);
  margin-right: var(--base-menu-item-padding-right);
}

.rt-BaseMenuLabel {
  display: flex;
  align-items: center;
  height: var(--base-menu-item-height);
  padding-left: var(--base-menu-item-padding-left);
  padding-right: var(--base-menu-item-padding-right);
  box-sizing: border-box;
  color: var(--gray-a10);
  user-select: none;
  cursor: default;

  :where(.rt-BaseMenuItem) + & {
    margin-top: var(--space-2);
  }
}

.rt-BaseMenuArrow {
  fill: var(--base-menu-bg);
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-BaseMenuContent {
    &:where(.rt-r-size-1) {
      --base-menu-content-padding: var(--space-1);
      --base-menu-item-padding-left: calc(var(--space-5) / 1.2);
      --base-menu-item-padding-right: var(--space-2);
      --base-menu-item-height: var(--space-5);
      border-radius: var(--radius-3);

      & :where(.rt-BaseMenuItem) {
        font-size: var(--font-size-1);
        line-height: var(--line-height-1);
        letter-spacing: var(--letter-spacing-1);
        border-radius: var(--radius-1);
      }

      & :where(.rt-BaseMenuLabel) {
        font-size: var(--font-size-1);
        line-height: var(--line-height-1);
        letter-spacing: var(--letter-spacing-1);
      }

      & :where(.rt-BaseMenuItemIndicatorIcon, .rt-BaseMenuSubTriggerIcon) {
        width: calc(8px * var(--scaling));
        height: calc(8px * var(--scaling));
      }

      /* reset with :not:has so we still support browsers without :has */
      &:where(:not(:has(.rt-BaseMenuCheckboxItem, .rt-BaseMenuRadioItem))) {
        --base-menu-item-padding-left: var(--space-2);
      }
      &:where(:has(.rt-BaseMenuCheckboxItem, .rt-BaseMenuRadioItem)) {
        --base-menu-item-padding-left: calc(var(--space-5) / 1.2);
      }
    }

    &:where(.rt-r-size-2) {
      --base-menu-content-padding: var(--space-2);
      --base-menu-item-padding-left: var(--space-3);
      --base-menu-item-padding-right: var(--space-3);
      --base-menu-item-height: var(--space-6);
      border-radius: var(--radius-4);

      & :where(.rt-BaseMenuItem) {
        font-size: var(--font-size-2);
        line-height: var(--line-height-2);
        letter-spacing: var(--letter-spacing-2);
        border-radius: var(--radius-2);
      }

      & :where(.rt-BaseMenuLabel) {
        font-size: var(--font-size-2);
        line-height: var(--line-height-2);
        letter-spacing: var(--letter-spacing-2);
      }

      & :where(.rt-BaseMenuItemIndicatorIcon, .rt-BaseMenuSubTriggerIcon) {
        width: calc(10px * var(--scaling));
        height: calc(10px * var(--scaling));
      }

      /* reset with :not:has so we still support browsers without :has */
      &:where(:not(:has(.rt-BaseMenuCheckboxItem, .rt-BaseMenuRadioItem))) {
        --base-menu-item-padding-left: var(--space-3);
      }
      &:where(:has(.rt-BaseMenuCheckboxItem, .rt-BaseMenuRadioItem)) {
        --base-menu-item-padding-left: var(--space-5);
      }
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

.rt-BaseMenuContent {
  --base-menu-bg: var(--color-panel-solid);
  box-shadow: var(--shadow-5);
}
.rt-BaseMenuItem:where([data-accent-color]) {
  color: var(--accent-a11);
}
.rt-BaseMenuItem:where([data-disabled]) {
  color: var(--gray-a8);
}
.rt-BaseMenuShortcut {
  color: var(--gray-a11);
}
.rt-BaseMenuItem:where([data-disabled], [data-highlighted]),
.rt-BaseMenuSubTrigger:where([data-state='open']) {
  & :where(.rt-BaseMenuShortcut) {
    color: inherit;
  }
}
.rt-BaseMenuSeparator {
  background-color: var(--gray-a6);
}

/* solid */

.rt-BaseMenuContent:where(.rt-variant-solid) {
  & :where(.rt-BaseMenuSubTrigger[data-state='open']) {
    background-color: var(--gray-a3);
  }
  & :where(.rt-BaseMenuItem[data-highlighted]) {
    background-color: var(--accent-9);
    color: var(--accent-contrast);

    & :where(.rt-BaseMenuSubTriggerIcon) {
      color: var(--accent-contrast);
    }
  }
  &:where(.rt-high-contrast) {
    & :where(.rt-BaseMenuItem[data-highlighted]) {
      background-color: var(--accent-12);
      color: var(--accent-1);

      & :where(.rt-BaseMenuSubTriggerIcon) {
        color: var(--accent-1);
      }

      &:where([data-accent-color]) {
        background-color: var(--accent-9);
        color: var(--accent-contrast);
      }
    }
  }
}

/* soft */

.rt-BaseMenuContent:where(.rt-variant-soft) {
  & :where(.rt-BaseMenuSubTrigger[data-state='open']) {
    background-color: var(--accent-a3);
  }
  & :where(.rt-BaseMenuItem[data-highlighted]) {
    background-color: var(--accent-a4);
  }
}


================================================
File: packages/radix-ui-themes/src/components/_internal/base-menu.props.ts
================================================
import { asChildPropDef } from '../../props/as-child.prop.js';
import { colorPropDef } from '../../props/color.prop.js';
import { highContrastPropDef } from '../../props/high-contrast.prop.js';

import type { PropDef } from '../../props/prop-def.js';

const contentSizes = ['1', '2'] as const;
const contentVariants = ['solid', 'soft'] as const;

const baseMenuContentPropDefs = {
  size: {
    type: 'enum',
    className: 'rt-r-size',
    values: contentSizes,
    default: '2',
    responsive: true,
  },
  variant: {
    type: 'enum',
    className: 'rt-variant',
    values: contentVariants,
    default: 'solid',
  },
  ...colorPropDef,
  ...highContrastPropDef,
} satisfies {
  size: PropDef<(typeof contentSizes)[number]>;
  variant: PropDef<(typeof contentVariants)[number]>;
};

const baseMenuItemPropDefs = {
  ...asChildPropDef,
  ...colorPropDef,
  shortcut: { type: 'string' },
} satisfies {
  shortcut: PropDef<string>;
};

const baseMenuCheckboxItemPropDefs = {
  ...colorPropDef,
  shortcut: { type: 'string' },
} satisfies {
  shortcut: PropDef<string>;
};

const baseMenuRadioItemPropDefs = {
  ...colorPropDef,
};

export {
  baseMenuContentPropDefs,
  baseMenuItemPropDefs,
  baseMenuCheckboxItemPropDefs,
  baseMenuRadioItemPropDefs,
};


================================================
File: packages/radix-ui-themes/src/components/_internal/base-radio.css
================================================
.rt-BaseRadioRoot {
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  vertical-align: top;
  flex-shrink: 0;
  cursor: var(--cursor-radio);

  /* Unless in a skeleton, align with text line height when possible and fall back to own height */
  height: var(--skeleton-height, var(--line-height, var(--radio-size)));
  --skeleton-height-override: var(--radio-size);

  /* Set root radius when in a skeleton */
  border-radius: var(--skeleton-radius);
  --skeleton-radius-override: 100%;

  &:where(:disabled, [data-disabled]) {
    cursor: var(--cursor-disabled);
  }

  &::before {
    content: '';
    display: block;
    height: var(--radio-size);
    width: var(--radio-size);
    border-radius: 100%;
  }

  &::after {
    pointer-events: none;
    position: absolute;
    height: var(--radio-size);
    width: var(--radio-size);
    border-radius: 100%;
    /* Scale via transform to achieve perfect sub-pixel positioning */
    transform: scale(0.4);
  }

  &:where(:checked, [data-state='checked']) {
    &::after {
      content: '';
    }
  }

  &:where(:focus-visible)::before {
    outline: 2px solid var(--focus-8);
    outline-offset: 2px;
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-BaseRadioRoot {
    &:where(.rt-r-size-1) {
      --radio-size: calc(var(--space-4) * 0.875);
    }
    &:where(.rt-r-size-2) {
      --radio-size: var(--space-4);
    }
    &:where(.rt-r-size-3) {
      --radio-size: calc(var(--space-4) * 1.25);
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

/* surface */

.rt-BaseRadioRoot:where(.rt-variant-surface) {
  &:where(:not(:checked), [data-state='unchecked'])::before {
    background-color: var(--color-surface);
    box-shadow: inset 0 0 0 1px var(--gray-a7);
  }
  &:where(:checked, [data-state='checked'])::before {
    background-color: var(--accent-indicator);
  }
  &::after {
    background-color: var(--accent-contrast);
  }

  &:where(.rt-high-contrast) {
    &:where(:checked, [data-state='checked'])::before {
      background-color: var(--accent-12);
    }
    &::after {
      background-color: var(--accent-1);
    }
  }

  &:where(:disabled, [data-disabled])::before {
    box-shadow: inset 0 0 0 1px var(--gray-a6);
    background-color: var(--gray-a3);
  }
  &:where(:disabled, [data-disabled])::after {
    background-color: var(--gray-a8);
  }
}

/* classic */

.rt-BaseRadioRoot:where(.rt-variant-classic) {
  &:where(:not(:checked), [data-state='unchecked'])::before {
    background-color: var(--color-surface);
    box-shadow: inset 0 0 0 1px var(--gray-7), var(--shadow-1);
  }
  &:where(:checked, [data-state='checked'])::before {
    background-color: var(--accent-indicator);
    background-image: linear-gradient(to bottom, var(--white-a3), transparent, var(--black-a3));
    box-shadow: inset 0 0.5px 0.5px var(--white-a4), inset 0 -0.5px 0.5px var(--black-a4);
  }
  &::after {
    background-color: var(--accent-contrast);
  }

  &:where(.rt-high-contrast) {
    &:where(:checked, [data-state='checked'])::before {
      background-color: var(--accent-12);
    }
    &::after {
      background-color: var(--accent-1);
    }
  }

  &:where(:disabled, [data-disabled])::before {
    box-shadow: var(--shadow-1);
    background-color: var(--gray-a3);
    background-image: none;
  }
  &:where(:disabled, [data-disabled])::after {
    background-color: var(--gray-a8);
  }
}

/* soft */

.rt-BaseRadioRoot:where(.rt-variant-soft) {
  &::before {
    background-color: var(--accent-a4);
  }
  &::after {
    background-color: var(--accent-a11);
  }

  &:where(.rt-high-contrast) {
    &::after {
      background-color: var(--accent-12);
    }
  }

  &:where(:focus-visible)::before {
    /* Use gray outline when component color is gray */
    outline-color: var(--accent-a8);
  }

  &:where(:disabled, [data-disabled])::before {
    background-color: var(--gray-a3);
  }
  &:where(:disabled, [data-disabled])::after {
    background-color: var(--gray-a8);
  }
}


================================================
File: packages/radix-ui-themes/src/components/_internal/base-radio.props.ts
================================================
import { colorPropDef } from '../../props/color.prop.js';
import { highContrastPropDef } from '../../props/high-contrast.prop.js';

import type { PropDef } from '../../props/prop-def.js';

const sizes = ['1', '2', '3'] as const;
const variants = ['classic', 'surface', 'soft'] as const;

const baseRadioPropDefs = {
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '2', responsive: true },
  variant: { type: 'enum', className: 'rt-variant', values: variants, default: 'surface' },
  ...colorPropDef,
  ...highContrastPropDef,
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  variant: PropDef<(typeof variants)[number]>;
};

export { baseRadioPropDefs };


================================================
File: packages/radix-ui-themes/src/components/_internal/base-tab-list.css
================================================
.rt-BaseTabList {
  display: flex;
  justify-content: flex-start;
  overflow-x: auto;
  white-space: nowrap;

  font-family: var(--default-font-family);
  font-style: normal;

  scrollbar-width: none;
  &::-webkit-scrollbar {
    display: none;
  }
}

.rt-BaseTabListTrigger {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  position: relative;
  user-select: none;
}

.rt-BaseTabListTriggerInner,
.rt-BaseTabListTriggerInnerHidden {
  display: flex;
  align-items: center;
  justify-content: center;
}

.rt-BaseTabListTriggerInner {
  position: absolute;

  :where(.rt-BaseTabListTrigger[data-state='inactive'], .rt-TabNavLink:not([data-active])) & {
    letter-spacing: var(--tab-inactive-letter-spacing);
    word-spacing: var(--tab-inactive-word-spacing);
  }

  :where(.rt-BaseTabListTrigger[data-state='active'], .rt-TabNavLink[data-active]) & {
    font-weight: var(--font-weight-medium);
    letter-spacing: var(--tab-active-letter-spacing);
    word-spacing: var(--tab-active-word-spacing);
  }
}

.rt-BaseTabListTriggerInnerHidden {
  visibility: hidden;
  font-weight: var(--font-weight-medium);
  letter-spacing: var(--tab-active-letter-spacing);
  word-spacing: var(--tab-active-word-spacing);
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

.rt-BaseTabListTrigger {
  box-sizing: border-box;
  height: var(--tab-height);
  padding-left: var(--tab-padding-x);
  padding-right: var(--tab-padding-x);
}

.rt-BaseTabListTriggerInner,
.rt-BaseTabListTriggerInnerHidden {
  box-sizing: border-box;
  padding: var(--tab-inner-padding-y) var(--tab-inner-padding-x);
  border-radius: var(--tab-inner-border-radius);
}

@breakpoints {
  .rt-BaseTabList {
    &:where(.rt-r-size-1) {
      font-size: var(--font-size-1);
      line-height: var(--line-height-1);
      letter-spacing: var(--letter-spacing-1);
      --tab-height: var(--space-6);
      --tab-padding-x: var(--space-1);
      --tab-inner-padding-x: var(--space-1);
      --tab-inner-padding-y: calc(var(--space-1) * 0.5);
      --tab-inner-border-radius: var(--radius-1);
    }
    &:where(.rt-r-size-2) {
      font-size: var(--font-size-2);
      line-height: var(--line-height-2);
      letter-spacing: var(--letter-spacing-2);
      --tab-height: var(--space-7);
      --tab-padding-x: var(--space-2);
      --tab-inner-padding-x: var(--space-2);
      --tab-inner-padding-y: var(--space-1);
      --tab-inner-border-radius: var(--radius-2);
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

.rt-BaseTabList {
  box-shadow: inset 0 -1px 0 0 var(--gray-a5);
}

.rt-BaseTabListTrigger {
  color: var(--gray-a11);

  @media (hover: hover) {
    &:where(:hover) {
      color: var(--gray-12);
    }
    &:where(:hover) :where(.rt-BaseTabListTriggerInner) {
      background-color: var(--gray-a3);
    }
    &:where(:focus-visible:hover) :where(.rt-BaseTabListTriggerInner) {
      background-color: var(--accent-a3);
    }
  }
  &:where([data-state='active'], [data-active]) {
    color: var(--gray-12);
  }
  &:where(:focus-visible) :where(.rt-BaseTabListTriggerInner) {
    outline: 2px solid var(--focus-8);
    outline-offset: -2px;
  }
  &:where([data-state='active'], [data-active])::before {
    box-sizing: border-box;
    content: '';
    height: 2px;
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: var(--accent-indicator);
  }

  :where(.rt-BaseTabList.rt-high-contrast) & {
    &:where([data-state='active'], [data-active])::before {
      background-color: var(--accent-12);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/components/_internal/base-tab-list.props.ts
================================================
import { colorPropDef } from '../../props/color.prop.js';
import { highContrastPropDef } from '../../props/high-contrast.prop.js';

import type { PropDef } from '../../props/prop-def.js';

const sizes = ['1', '2'] as const;
const wrapValues = ['nowrap', 'wrap', 'wrap-reverse'] as const;
const justifyValues = ['start', 'center', 'end'] as const;

const baseTabListPropDefs = {
  size: { type: 'enum', className: 'rt-r-size', values: sizes, default: '2', responsive: true },
  wrap: {
    type: 'enum',
    className: 'rt-r-fw',
    values: wrapValues,
    responsive: true,
  },
  justify: {
    type: 'enum',
    className: 'rt-r-jc',
    values: justifyValues,
    responsive: true,
  },
  ...colorPropDef,
  ...highContrastPropDef,
} satisfies {
  size: PropDef<(typeof sizes)[number]>;
  wrap: PropDef<(typeof wrapValues)[number]>;
  justify: PropDef<(typeof justifyValues)[number]>;
};

export { baseTabListPropDefs };


================================================
File: packages/radix-ui-themes/src/helpers/component-props.ts
================================================
import type React from 'react';

type ComponentPropsAs<
  C extends React.ElementType<any>,
  T extends React.ComponentPropsWithoutRef<C>['as']
> = Omit<Extract<React.ComponentPropsWithoutRef<C>, { as: T }>, 'as' | 'asChild'>;

// Omits the specified props from the component props. Autocomplete will suggest props
// of the component, but won't restrict the omittable props to those that actually exist.
type ComponentPropsWithout<
  T extends React.ElementType,
  O extends
    | Omit<string, keyof React.ComponentPropsWithoutRef<T>>
    | keyof React.ComponentPropsWithoutRef<T>
> = Omit<React.ComponentPropsWithoutRef<T>, O & string>;

type RemovedProps = 'asChild' | 'defaultChecked' | 'defaultValue' | 'color';

export type { ComponentPropsAs, ComponentPropsWithout, RemovedProps };


================================================
File: packages/radix-ui-themes/src/helpers/extract-margin-props.ts
================================================
import type { MarginProps } from '../props/margin.props.js';

export function extractMarginProps<T extends MarginProps>(props: T) {
  const { m, mx, my, mt, mr, mb, ml, ...rest } = props;
  return { m, mx, my, mt, mr, mb, ml, rest };
}


================================================
File: packages/radix-ui-themes/src/helpers/extract-props.ts
================================================
import classNames from 'classnames';

import { getResponsiveClassNames, getResponsiveStyles } from './get-responsive-styles.js';
import { isResponsiveObject } from './is-responsive-object.js';
import { mergeStyles } from './merge-styles.js';

import type * as React from 'react';
import type { PropDef } from '../props/prop-def.js';

type PropDefsWithClassName<T> = T extends Record<string, PropDef>
  ? { [K in keyof T]: T[K] extends { className: string } ? K : never }[keyof T]
  : never;

function mergePropDefs<T extends Record<string, PropDef>[]>(...args: T): Record<string, PropDef> {
  return Object.assign({}, ...args);
}

/**
 * Takes props, checks them against prop defs that have a `className` on them,
 * adds necessary CSS classes and inline styles, and returns the props without
 * the corresponding prop defs that were used to formulate the new `className`
 * and `style` values. Also applies prop def defaults to every prop.
 */
function extractProps<
  P extends { className?: string; style?: React.CSSProperties; [key: string]: any },
  T extends Record<string, PropDef>[]
>(
  props: P,
  ...propDefs: T
): Omit<P & { className?: string; style?: React.CSSProperties }, PropDefsWithClassName<T[number]>> {
  let className: string | undefined;
  let style: ReturnType<typeof mergeStyles>;
  const extractedProps = { ...props };
  const allPropDefs = mergePropDefs(...propDefs);

  for (const key in allPropDefs) {
    let value = extractedProps[key];
    const propDef = allPropDefs[key];

    // Apply prop def defaults
    if (propDef.default !== undefined && value === undefined) {
      value = propDef.default;
    }

    // Apply the default value if the value is not a valid enum value
    if (propDef.type === 'enum') {
      const values = [propDef.default, ...propDef.values];

      if (!values.includes(value) && !isResponsiveObject(value)) {
        value = propDef.default;
      }
    }

    // Apply the value with defaults
    (extractedProps as Record<string, any>)[key] = value;

    if ('className' in propDef && propDef.className) {
      delete extractedProps[key];

      const isResponsivePropDef = 'responsive' in propDef;
      // Make sure we are not threading through responsive values for non-responsive prop defs
      if (!value || (isResponsiveObject(value) && !isResponsivePropDef)) {
        continue;
      }

      if (isResponsiveObject(value)) {
        // Apply prop def defaults to the `initial` breakpoint
        if (propDef.default !== undefined && value.initial === undefined) {
          value.initial = propDef.default;
        }

        // Apply the default value to the `initial` breakpoint when it is not a valid enum value
        if (propDef.type === 'enum') {
          const values = [propDef.default, ...propDef.values];

          if (!values.includes(value.initial)) {
            value.initial = propDef.default;
          }
        }
      }

      if (propDef.type === 'enum') {
        const propClassName = getResponsiveClassNames({
          allowArbitraryValues: false,
          value,
          className: propDef.className,
          propValues: propDef.values,
          parseValue: propDef.parseValue,
        });

        className = classNames(className, propClassName);
        continue;
      }

      if (propDef.type === 'string' || propDef.type === 'enum | string') {
        const propDefValues = propDef.type === 'string' ? [] : propDef.values;

        const [propClassNames, propCustomProperties] = getResponsiveStyles({
          className: propDef.className,
          customProperties: propDef.customProperties,
          propValues: propDefValues,
          parseValue: propDef.parseValue,
          value,
        });

        style = mergeStyles(style, propCustomProperties);
        className = classNames(className, propClassNames);
        continue;
      }

      if (propDef.type === 'boolean' && value) {
        // TODO handle responsive boolean props
        className = classNames(className, propDef.className);
        continue;
      }
    }
  }

  extractedProps.className = classNames(className, props.className);
  extractedProps.style = mergeStyles(style, props.style);
  return extractedProps;
}

export { extractProps };


================================================
File: packages/radix-ui-themes/src/helpers/get-margin-styles.ts
================================================
import classNames from 'classnames';

import { getResponsiveStyles } from './get-responsive-styles.js';
import { mergeStyles } from './merge-styles.js';
import { marginPropDefs } from '../props/margin.props.js';

import type { MarginProps } from '../props/margin.props.js';

const marginValues = marginPropDefs.m.values;

export function getMarginStyles(props: MarginProps) {
  const [mClassNames, mCustomProperties] = getResponsiveStyles({
    className: 'rt-r-m',
    customProperties: ['--margin'],
    propValues: marginValues,
    value: props.m,
  });

  const [mxClassNames, mxCustomProperties] = getResponsiveStyles({
    className: 'rt-r-mx',
    customProperties: ['--margin-left', '--margin-right'],
    propValues: marginValues,
    value: props.mx,
  });

  const [myClassNames, myCustomProperties] = getResponsiveStyles({
    className: 'rt-r-my',
    customProperties: ['--margin-top', '--margin-bottom'],
    propValues: marginValues,
    value: props.my,
  });

  const [mtClassNames, mtCustomProperties] = getResponsiveStyles({
    className: 'rt-r-mt',
    customProperties: ['--margin-top'],
    propValues: marginValues,
    value: props.mt,
  });

  const [mrClassNames, mrCustomProperties] = getResponsiveStyles({
    className: 'rt-r-mr',
    customProperties: ['--margin-right'],
    propValues: marginValues,
    value: props.mr,
  });

  const [mbClassNames, mbCustomProperties] = getResponsiveStyles({
    className: 'rt-r-mb',
    customProperties: ['--margin-bottom'],
    propValues: marginValues,
    value: props.mb,
  });

  const [mlClassNames, mlCustomProperties] = getResponsiveStyles({
    className: 'rt-r-ml',
    customProperties: ['--margin-left'],
    propValues: marginValues,
    value: props.ml,
  });

  return [
    classNames(
      mClassNames,
      mxClassNames,
      myClassNames,
      mtClassNames,
      mrClassNames,
      mbClassNames,
      mlClassNames
    ),
    mergeStyles(
      mCustomProperties,
      mxCustomProperties,
      myCustomProperties,
      mtCustomProperties,
      mrCustomProperties,
      mbCustomProperties,
      mlCustomProperties
    ),
  ] as const;
}


================================================
File: packages/radix-ui-themes/src/helpers/get-matching-gray-color.ts
================================================
import type { accentColors } from '../props/color.prop.js';

type ThemeAccentColor = (typeof accentColors)[number];

export function getMatchingGrayColor(accentColor: ThemeAccentColor) {
  switch (accentColor) {
    case 'tomato':
    case 'red':
    case 'ruby':
    case 'crimson':
    case 'pink':
    case 'plum':
    case 'purple':
    case 'violet':
      return 'mauve';
    case 'iris':
    case 'indigo':
    case 'blue':
    case 'sky':
    case 'cyan':
      return 'slate';
    case 'teal':
    case 'jade':
    case 'mint':
    case 'green':
      return 'sage';
    case 'grass':
    case 'lime':
      return 'olive';
    case 'yellow':
    case 'amber':
    case 'orange':
    case 'brown':
    case 'gold':
    case 'bronze':
      return 'sand';
    case 'gray':
      return 'gray';
  }
}


================================================
File: packages/radix-ui-themes/src/helpers/get-responsive-styles.ts
================================================
import { breakpoints } from '../props/prop-def.js';
import { hasOwnProperty } from './has-own-property.js';
import { isResponsiveObject } from './is-responsive-object.js';

import type { Responsive, Union } from '../props/prop-def.js';

interface GetResponsiveStylesOptions {
  className: string;
  customProperties: `--${string}`[];
  value: Responsive<Union> | Responsive<string> | undefined;
  propValues: string[] | readonly string[];
  parseValue?: (value: string) => string | undefined;
}

function getResponsiveStyles({ className, customProperties, ...args }: GetResponsiveStylesOptions) {
  const responsiveClassNames = getResponsiveClassNames({
    allowArbitraryValues: true,
    className,
    ...args,
  });

  const responsiveCustomProperties = getResponsiveCustomProperties({ customProperties, ...args });
  return [responsiveClassNames, responsiveCustomProperties] as const;
}

interface GetResponsiveClassNamesOptions {
  allowArbitraryValues?: boolean;
  className: string;
  value: Responsive<Union> | Responsive<string> | undefined;
  propValues: string[] | readonly string[];
  parseValue?: (value: string) => string | undefined;
}

function getResponsiveClassNames({
  allowArbitraryValues,
  value,
  className,
  propValues,
  parseValue = (value) => value,
}: GetResponsiveClassNamesOptions): string | undefined {
  const classNames: string[] = [];

  if (!value) {
    return undefined;
  }

  if (typeof value === 'string' && propValues.includes(value)) {
    return getBaseClassName(className, value, parseValue);
  }

  if (isResponsiveObject(value)) {
    const object = value;

    for (const bp in object) {
      // Make sure we are not iterating over keys that aren't breakpoints
      if (!hasOwnProperty(object, bp) || !breakpoints.includes(bp)) {
        continue;
      }

      const value = object[bp];

      if (value !== undefined) {
        if (propValues.includes(value)) {
          const baseClassName = getBaseClassName(className, value, parseValue);
          const bpClassName = bp === 'initial' ? baseClassName : `${bp}:${baseClassName}`;
          classNames.push(bpClassName);
        } else if (allowArbitraryValues) {
          const bpClassName = bp === 'initial' ? className : `${bp}:${className}`;
          classNames.push(bpClassName);
        }
      }
    }

    return classNames.join(' ');
  }

  if (allowArbitraryValues) {
    return className;
  }
}

function getBaseClassName(
  className: string,
  value: string,
  parseValue: (value: string) => string | undefined
): string {
  const delimiter = className ? '-' : '';
  const matchedValue = parseValue(value);
  const isNegative = matchedValue?.startsWith('-');
  const minus = isNegative ? '-' : '';
  const absoluteValue = isNegative ? matchedValue?.substring(1) : matchedValue;
  return `${minus}${className}${delimiter}${absoluteValue}`;
}

interface GetResponsiveCustomPropertiesOptions {
  customProperties: `--${string}`[];
  value: Responsive<Union> | Responsive<string> | undefined;
  propValues: string[] | readonly string[];
  parseValue?: (value: string) => string | undefined;
}

function getResponsiveCustomProperties({
  customProperties,
  value,
  propValues,
  parseValue = (value) => value,
}: GetResponsiveCustomPropertiesOptions) {
  let styles: Record<string, string | undefined> = {};

  // Don't generate custom properties if the value is not arbitrary
  if (!value || (typeof value === 'string' && propValues.includes(value))) {
    return undefined;
  }

  if (typeof value === 'string') {
    styles = Object.fromEntries(customProperties.map((prop) => [prop, value]));
  }

  if (isResponsiveObject(value)) {
    const object = value;

    for (const bp in object) {
      // Make sure we are not iterating over keys that aren't breakpoints
      if (!hasOwnProperty(object, bp) || !breakpoints.includes(bp)) {
        continue;
      }

      const value = object[bp];

      // Don't generate a custom property if the value is not arbitrary
      if (propValues.includes(value)) {
        continue;
      }

      for (const customProperty of customProperties) {
        const bpProperty = bp === 'initial' ? customProperty : `${customProperty}-${bp}`;

        styles = {
          [bpProperty]: value,
          ...styles,
        };
      }
    }
  }

  for (const key in styles) {
    const value = styles[key];
    if (value !== undefined) {
      styles[key] = parseValue(value);
    }
  }

  return styles;
}

export { getResponsiveStyles, getResponsiveCustomProperties, getResponsiveClassNames };


================================================
File: packages/radix-ui-themes/src/helpers/get-subtree.ts
================================================
import * as React from 'react';

/**
 * This is a helper function that is used when a component supports `asChild`
 * using the `Slot` component but its implementation contains nested DOM elements.
 *
 * Using it ensures if a consumer uses the `asChild` prop, the elements are in
 * correct order in the DOM, adopting the intended consumer `children`.
 */
export function getSubtree(
  options: { asChild: boolean | undefined; children: React.ReactNode },
  content: React.ReactNode | ((children: React.ReactNode) => React.ReactNode)
) {
  const { asChild, children } = options;
  if (!asChild) return typeof content === 'function' ? content(children) : content;

  const firstChild = React.Children.only(children) as React.ReactElement;
  return React.cloneElement(firstChild, {
    // @ts-expect-error
    children: typeof content === 'function' ? content(firstChild.props.children) : content,
  });
}


================================================
File: packages/radix-ui-themes/src/helpers/has-own-property.ts
================================================
/** A util to check whether the object has a key, while inferring the correct key type */
function hasOwnProperty<K extends string | number | symbol>(
  obj: Record<K, unknown>,
  key: string | number | symbol
): key is K {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

export { hasOwnProperty };


================================================
File: packages/radix-ui-themes/src/helpers/index.ts
================================================
export * from './component-props.js';
export * from './extract-margin-props.js';
export * from './extract-props.js';
export * from './get-margin-styles.js';
export * from './get-matching-gray-color.js';
export * from './get-responsive-styles.js';
export * from './get-subtree.js';
export * from './has-own-property.js';
export * from './input-attributes.js';
export * from './is-responsive-object.js';
export * from './map-prop-values.js';
export * from './merge-styles.js';
export * from './require-react-element.js';


================================================
File: packages/radix-ui-themes/src/helpers/inert.ts
================================================
import * as React from 'react';

// "inert" works differently between React versions
// https://github.com/facebook/react/pull/24730
export const inert = parseFloat(React.version) >= 19 || '';


================================================
File: packages/radix-ui-themes/src/helpers/input-attributes.ts
================================================
// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attributes

type InputAttributes =
  | 'accept'
  | 'alt'
  | 'autocapitalize'
  | 'autocomplete'
  | 'capture'
  | 'checked'
  | 'defaultChecked'
  | 'defaultValue'
  | 'disabled'
  | 'form'
  | 'formaction'
  | 'formenctype'
  | 'formmethod'
  | 'formnovalidate'
  | 'formtarget'
  | 'height'
  | 'list'
  | 'max'
  | 'maxlength'
  | 'min'
  | 'minlength'
  | 'multiple'
  | 'name'
  | 'pattern'
  | 'placeholder'
  | 'popovertarget'
  | 'popovertargetaction'
  | 'readonly'
  | 'required'
  | 'size'
  | 'src'
  | 'step'
  | 'type'
  | 'value'
  | 'width';

// Includes all text-like inputs, e.g. text, email, password, number, date, etc.
type InputTextualAttributes =
  | 'autoCapitalize'
  | 'autoComplete'
  | 'defaultValue'
  | 'disabled'
  | 'form'
  | 'list'
  | 'maxLength'
  | 'minLength'
  | 'min'
  | 'multiple'
  | 'max'
  | 'name'
  | 'pattern'
  | 'placeholder'
  | 'readOnly'
  | 'required'
  | 'size'
  | 'step'
  | 'type'
  | 'value';

type InputRadioAttributes =
  | 'checked'
  | 'defaultChecked'
  | 'defaultValue'
  | 'disabled'
  | 'form'
  | 'name'
  | 'required'
  | 'value';

type NotInputRadioAttributes = Exclude<InputAttributes, InputRadioAttributes>;
type NotInputTextualAttributes = Exclude<InputAttributes, InputTextualAttributes>;

export type {
  InputAttributes,
  InputRadioAttributes,
  InputTextualAttributes,
  NotInputRadioAttributes,
  NotInputTextualAttributes,
};


================================================
File: packages/radix-ui-themes/src/helpers/is-responsive-object.ts
================================================
import { breakpoints } from '../props/prop-def.js';

import type { Responsive, Breakpoint } from '../props/prop-def.js';

export function isResponsiveObject<Value extends string>(
  obj: Responsive<Value | Omit<string, Value>> | undefined
): obj is Record<Breakpoint, string> {
  return (
    typeof obj === 'object' &&
    Object.keys(obj).some((key) => (breakpoints as readonly string[]).includes(key))
  );
}


================================================
File: packages/radix-ui-themes/src/helpers/map-prop-values.ts
================================================
import type { baseButtonPropDefs } from '../components/_internal/base-button.props.js';
import type { calloutRootPropDefs } from '../components/callout.props.js';
import type { spinnerPropDefs } from '../components/spinner.props.js';
import type { textPropDefs } from '../components/text.props.js';
import type { Responsive } from '../props/prop-def.js';

function mapResponsiveProp<Input extends string, Output>(
  propValue: Responsive<Input> | undefined,
  mapValue: (value: Input) => Output
): Responsive<Output> | undefined {
  if (propValue === undefined) return undefined;
  if (typeof propValue === 'string') {
    return mapValue(propValue);
  }
  return Object.fromEntries(
    Object.entries(propValue).map(([key, value]) => [key, mapValue(value)])
  );
}

function mapCalloutSizeToTextSize(
  size: (typeof calloutRootPropDefs.size.values)[number]
): (typeof textPropDefs.size.values)[number] {
  return size === '3' ? '3' : '2';
}

function mapButtonSizeToSpinnerSize(
  size: (typeof baseButtonPropDefs.size.values)[number]
): (typeof spinnerPropDefs.size.values)[number] {
  switch (size) {
    case '1':
      return '1';
    case '2':
    case '3':
      return '2';
    case '4':
      return '3';
  }
}

export { mapResponsiveProp, mapCalloutSizeToTextSize, mapButtonSizeToSpinnerSize };


================================================
File: packages/radix-ui-themes/src/helpers/merge-styles.ts
================================================
type InlineStyle =
  | React.CSSProperties
  | Record<string, string | number | null | undefined>
  | undefined;

// Merges CSS styles like `classNames` merges CSS classes
export function mergeStyles(...styles: Array<InlineStyle>): InlineStyle {
  let result: InlineStyle = {};

  for (const style of styles) {
    if (style) {
      result = { ...result, ...style };
    }
  }

  return Object.keys(result).length ? result : undefined;
}


================================================
File: packages/radix-ui-themes/src/helpers/require-react-element.ts
================================================
import * as React from 'react';

/** A function that throws an error when a value isn't a valid React Element, otherwise returns the value */
export const requireReactElement = <T extends React.ReactNode>(children: T): T => {
  const isReactElement = React.isValidElement(children);

  if (!isReactElement) {
    throw Error(
      `Expected a single React Element child, but got: ${React.Children.toArray(children)
        .map((child) =>
          typeof child === 'object' && 'type' in child && typeof child.type === 'string'
            ? child.type
            : typeof child
        )
        .join(', ')}`
    );
  }

  return children;
};


================================================
File: packages/radix-ui-themes/src/props/as-child.prop.ts
================================================
import type { PropDef } from './prop-def.js';

const asChildPropDef = {
  /**
   * Composes the component into its immediate child instead of rendering its own HTML element.
   * You’ll have to provide a single React Element child.
   */
  asChild: {
    type: 'boolean',
  },
} satisfies {
  asChild: PropDef<boolean>;
};

export { asChildPropDef };


================================================
File: packages/radix-ui-themes/src/props/color.prop.ts
================================================
import type { PropDef } from './prop-def.js';

// prettier-ignore
const accentColors = ['gray', 'gold', 'bronze', 'brown', 'yellow', 'amber', 'orange', 'tomato', 'red', 'ruby', 'crimson', 'pink', 'plum', 'purple', 'violet', 'iris', 'indigo', 'blue', 'cyan', 'teal', 'jade', 'green', 'grass', 'lime', 'mint', 'sky'] as const;

const grayColors = ['auto', 'gray', 'mauve', 'slate', 'sage', 'olive', 'sand'] as const;

const colorPropDef = {
  color: {
    type: 'enum',
    values: accentColors,
    default: undefined as (typeof accentColors)[number] | undefined,
  },
} satisfies {
  color: PropDef<(typeof accentColors)[number]>;
};

// 1. When used on components that compose Text, sets the color of the text to the current accent.
// 2. Defines accent color for descendant text components with `highContrast={true}`.
const accentColorPropDef = {
  color: {
    type: 'enum',
    values: accentColors,
    default: '' as (typeof accentColors)[number],
  },
} satisfies {
  color: PropDef<(typeof accentColors)[number]>;
};

export {
  accentColorPropDef,
  colorPropDef,
  //
  accentColors,
  grayColors,
};


================================================
File: packages/radix-ui-themes/src/props/gap.props.ts
================================================
import type { PropDef } from './prop-def.js';

const gapValues = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] as const;

const gapPropDefs = {
  /**
   * Sets the CSS **gap** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * gap="4"
   * gap="20px"
   * gap={{ sm: '2', lg: '3em' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/gap
   */
  gap: {
    type: 'enum | string',
    className: 'rt-r-gap',
    customProperties: ['--gap'],
    values: gapValues,
    responsive: true,
  },
  /**
   * Sets the CSS **row-gap** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * gapX="4"
   * gapX="20px"
   * gapX={{ sm: '2', lg: '3em' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap
   */
  gapX: {
    type: 'enum | string',
    className: 'rt-r-cg',
    customProperties: ['--column-gap'],
    values: gapValues,
    responsive: true,
  },
  /**
   * Sets the CSS **column-gap** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * gapY="4"
   * gapY="20px"
   * gapY={{ sm: '2', lg: '3em' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap
   */
  gapY: {
    type: 'enum | string',
    className: 'rt-r-rg',
    customProperties: ['--row-gap'],
    values: gapValues,
    responsive: true,
  },
} satisfies {
  gap: PropDef<(typeof gapValues)[number]>;
  gapX: PropDef<(typeof gapValues)[number]>;
  gapY: PropDef<(typeof gapValues)[number]>;
};

export { gapPropDefs };


================================================
File: packages/radix-ui-themes/src/props/height.props.ts
================================================
import type { PropDef, GetPropDefTypes } from './prop-def.js';

const heightPropDefs = {
  /**
   * Sets the CSS **height** property.
   * Supports CSS strings and responsive objects.
   *
   * @example
   * height="100px"
   * height={{ md: '100vh', xl: '600px' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/height
   */
  height: {
    type: 'string',
    className: 'rt-r-h',
    customProperties: ['--height'],
    responsive: true,
  },
  /**
   * Sets the CSS **min-height** property.
   * Supports CSS strings and responsive objects.
   *
   * @example
   * minHeight="100px"
   * minHeight={{ md: '100vh', xl: '600px' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/min-height
   */
  minHeight: {
    type: 'string',
    className: 'rt-r-min-h',
    customProperties: ['--min-height'],
    responsive: true,
  },
  /**
   * Sets the CSS **max-height** property.
   * Supports CSS strings and responsive objects.
   *
   * @example
   * maxHeight="100px"
   * maxHeight={{ md: '100vh', xl: '600px' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/max-height
   */
  maxHeight: {
    type: 'string',
    className: 'rt-r-max-h',
    customProperties: ['--max-height'],
    responsive: true,
  },
} satisfies {
  height: PropDef<string>;
  minHeight: PropDef<string>;
  maxHeight: PropDef<string>;
};

type HeightProps = GetPropDefTypes<typeof heightPropDefs>;

export { heightPropDefs };
export type { HeightProps };


================================================
File: packages/radix-ui-themes/src/props/high-contrast.prop.ts
================================================
import type { PropDef } from './prop-def.js';

const highContrastPropDef = {
  highContrast: {
    type: 'boolean',
    className: 'rt-high-contrast',
    default: undefined,
  },
} satisfies {
  highContrast: PropDef<boolean>;
};

export { highContrastPropDef };


================================================
File: packages/radix-ui-themes/src/props/index.ts
================================================
// Prop definition
export * from './prop-def.js';

// Individual props
export * from './as-child.prop.js';
export * from './color.prop.js';
export * from './gap.props.js';
export * from './height.props.js';
export * from './high-contrast.prop.js';
export * from './layout.props.js';
export * from './leading-trim.prop.js';
export * from './margin.props.js';
export * from './padding.props.js';
export * from './radius.prop.js';
export * from './text-align.prop.js';
export * from './text-wrap.prop.js';
export * from './truncate.prop.js';
export * from './weight.prop.js';
export * from './width.props.js';

// Component props
export * from '../components/alert-dialog.props.js';
export * from '../components/avatar.props.js';
export * from '../components/badge.props.js';
export * from '../components/blockquote.props.js';
export * from '../components/box.props.js';
export * from '../components/button.props.js';
export * from '../components/callout.props.js';
export * from '../components/card.props.js';
export * from '../components/checkbox-cards.props.js';
export * from '../components/checkbox-group.props.js';
export * from '../components/checkbox.props.js';
export * from '../components/code.props.js';
export * from '../components/container.props.js';
export * from '../components/context-menu.props.js';
export * from '../components/data-list.props.js';
export * from '../components/dialog.props.js';
export * from '../components/dropdown-menu.props.js';
export * from '../components/em.props.js';
export * from '../components/flex.props.js';
export * from '../components/grid.props.js';
export * from '../components/heading.props.js';
export * from '../components/hover-card.props.js';
export * from '../components/icon-button.props.js';
export * from '../components/inset.props.js';
export * from '../components/kbd.props.js';
export * from '../components/link.props.js';
export * from '../components/popover.props.js';
export * from '../components/progress.props.js';
export * from '../components/quote.props.js';
export * from '../components/radio.props.js';
export * from '../components/radio-cards.props.js';
export * from '../components/radio-group.props.js';
export * from '../components/scroll-area.props.js';
export * from '../components/section.props.js';
export * from '../components/segmented-control.props.js';
export * from '../components/select.props.js';
export * from '../components/separator.props.js';
export * from '../components/skeleton.props.js';
export * from '../components/slider.props.js';
export * from '../components/spinner.props.js';
export * from '../components/strong.props.js';
export * from '../components/switch.props.js';
export * from '../components/tab-nav.props.js';
export * from '../components/table.props.js';
export * from '../components/tabs.props.js';
export * from '../components/text-area.props.js';
export * from '../components/text-field.props.js';
export * from '../components/text.props.js';
export * from '../components/theme.props.js';
export * from '../components/tooltip.props.js';


================================================
File: packages/radix-ui-themes/src/props/layout.props.ts
================================================
import { paddingPropDefs } from './padding.props.js';
import { heightPropDefs } from './height.props.js';
import { widthPropDefs } from './width.props.js';

import type { PropDef, GetPropDefTypes } from './prop-def.js';

const overflowValues = ['visible', 'hidden', 'clip', 'scroll', 'auto'] as const;
const positionValues = ['static', 'relative', 'absolute', 'fixed', 'sticky'] as const;
// prettier-ignore
const positionEdgeValues = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-1', '-2', '-3', '-4', '-5', '-6', '-7', '-8', '-9'] as const;
const flexShrinkValues = ['0', '1'] as const;
const flexGrowValues = ['0', '1'] as const;

const layoutPropDefs = {
  ...paddingPropDefs,
  ...widthPropDefs,
  ...heightPropDefs,
  /**
   * Sets the CSS **position** property.
   * Supports the corresponding CSS values and responsive objects.
   *
   * @example
   * position="absolute"
   * position={{ sm: 'absolute', lg: 'sticky' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/position
   */
  position: {
    type: 'enum',
    className: 'rt-r-position',
    values: positionValues,
    responsive: true,
  },
  /**
   * Sets the CSS **inset** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * inset="4"
   * inset="100px"
   * inset={{ sm: '0', lg: '50%' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/inset
   */
  inset: {
    type: 'enum | string',
    className: 'rt-r-inset',
    customProperties: ['--inset'],
    values: positionEdgeValues,
    responsive: true,
  },
  /**
   * Sets the CSS **top** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * top="4"
   * top="100px"
   * top={{ sm: '0', lg: '50%' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/top
   */
  top: {
    type: 'enum | string',
    className: 'rt-r-top',
    customProperties: ['--top'],
    values: positionEdgeValues,
    responsive: true,
  },
  /**
   * Sets the CSS **right** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * right="4"
   * right="100px"
   * right={{ sm: '0', lg: '50%' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/right
   */
  right: {
    type: 'enum | string',
    className: 'rt-r-right',
    customProperties: ['--right'],
    values: positionEdgeValues,
    responsive: true,
  },
  /**
   * Sets the CSS **bottom** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * bottom="4"
   * bottom="100px"
   * bottom={{ sm: '0', lg: '50%' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/bottom
   */
  bottom: {
    type: 'enum | string',
    className: 'rt-r-bottom',
    customProperties: ['--bottom'],
    values: positionEdgeValues,
    responsive: true,
  },
  /**
   * Sets the CSS **left** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * left="4"
   * left="100px"
   * left={{ sm: '0', lg: '50%' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/left
   */
  left: {
    type: 'enum | string',
    className: 'rt-r-left',
    customProperties: ['--left'],
    values: positionEdgeValues,
    responsive: true,
  },
  /**
   * Sets the CSS **overflow** property.
   * Supports the corresponding CSS values and responsive objects.
   *
   * @example
   * overflow="hidden"
   * overflow={{ sm: 'hidden', lg: 'visible' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/overflow
   */
  overflow: {
    type: 'enum',
    className: 'rt-r-overflow',
    values: overflowValues,
    responsive: true,
  },
  /**
   * Sets the CSS **overflow-x** property.
   * Supports the corresponding CSS values and responsive objects.
   *
   * @example
   * overflowX="hidden"
   * overflowX={{ sm: 'hidden', md: 'visible' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/overflow
   */
  overflowX: {
    type: 'enum',
    className: 'rt-r-ox',
    values: overflowValues,
    responsive: true,
  },
  /**
   * Sets the CSS **overflow-y** property.
   * Supports the corresponding CSS values and responsive objects.
   *
   * @example
   * overflowY="hidden"
   * overflowY={{ sm: 'hidden', md: 'visible' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/overflow
   */
  overflowY: {
    type: 'enum',
    className: 'rt-r-oy',
    values: overflowValues,
    responsive: true,
  },
  /**
   * Sets the CSS **flex-basis** property.
   * Supports CSS strings and responsive objects.
   *
   * @example
   * flexBasis="0"
   * flexBasis="100%"
   * flexBasis={{ sm: '200px', lg: 'auto' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis
   */
  flexBasis: {
    type: 'string',
    className: 'rt-r-fb',
    customProperties: ['--flex-basis'],
    responsive: true,
  },
  /**
   * Sets the CSS **flex-shrink** property.
   * Supports CSS strings and responsive objects.
   *
   * @example
   * flexShrink="0"
   * flexShrink="1"
   * flexShrink={{ sm: '0', lg: '1' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink
   */
  flexShrink: {
    type: 'enum | string',
    className: 'rt-r-fs',
    customProperties: ['--flex-shrink'],
    values: flexShrinkValues,
    responsive: true,
  },
  /**
   * Sets the CSS **flex-grow** property.
   * Supports CSS strings and responsive objects.
   *
   * @example
   * flexGrow="0"
   * flexGrow="1"
   * flexGrow={{ sm: '0', lg: '1' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow
   */
  flexGrow: {
    type: 'enum | string',
    className: 'rt-r-fg',
    customProperties: ['--flex-grow'],
    values: flexGrowValues,
    responsive: true,
  },
  /**
   * Sets the CSS **grid-area** property.
   * Supports CSS strings and responsive objects.
   *
   * @example
   * gridArea="header"
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area
   */
  gridArea: {
    type: 'string',
    className: 'rt-r-ga',
    customProperties: ['--grid-area'],
    responsive: true,
  },
  /**
   * Sets the CSS **grid-column** property.
   * Supports CSS strings and responsive objects.
   *
   * @example
   * gridColumn="1"
   * gridColumn="1 / -1"
   * gridColumn={{ sm: '1 / 3', lg: 'span 3' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column
   */
  gridColumn: {
    type: 'string',
    className: 'rt-r-gc',
    customProperties: ['--grid-column'],
    responsive: true,
  },
  /**
   * Sets the CSS **grid-column-start** property.
   * Supports CSS strings and responsive objects.
   *
   * @example
   * gridColumnStart="1"
   * gridColumnStart="auto"
   * gridColumnStart={{ sm: '2', lg: 'span 3' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start
   */
  gridColumnStart: {
    type: 'string',
    className: 'rt-r-gcs',
    customProperties: ['--grid-column-start'],
    responsive: true,
  },
  /**
   * Sets the CSS **grid-column-end** property.
   * Supports CSS strings and responsive objects.
   *
   * @example
   * gridColumnEnd="1"
   * gridColumnEnd="auto"
   * gridColumnEnd={{ sm: '2', lg: 'span 3' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end
   */
  gridColumnEnd: {
    type: 'string',
    className: 'rt-r-gce',
    customProperties: ['--grid-column-end'],
    responsive: true,
  },
  /**
   * Sets the CSS **grid-row** property.
   * Supports CSS strings and responsive objects.
   *
   * @example
   * gridRow="1"
   * gridRow="auto"
   * gridRow={{ sm: '2', lg: 'span 3' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row
   */
  gridRow: {
    type: 'string',
    className: 'rt-r-gr',
    customProperties: ['--grid-row'],
    responsive: true,
  },
  /**
   * Sets the CSS **grid-row-start** property.
   * Supports CSS strings and responsive objects.
   *
   * @example
   * gridRowStart="1"
   * gridRowStart="auto"
   * gridRowStart={{ sm: '2', lg: 'span 3' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start
   */
  gridRowStart: {
    type: 'string',
    className: 'rt-r-grs',
    customProperties: ['--grid-row-start'],
    responsive: true,
  },
  /**
   * Sets the CSS **grid-row-end** property.
   * Supports CSS strings and responsive objects.
   *
   * @example
   * gridRowEnd="1"
   * gridRowEnd="auto"
   * gridRowEnd={{ sm: '2', lg: 'span 3' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end
   */
  gridRowEnd: {
    type: 'string',
    className: 'rt-r-gre',
    customProperties: ['--grid-row-end'],
    responsive: true,
  },
} satisfies {
  position: PropDef<(typeof positionValues)[number]>;
  inset: PropDef<(typeof positionEdgeValues)[number]>;
  top: PropDef<(typeof positionEdgeValues)[number]>;
  right: PropDef<(typeof positionEdgeValues)[number]>;
  bottom: PropDef<(typeof positionEdgeValues)[number]>;
  left: PropDef<(typeof positionEdgeValues)[number]>;
  overflow: PropDef<(typeof overflowValues)[number]>;
  overflowX: PropDef<(typeof overflowValues)[number]>;
  overflowY: PropDef<(typeof overflowValues)[number]>;
  flexBasis: PropDef<string>;
  flexShrink: PropDef<(typeof flexShrinkValues)[number]>;
  flexGrow: PropDef<(typeof flexGrowValues)[number]>;
  gridColumn: PropDef<string>;
  gridColumnStart: PropDef<string>;
  gridColumnEnd: PropDef<string>;
  gridRow: PropDef<string>;
  gridRowStart: PropDef<string>;
  gridRowEnd: PropDef<string>;
  gridArea: PropDef<string>;
};

// Use all of the imported prop defs to ensure that JSDoc works
type LayoutProps = GetPropDefTypes<
  typeof paddingPropDefs & typeof widthPropDefs & typeof heightPropDefs & typeof layoutPropDefs
>;

export { layoutPropDefs };
export type { LayoutProps };


================================================
File: packages/radix-ui-themes/src/props/leading-trim.prop.ts
================================================
import type { PropDef } from './prop-def.js';

const leadingTrimValues = ['normal', 'start', 'end', 'both'] as const;

const leadingTrimPropDef = {
  trim: {
    type: 'enum',
    className: 'rt-r-lt',
    values: leadingTrimValues,
    responsive: true,
  },
} satisfies {
  trim: PropDef<(typeof leadingTrimValues)[number]>;
};

export { leadingTrimPropDef };


================================================
File: packages/radix-ui-themes/src/props/margin.props.ts
================================================
import type { PropDef, GetPropDefTypes } from './prop-def.js';

// prettier-ignore
const marginValues = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-1', '-2', '-3', '-4', '-5', '-6', '-7', '-8', '-9'] as const;

const marginPropDefs = {
  /**
   * Sets the CSS **margin** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * m="4"
   * m="100px"
   * m={{ sm: '6', lg: '9' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/margin
   */
  m: {
    type: 'enum | string',
    values: marginValues,
    responsive: true,
    className: 'rt-r-m',
    customProperties: ['--m'],
  },
  /**
   * Sets the CSS **margin-left** and **margin-right** properties.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * mx="4"
   * mx="100px"
   * mx={{ sm: '6', lg: '9' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left
   * https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right
   */
  mx: {
    type: 'enum | string',
    values: marginValues,
    responsive: true,
    className: 'rt-r-mx',
    customProperties: ['--ml', '--mr'],
  },
  /**
   * Sets the CSS **margin-top** and **margin-bottom** properties.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * my="4"
   * my="100px"
   * my={{ sm: '6', lg: '9' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top
   * https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom
   */
  my: {
    type: 'enum | string',
    values: marginValues,
    responsive: true,
    className: 'rt-r-my',
    customProperties: ['--mt', '--mb'],
  },
  /**
   * Sets the CSS **margin-top** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * mt="4"
   * mt="100px"
   * mt={{ sm: '6', lg: '9' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top
   */
  mt: {
    type: 'enum | string',
    values: marginValues,
    responsive: true,
    className: 'rt-r-mt',
    customProperties: ['--mt'],
  },
  /**
   * Sets the CSS **margin-right** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * mr="4"
   * mr="100px"
   * mr={{ sm: '6', lg: '9' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right
   */
  mr: {
    type: 'enum | string',
    values: marginValues,
    responsive: true,
    className: 'rt-r-mr',
    customProperties: ['--mr'],
  },
  /**
   * Sets the CSS **margin-bottom** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * mb="4"
   * mb="100px"
   * mb={{ sm: '6', lg: '9' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom
   */
  mb: {
    type: 'enum | string',
    values: marginValues,
    responsive: true,
    className: 'rt-r-mb',
    customProperties: ['--mb'],
  },
  /**
   * Sets the CSS **margin-left** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * ml="4"
   * ml="100px"
   * ml={{ sm: '6', lg: '9' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left
   */
  ml: {
    type: 'enum | string',
    values: marginValues,
    responsive: true,
    className: 'rt-r-ml',
    customProperties: ['--ml'],
  },
} satisfies {
  m: PropDef<(typeof marginValues)[number]>;
  mx: PropDef<(typeof marginValues)[number]>;
  my: PropDef<(typeof marginValues)[number]>;
  mt: PropDef<(typeof marginValues)[number]>;
  mr: PropDef<(typeof marginValues)[number]>;
  mb: PropDef<(typeof marginValues)[number]>;
  ml: PropDef<(typeof marginValues)[number]>;
};

type MarginProps = GetPropDefTypes<typeof marginPropDefs>;

export { marginPropDefs };
export type { MarginProps };


================================================
File: packages/radix-ui-themes/src/props/padding.props.ts
================================================
import type { GetPropDefTypes, PropDef } from './prop-def.js';

const paddingValues = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] as const;

const paddingPropDefs = {
  /**
   * Sets the CSS **padding** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * p="4"
   * p="100px"
   * p={{ sm: '6', lg: '9' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/padding
   */
  p: {
    type: 'enum | string',
    className: 'rt-r-p',
    customProperties: ['--p'],
    values: paddingValues,
    responsive: true,
  },
  /**
   * Sets the CSS **padding-left** and **padding-right** properties.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * px="4"
   * px="100px"
   * px={{ sm: '6', lg: '9' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left
   * https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right
   */
  px: {
    type: 'enum | string',
    className: 'rt-r-px',
    customProperties: ['--pl', '--pr'],
    values: paddingValues,
    responsive: true,
  },
  /**
   * Sets the CSS **padding-top** and **padding-bottom** properties.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * py="4"
   * py="100px"
   * py={{ sm: '6', lg: '9' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top
   * https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom
   */
  py: {
    type: 'enum | string',
    className: 'rt-r-py',
    customProperties: ['--pt', '--pb'],
    values: paddingValues,
    responsive: true,
  },
  /**
   * Sets the CSS **padding-top** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * pt="4"
   * pt="100px"
   * pt={{ sm: '6', lg: '9' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top
   */
  pt: {
    type: 'enum | string',
    className: 'rt-r-pt',
    customProperties: ['--pt'],
    values: paddingValues,
    responsive: true,
  },
  /**
   * Sets the CSS **padding-right** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * pr="4"
   * pr="100px"
   * pr={{ sm: '6', lg: '9' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right
   */
  pr: {
    type: 'enum | string',
    className: 'rt-r-pr',
    customProperties: ['--pr'],
    values: paddingValues,
    responsive: true,
  },
  /**
   * Sets the CSS **padding-bottom** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * pb="4"
   * pb="100px"
   * pb={{ sm: '6', lg: '9' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom
   */
  pb: {
    type: 'enum | string',
    className: 'rt-r-pb',
    customProperties: ['--pb'],
    values: paddingValues,
    responsive: true,
  },
  /**
   * Sets the CSS **padding-left** property.
   * Supports space scale values, CSS strings, and responsive objects.
   *
   * @example
   * pl="4"
   * pl="100px"
   * pl={{ sm: '6', lg: '9' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left
   */
  pl: {
    type: 'enum | string',
    className: 'rt-r-pl',
    customProperties: ['--pl'],
    values: paddingValues,
    responsive: true,
  },
} satisfies {
  p: PropDef<(typeof paddingValues)[number]>;
  px: PropDef<(typeof paddingValues)[number]>;
  py: PropDef<(typeof paddingValues)[number]>;
  pt: PropDef<(typeof paddingValues)[number]>;
  pr: PropDef<(typeof paddingValues)[number]>;
  pb: PropDef<(typeof paddingValues)[number]>;
  pl: PropDef<(typeof paddingValues)[number]>;
};

type PaddingProps = GetPropDefTypes<typeof paddingPropDefs>;

export { paddingPropDefs };
export type { PaddingProps };


================================================
File: packages/radix-ui-themes/src/props/prop-def.ts
================================================
import type React from 'react';

// Creates a union type of string literals with strings, but retains intellisense for the literals.
// Union<string, 'foo' | 'bar'> => string | Omit<string, 'foo' | 'bar'>
type Union<S = string, T extends string | number = string> = T | Omit<S, T>;

const breakpoints = ['initial', 'xs', 'sm', 'md', 'lg', 'xl'] as const;
type Breakpoint = (typeof breakpoints)[number];
type Responsive<T> = T | Partial<Record<Breakpoint, T>>;

type BooleanPropDef = {
  type: 'boolean';
  default?: boolean;
  required?: boolean;
  className?: string;
};
type StringPropDef = {
  type: 'string';
  default?: string;
  required?: boolean;
};
type ReactNodePropDef = {
  type: 'ReactNode';
  default?: React.ReactNode;
  required?: boolean;
};
type EnumPropDef<T> = {
  type: 'enum';
  values: readonly T[];
  default?: T;
  required?: boolean;
};
type EnumOrStringPropDef<T> = {
  type: 'enum | string';
  values: readonly T[];
  default?: T | string;
  required?: boolean;
};

type NonStylingPropDef = {
  className?: never;
  customProperties?: never;
  parseValue?: never;
};

type StylingPropDef = {
  className: string;
  parseValue?: (value: string) => string | undefined;
};

type ArbitraryStylingPropDef = {
  className: string;
  customProperties: `--${string}`[];
  parseValue?: (value: string) => string | undefined;
};

type RegularPropDef<T> =
  | ReactNodePropDef
  | BooleanPropDef
  | (StringPropDef & ArbitraryStylingPropDef)
  | (StringPropDef & NonStylingPropDef)
  | (EnumPropDef<T> & StylingPropDef)
  | (EnumPropDef<T> & NonStylingPropDef)
  | (EnumOrStringPropDef<T> & ArbitraryStylingPropDef)
  | (EnumOrStringPropDef<T> & NonStylingPropDef);
type ResponsivePropDef<T = any> = RegularPropDef<T> & { responsive: true };
type PropDef<T = any> = RegularPropDef<T> | ResponsivePropDef<T>;

// prettier-ignore
type GetPropDefType<Def> =
    Def extends BooleanPropDef ? (Def extends ResponsivePropDef ? Responsive<boolean> : boolean)
  : Def extends StringPropDef ? (Def extends ResponsivePropDef ? Responsive<string> : string)
  : Def extends ReactNodePropDef ? (Def extends ResponsivePropDef ? Responsive<React.ReactNode> : React.ReactNode)
  : Def extends EnumOrStringPropDef<infer Type> ?
    Def extends ResponsivePropDef<infer Type extends string> ? Responsive<Union<string, Type>> : Type
  : Def extends EnumPropDef<infer Type> ? (Def extends ResponsivePropDef<infer Type> ? Responsive<Type> : Type)
  : never;

type GetPropDefTypes<P> = {
  [K in keyof P]?: GetPropDefType<P[K]>;
};

export { breakpoints };
export type {
  PropDef,
  GetPropDefTypes,
  ResponsivePropDef,
  //
  Breakpoint,
  Responsive,
  Union,
};


================================================
File: packages/radix-ui-themes/src/props/radius.prop.ts
================================================
import type { PropDef } from './prop-def.js';

const radii = ['none', 'small', 'medium', 'large', 'full'] as const;

const radiusPropDef = {
  radius: {
    type: 'enum',
    values: radii,
    default: undefined,
  },
} satisfies {
  radius: PropDef<(typeof radii)[number]>;
};

export { radiusPropDef, radii };


================================================
File: packages/radix-ui-themes/src/props/text-align.prop.ts
================================================
import type { PropDef } from './prop-def.js';

const textAlignValues = ['left', 'center', 'right'] as const;

const textAlignPropDef = {
  align: {
    type: 'enum',
    className: 'rt-r-ta',
    values: textAlignValues,
    responsive: true,
  },
} satisfies {
  align: PropDef<(typeof textAlignValues)[number]>;
};

export { textAlignPropDef };


================================================
File: packages/radix-ui-themes/src/props/text-wrap.prop.ts
================================================
import type { PropDef } from './prop-def.js';

const textWrapValues = ['wrap', 'nowrap', 'pretty', 'balance'] as const;

const textWrapPropDef = {
  wrap: {
    type: 'enum',
    className: 'rt-r-tw',
    values: textWrapValues,
    responsive: true,
  },
} satisfies {
  wrap: PropDef<(typeof textWrapValues)[number]>;
};

export { textWrapPropDef };


================================================
File: packages/radix-ui-themes/src/props/truncate.prop.ts
================================================
import type { PropDef } from './prop-def.js';

const truncatePropDef = {
  truncate: {
    type: 'boolean',
    className: 'rt-truncate',
  },
} satisfies {
  truncate: PropDef<boolean>;
};

export { truncatePropDef };


================================================
File: packages/radix-ui-themes/src/props/weight.prop.ts
================================================
import type { PropDef } from './prop-def.js';

const weights = ['light', 'regular', 'medium', 'bold'] as const;

const weightPropDef = {
  weight: {
    type: 'enum',
    className: 'rt-r-weight',
    values: weights,
    responsive: true,
  },
} satisfies {
  weight: PropDef<(typeof weights)[number]>;
};

export { weightPropDef };


================================================
File: packages/radix-ui-themes/src/props/width.props.ts
================================================
import type { GetPropDefTypes, PropDef } from './prop-def.js';

const widthPropDefs = {
  /**
   * Sets the CSS **width** property.
   * Supports CSS strings and responsive objects.
   *
   * @example
   * width="100px"
   * width={{ md: '100vw', xl: '1400px' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/width
   */
  width: {
    type: 'string',
    className: 'rt-r-w',
    customProperties: ['--width'],
    responsive: true,
  },
  /**
   * Sets the CSS **min-width** property.
   * Supports CSS strings and responsive objects.
   *
   * @example
   * minWidth="100px"
   * minWidth={{ md: '100vw', xl: '1400px' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/min-width
   */
  minWidth: {
    type: 'string',
    className: 'rt-r-min-w',
    customProperties: ['--min-width'],
    responsive: true,
  },
  /**
   * Sets the CSS **max-width** property.
   * Supports CSS strings and responsive objects.
   *
   * @example
   * maxWidth="100px"
   * maxWidth={{ md: '100vw', xl: '1400px' }}
   *
   * @link
   * https://developer.mozilla.org/en-US/docs/Web/CSS/max-width
   */
  maxWidth: {
    type: 'string',
    className: 'rt-r-max-w',
    customProperties: ['--max-width'],
    responsive: true,
  },
} satisfies {
  width: PropDef<string>;
  minWidth: PropDef<string>;
  maxWidth: PropDef<string>;
};

type WidthProps = GetPropDefTypes<typeof widthPropDefs>;

export { widthPropDefs };
export type { WidthProps };


================================================
File: packages/radix-ui-themes/src/styles/breakpoints.css
================================================
@custom-media --xs (min-width: 520px);
@custom-media --sm (min-width: 768px);
@custom-media --md (min-width: 1024px);
@custom-media --lg (min-width: 1280px);
@custom-media --xl (min-width: 1640px);


================================================
File: packages/radix-ui-themes/src/styles/index.css
================================================
@import './breakpoints.css';
@import './tokens/index.css';
@import '../components/index.css';
@import './utilities/index.css';


================================================
File: packages/radix-ui-themes/src/styles/layout.css
================================================
@import './tokens/layout.css';
@import '../components/layout.css';
@import './utilities/layout.css';


================================================
File: packages/radix-ui-themes/src/styles/tokens/base.css
================================================
@import './color.css';
@import './cursor.css';
@import './layout.css';
@import './radius.css';
@import './shadow.css';
@import './typography.css';


================================================
File: packages/radix-ui-themes/src/styles/tokens/color.css
================================================
@import '@radix-ui/colors/black-alpha.css';
@import '@radix-ui/colors/white-alpha.css';

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*           Semantic colors           */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

:where(.radix-themes) {
  --color-background: white;
  --color-overlay: var(--black-a6);
  --color-panel-solid: white;
  --color-panel-translucent: rgba(255, 255, 255, 0.7);
  --color-surface: rgba(255, 255, 255, 0.85);
}
:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  --color-background: var(--gray-1);
  --color-overlay: var(--black-a8);
  --color-panel-solid: var(--gray-2);
  --color-panel-translucent: var(--gray-a2);
  --color-surface: rgba(0, 0, 0, 0.25);
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*            Transparency             */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

/* Because Chrome is buggy with box-shadow transitions from "transparent" keyword and/or RGB color into P3 colors. */
/* Note: using `:where` here to guarantee that the P3 color will take over regardless of the output rule order. */
:where(.radix-themes) {
  --color-transparent: rgb(0 0 0 / 0);
}
@supports (color: color(display-p3 1 1 1)) {
  @media (color-gamut: p3) {
    .radix-themes {
      --color-transparent: color(display-p3 0 0 0 / 0);
    }
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*            Color scheme             */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

/*
 * Make sure that forced light/dark appearance also sets corresponding browser colors,
 * like input autofill color and body scrollbar
 */
.radix-themes:where(.light, .light-theme) {
  &,
  :root:where(:has(&[data-is-root-theme='true'])) {
    color-scheme: light;
  }
}
.radix-themes:where(.dark, .dark-theme) {
  &,
  :root:where(:has(&[data-is-root-theme='true'])) {
    color-scheme: dark;
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*   Focus, selection, and autofill    */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.radix-themes,
[data-accent-color]:where(:not([data-accent-color=''], [data-accent-color='gray'])) {
  --focus-1: var(--accent-1);
  --focus-2: var(--accent-2);
  --focus-3: var(--accent-3);
  --focus-4: var(--accent-4);
  --focus-5: var(--accent-5);
  --focus-6: var(--accent-6);
  --focus-7: var(--accent-7);
  --focus-8: var(--accent-8);
  --focus-9: var(--accent-9);
  --focus-10: var(--accent-10);
  --focus-11: var(--accent-11);
  --focus-12: var(--accent-12);

  --focus-a1: var(--accent-a1);
  --focus-a2: var(--accent-a2);
  --focus-a3: var(--accent-a3);
  --focus-a4: var(--accent-a4);
  --focus-a5: var(--accent-a5);
  --focus-a6: var(--accent-a6);
  --focus-a7: var(--accent-a7);
  --focus-a8: var(--accent-a8);
  --focus-a9: var(--accent-a9);
  --focus-a10: var(--accent-a10);
  --focus-a11: var(--accent-a11);
  --focus-a12: var(--accent-a12);
}

.radix-themes ::selection {
  background-color: var(--focus-a5);
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*         Background and text         */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.radix-themes {
  color: var(--gray-12);
  &:where([data-has-background='true']) {
    background-color: var(--color-background);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*          Panel background           */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.radix-themes {
  &:where([data-panel-background='solid']) {
    --color-panel: var(--color-panel-solid);
    --backdrop-filter-panel: none;
  }
  &:where([data-panel-background='translucent']) {
    --color-panel: var(--color-panel-translucent);
    --backdrop-filter-panel: blur(64px);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*            Accent color             */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

[data-accent-color='amber'] {
  --accent-1: var(--amber-1);
  --accent-2: var(--amber-2);
  --accent-3: var(--amber-3);
  --accent-4: var(--amber-4);
  --accent-5: var(--amber-5);
  --accent-6: var(--amber-6);
  --accent-7: var(--amber-7);
  --accent-8: var(--amber-8);
  --accent-9: var(--amber-9);
  --accent-10: var(--amber-10);
  --accent-11: var(--amber-11);
  --accent-12: var(--amber-12);

  --accent-a1: var(--amber-a1);
  --accent-a2: var(--amber-a2);
  --accent-a3: var(--amber-a3);
  --accent-a4: var(--amber-a4);
  --accent-a5: var(--amber-a5);
  --accent-a6: var(--amber-a6);
  --accent-a7: var(--amber-a7);
  --accent-a8: var(--amber-a8);
  --accent-a9: var(--amber-a9);
  --accent-a10: var(--amber-a10);
  --accent-a11: var(--amber-a11);
  --accent-a12: var(--amber-a12);

  --accent-contrast: var(--amber-contrast);
  --accent-surface: var(--amber-surface);
  --accent-indicator: var(--amber-indicator);
  --accent-track: var(--amber-track);
}

[data-accent-color='blue'] {
  --accent-1: var(--blue-1);
  --accent-2: var(--blue-2);
  --accent-3: var(--blue-3);
  --accent-4: var(--blue-4);
  --accent-5: var(--blue-5);
  --accent-6: var(--blue-6);
  --accent-7: var(--blue-7);
  --accent-8: var(--blue-8);
  --accent-9: var(--blue-9);
  --accent-10: var(--blue-10);
  --accent-11: var(--blue-11);
  --accent-12: var(--blue-12);

  --accent-a1: var(--blue-a1);
  --accent-a2: var(--blue-a2);
  --accent-a3: var(--blue-a3);
  --accent-a4: var(--blue-a4);
  --accent-a5: var(--blue-a5);
  --accent-a6: var(--blue-a6);
  --accent-a7: var(--blue-a7);
  --accent-a8: var(--blue-a8);
  --accent-a9: var(--blue-a9);
  --accent-a10: var(--blue-a10);
  --accent-a11: var(--blue-a11);
  --accent-a12: var(--blue-a12);

  --accent-contrast: var(--blue-contrast);
  --accent-surface: var(--blue-surface);
  --accent-indicator: var(--blue-indicator);
  --accent-track: var(--blue-track);
}

[data-accent-color='bronze'] {
  --accent-1: var(--bronze-1);
  --accent-2: var(--bronze-2);
  --accent-3: var(--bronze-3);
  --accent-4: var(--bronze-4);
  --accent-5: var(--bronze-5);
  --accent-6: var(--bronze-6);
  --accent-7: var(--bronze-7);
  --accent-8: var(--bronze-8);
  --accent-9: var(--bronze-9);
  --accent-10: var(--bronze-10);
  --accent-11: var(--bronze-11);
  --accent-12: var(--bronze-12);

  --accent-a1: var(--bronze-a1);
  --accent-a2: var(--bronze-a2);
  --accent-a3: var(--bronze-a3);
  --accent-a4: var(--bronze-a4);
  --accent-a5: var(--bronze-a5);
  --accent-a6: var(--bronze-a6);
  --accent-a7: var(--bronze-a7);
  --accent-a8: var(--bronze-a8);
  --accent-a9: var(--bronze-a9);
  --accent-a10: var(--bronze-a10);
  --accent-a11: var(--bronze-a11);
  --accent-a12: var(--bronze-a12);

  --accent-contrast: var(--bronze-contrast);
  --accent-surface: var(--bronze-surface);
  --accent-indicator: var(--bronze-indicator);
  --accent-track: var(--bronze-track);
}

[data-accent-color='brown'] {
  --accent-1: var(--brown-1);
  --accent-2: var(--brown-2);
  --accent-3: var(--brown-3);
  --accent-4: var(--brown-4);
  --accent-5: var(--brown-5);
  --accent-6: var(--brown-6);
  --accent-7: var(--brown-7);
  --accent-8: var(--brown-8);
  --accent-9: var(--brown-9);
  --accent-10: var(--brown-10);
  --accent-11: var(--brown-11);
  --accent-12: var(--brown-12);

  --accent-a1: var(--brown-a1);
  --accent-a2: var(--brown-a2);
  --accent-a3: var(--brown-a3);
  --accent-a4: var(--brown-a4);
  --accent-a5: var(--brown-a5);
  --accent-a6: var(--brown-a6);
  --accent-a7: var(--brown-a7);
  --accent-a8: var(--brown-a8);
  --accent-a9: var(--brown-a9);
  --accent-a10: var(--brown-a10);
  --accent-a11: var(--brown-a11);
  --accent-a12: var(--brown-a12);

  --accent-contrast: var(--brown-contrast);
  --accent-surface: var(--brown-surface);
  --accent-indicator: var(--brown-indicator);
  --accent-track: var(--brown-track);
}

[data-accent-color='crimson'] {
  --accent-1: var(--crimson-1);
  --accent-2: var(--crimson-2);
  --accent-3: var(--crimson-3);
  --accent-4: var(--crimson-4);
  --accent-5: var(--crimson-5);
  --accent-6: var(--crimson-6);
  --accent-7: var(--crimson-7);
  --accent-8: var(--crimson-8);
  --accent-9: var(--crimson-9);
  --accent-10: var(--crimson-10);
  --accent-11: var(--crimson-11);
  --accent-12: var(--crimson-12);

  --accent-a1: var(--crimson-a1);
  --accent-a2: var(--crimson-a2);
  --accent-a3: var(--crimson-a3);
  --accent-a4: var(--crimson-a4);
  --accent-a5: var(--crimson-a5);
  --accent-a6: var(--crimson-a6);
  --accent-a7: var(--crimson-a7);
  --accent-a8: var(--crimson-a8);
  --accent-a9: var(--crimson-a9);
  --accent-a10: var(--crimson-a10);
  --accent-a11: var(--crimson-a11);
  --accent-a12: var(--crimson-a12);

  --accent-contrast: var(--crimson-contrast);
  --accent-surface: var(--crimson-surface);
  --accent-indicator: var(--crimson-indicator);
  --accent-track: var(--crimson-track);
}

[data-accent-color='cyan'] {
  --accent-1: var(--cyan-1);
  --accent-2: var(--cyan-2);
  --accent-3: var(--cyan-3);
  --accent-4: var(--cyan-4);
  --accent-5: var(--cyan-5);
  --accent-6: var(--cyan-6);
  --accent-7: var(--cyan-7);
  --accent-8: var(--cyan-8);
  --accent-9: var(--cyan-9);
  --accent-10: var(--cyan-10);
  --accent-11: var(--cyan-11);
  --accent-12: var(--cyan-12);

  --accent-a1: var(--cyan-a1);
  --accent-a2: var(--cyan-a2);
  --accent-a3: var(--cyan-a3);
  --accent-a4: var(--cyan-a4);
  --accent-a5: var(--cyan-a5);
  --accent-a6: var(--cyan-a6);
  --accent-a7: var(--cyan-a7);
  --accent-a8: var(--cyan-a8);
  --accent-a9: var(--cyan-a9);
  --accent-a10: var(--cyan-a10);
  --accent-a11: var(--cyan-a11);
  --accent-a12: var(--cyan-a12);

  --accent-contrast: var(--cyan-contrast);
  --accent-surface: var(--cyan-surface);
  --accent-indicator: var(--cyan-indicator);
  --accent-track: var(--cyan-track);
}

[data-accent-color='gold'] {
  --accent-1: var(--gold-1);
  --accent-2: var(--gold-2);
  --accent-3: var(--gold-3);
  --accent-4: var(--gold-4);
  --accent-5: var(--gold-5);
  --accent-6: var(--gold-6);
  --accent-7: var(--gold-7);
  --accent-8: var(--gold-8);
  --accent-9: var(--gold-9);
  --accent-10: var(--gold-10);
  --accent-11: var(--gold-11);
  --accent-12: var(--gold-12);

  --accent-a1: var(--gold-a1);
  --accent-a2: var(--gold-a2);
  --accent-a3: var(--gold-a3);
  --accent-a4: var(--gold-a4);
  --accent-a5: var(--gold-a5);
  --accent-a6: var(--gold-a6);
  --accent-a7: var(--gold-a7);
  --accent-a8: var(--gold-a8);
  --accent-a9: var(--gold-a9);
  --accent-a10: var(--gold-a10);
  --accent-a11: var(--gold-a11);
  --accent-a12: var(--gold-a12);

  --accent-contrast: var(--gold-contrast);
  --accent-surface: var(--gold-surface);
  --accent-indicator: var(--gold-indicator);
  --accent-track: var(--gold-track);
}

[data-accent-color='grass'] {
  --accent-1: var(--grass-1);
  --accent-2: var(--grass-2);
  --accent-3: var(--grass-3);
  --accent-4: var(--grass-4);
  --accent-5: var(--grass-5);
  --accent-6: var(--grass-6);
  --accent-7: var(--grass-7);
  --accent-8: var(--grass-8);
  --accent-9: var(--grass-9);
  --accent-10: var(--grass-10);
  --accent-11: var(--grass-11);
  --accent-12: var(--grass-12);

  --accent-a1: var(--grass-a1);
  --accent-a2: var(--grass-a2);
  --accent-a3: var(--grass-a3);
  --accent-a4: var(--grass-a4);
  --accent-a5: var(--grass-a5);
  --accent-a6: var(--grass-a6);
  --accent-a7: var(--grass-a7);
  --accent-a8: var(--grass-a8);
  --accent-a9: var(--grass-a9);
  --accent-a10: var(--grass-a10);
  --accent-a11: var(--grass-a11);
  --accent-a12: var(--grass-a12);

  --accent-contrast: var(--grass-contrast);
  --accent-surface: var(--grass-surface);
  --accent-indicator: var(--grass-indicator);
  --accent-track: var(--grass-track);
}

[data-accent-color='gray'] {
  --accent-1: var(--gray-1);
  --accent-2: var(--gray-2);
  --accent-3: var(--gray-3);
  --accent-4: var(--gray-4);
  --accent-5: var(--gray-5);
  --accent-6: var(--gray-6);
  --accent-7: var(--gray-7);
  --accent-8: var(--gray-8);
  --accent-9: var(--gray-9);
  --accent-10: var(--gray-10);
  --accent-11: var(--gray-11);
  --accent-12: var(--gray-12);

  --accent-a1: var(--gray-a1);
  --accent-a2: var(--gray-a2);
  --accent-a3: var(--gray-a3);
  --accent-a4: var(--gray-a4);
  --accent-a5: var(--gray-a5);
  --accent-a6: var(--gray-a6);
  --accent-a7: var(--gray-a7);
  --accent-a8: var(--gray-a8);
  --accent-a9: var(--gray-a9);
  --accent-a10: var(--gray-a10);
  --accent-a11: var(--gray-a11);
  --accent-a12: var(--gray-a12);

  --accent-contrast: var(--gray-contrast);
  --accent-surface: var(--gray-surface);
  --accent-indicator: var(--gray-indicator);
  --accent-track: var(--gray-track);
}

[data-accent-color='green'] {
  --accent-1: var(--green-1);
  --accent-2: var(--green-2);
  --accent-3: var(--green-3);
  --accent-4: var(--green-4);
  --accent-5: var(--green-5);
  --accent-6: var(--green-6);
  --accent-7: var(--green-7);
  --accent-8: var(--green-8);
  --accent-9: var(--green-9);
  --accent-10: var(--green-10);
  --accent-11: var(--green-11);
  --accent-12: var(--green-12);

  --accent-a1: var(--green-a1);
  --accent-a2: var(--green-a2);
  --accent-a3: var(--green-a3);
  --accent-a4: var(--green-a4);
  --accent-a5: var(--green-a5);
  --accent-a6: var(--green-a6);
  --accent-a7: var(--green-a7);
  --accent-a8: var(--green-a8);
  --accent-a9: var(--green-a9);
  --accent-a10: var(--green-a10);
  --accent-a11: var(--green-a11);
  --accent-a12: var(--green-a12);

  --accent-contrast: var(--green-contrast);
  --accent-surface: var(--green-surface);
  --accent-indicator: var(--green-indicator);
  --accent-track: var(--green-track);
}

[data-accent-color='indigo'] {
  --accent-1: var(--indigo-1);
  --accent-2: var(--indigo-2);
  --accent-3: var(--indigo-3);
  --accent-4: var(--indigo-4);
  --accent-5: var(--indigo-5);
  --accent-6: var(--indigo-6);
  --accent-7: var(--indigo-7);
  --accent-8: var(--indigo-8);
  --accent-9: var(--indigo-9);
  --accent-10: var(--indigo-10);
  --accent-11: var(--indigo-11);
  --accent-12: var(--indigo-12);

  --accent-a1: var(--indigo-a1);
  --accent-a2: var(--indigo-a2);
  --accent-a3: var(--indigo-a3);
  --accent-a4: var(--indigo-a4);
  --accent-a5: var(--indigo-a5);
  --accent-a6: var(--indigo-a6);
  --accent-a7: var(--indigo-a7);
  --accent-a8: var(--indigo-a8);
  --accent-a9: var(--indigo-a9);
  --accent-a10: var(--indigo-a10);
  --accent-a11: var(--indigo-a11);
  --accent-a12: var(--indigo-a12);

  --accent-contrast: var(--indigo-contrast);
  --accent-surface: var(--indigo-surface);
  --accent-indicator: var(--indigo-indicator);
  --accent-track: var(--indigo-track);
}

[data-accent-color='iris'] {
  --accent-1: var(--iris-1);
  --accent-2: var(--iris-2);
  --accent-3: var(--iris-3);
  --accent-4: var(--iris-4);
  --accent-5: var(--iris-5);
  --accent-6: var(--iris-6);
  --accent-7: var(--iris-7);
  --accent-8: var(--iris-8);
  --accent-9: var(--iris-9);
  --accent-10: var(--iris-10);
  --accent-11: var(--iris-11);
  --accent-12: var(--iris-12);

  --accent-a1: var(--iris-a1);
  --accent-a2: var(--iris-a2);
  --accent-a3: var(--iris-a3);
  --accent-a4: var(--iris-a4);
  --accent-a5: var(--iris-a5);
  --accent-a6: var(--iris-a6);
  --accent-a7: var(--iris-a7);
  --accent-a8: var(--iris-a8);
  --accent-a9: var(--iris-a9);
  --accent-a10: var(--iris-a10);
  --accent-a11: var(--iris-a11);
  --accent-a12: var(--iris-a12);

  --accent-contrast: var(--iris-contrast);
  --accent-surface: var(--iris-surface);
  --accent-indicator: var(--iris-indicator);
  --accent-track: var(--iris-track);
}

[data-accent-color='jade'] {
  --accent-1: var(--jade-1);
  --accent-2: var(--jade-2);
  --accent-3: var(--jade-3);
  --accent-4: var(--jade-4);
  --accent-5: var(--jade-5);
  --accent-6: var(--jade-6);
  --accent-7: var(--jade-7);
  --accent-8: var(--jade-8);
  --accent-9: var(--jade-9);
  --accent-10: var(--jade-10);
  --accent-11: var(--jade-11);
  --accent-12: var(--jade-12);

  --accent-a1: var(--jade-a1);
  --accent-a2: var(--jade-a2);
  --accent-a3: var(--jade-a3);
  --accent-a4: var(--jade-a4);
  --accent-a5: var(--jade-a5);
  --accent-a6: var(--jade-a6);
  --accent-a7: var(--jade-a7);
  --accent-a8: var(--jade-a8);
  --accent-a9: var(--jade-a9);
  --accent-a10: var(--jade-a10);
  --accent-a11: var(--jade-a11);
  --accent-a12: var(--jade-a12);

  --accent-contrast: var(--jade-contrast);
  --accent-surface: var(--jade-surface);
  --accent-indicator: var(--jade-indicator);
  --accent-track: var(--jade-track);
}

[data-accent-color='lime'] {
  --accent-1: var(--lime-1);
  --accent-2: var(--lime-2);
  --accent-3: var(--lime-3);
  --accent-4: var(--lime-4);
  --accent-5: var(--lime-5);
  --accent-6: var(--lime-6);
  --accent-7: var(--lime-7);
  --accent-8: var(--lime-8);
  --accent-9: var(--lime-9);
  --accent-10: var(--lime-10);
  --accent-11: var(--lime-11);
  --accent-12: var(--lime-12);

  --accent-a1: var(--lime-a1);
  --accent-a2: var(--lime-a2);
  --accent-a3: var(--lime-a3);
  --accent-a4: var(--lime-a4);
  --accent-a5: var(--lime-a5);
  --accent-a6: var(--lime-a6);
  --accent-a7: var(--lime-a7);
  --accent-a8: var(--lime-a8);
  --accent-a9: var(--lime-a9);
  --accent-a10: var(--lime-a10);
  --accent-a11: var(--lime-a11);
  --accent-a12: var(--lime-a12);

  --accent-contrast: var(--lime-contrast);
  --accent-surface: var(--lime-surface);
  --accent-indicator: var(--lime-indicator);
  --accent-track: var(--lime-track);
}

[data-accent-color='mint'] {
  --accent-1: var(--mint-1);
  --accent-2: var(--mint-2);
  --accent-3: var(--mint-3);
  --accent-4: var(--mint-4);
  --accent-5: var(--mint-5);
  --accent-6: var(--mint-6);
  --accent-7: var(--mint-7);
  --accent-8: var(--mint-8);
  --accent-9: var(--mint-9);
  --accent-10: var(--mint-10);
  --accent-11: var(--mint-11);
  --accent-12: var(--mint-12);

  --accent-a1: var(--mint-a1);
  --accent-a2: var(--mint-a2);
  --accent-a3: var(--mint-a3);
  --accent-a4: var(--mint-a4);
  --accent-a5: var(--mint-a5);
  --accent-a6: var(--mint-a6);
  --accent-a7: var(--mint-a7);
  --accent-a8: var(--mint-a8);
  --accent-a9: var(--mint-a9);
  --accent-a10: var(--mint-a10);
  --accent-a11: var(--mint-a11);
  --accent-a12: var(--mint-a12);

  --accent-contrast: var(--mint-contrast);
  --accent-surface: var(--mint-surface);
  --accent-indicator: var(--mint-indicator);
  --accent-track: var(--mint-track);
}

[data-accent-color='orange'] {
  --accent-1: var(--orange-1);
  --accent-2: var(--orange-2);
  --accent-3: var(--orange-3);
  --accent-4: var(--orange-4);
  --accent-5: var(--orange-5);
  --accent-6: var(--orange-6);
  --accent-7: var(--orange-7);
  --accent-8: var(--orange-8);
  --accent-9: var(--orange-9);
  --accent-10: var(--orange-10);
  --accent-11: var(--orange-11);
  --accent-12: var(--orange-12);

  --accent-a1: var(--orange-a1);
  --accent-a2: var(--orange-a2);
  --accent-a3: var(--orange-a3);
  --accent-a4: var(--orange-a4);
  --accent-a5: var(--orange-a5);
  --accent-a6: var(--orange-a6);
  --accent-a7: var(--orange-a7);
  --accent-a8: var(--orange-a8);
  --accent-a9: var(--orange-a9);
  --accent-a10: var(--orange-a10);
  --accent-a11: var(--orange-a11);
  --accent-a12: var(--orange-a12);

  --accent-contrast: var(--orange-contrast);
  --accent-surface: var(--orange-surface);
  --accent-indicator: var(--orange-indicator);
  --accent-track: var(--orange-track);
}

[data-accent-color='pink'] {
  --accent-1: var(--pink-1);
  --accent-2: var(--pink-2);
  --accent-3: var(--pink-3);
  --accent-4: var(--pink-4);
  --accent-5: var(--pink-5);
  --accent-6: var(--pink-6);
  --accent-7: var(--pink-7);
  --accent-8: var(--pink-8);
  --accent-9: var(--pink-9);
  --accent-10: var(--pink-10);
  --accent-11: var(--pink-11);
  --accent-12: var(--pink-12);

  --accent-a1: var(--pink-a1);
  --accent-a2: var(--pink-a2);
  --accent-a3: var(--pink-a3);
  --accent-a4: var(--pink-a4);
  --accent-a5: var(--pink-a5);
  --accent-a6: var(--pink-a6);
  --accent-a7: var(--pink-a7);
  --accent-a8: var(--pink-a8);
  --accent-a9: var(--pink-a9);
  --accent-a10: var(--pink-a10);
  --accent-a11: var(--pink-a11);
  --accent-a12: var(--pink-a12);

  --accent-contrast: var(--pink-contrast);
  --accent-surface: var(--pink-surface);
  --accent-indicator: var(--pink-indicator);
  --accent-track: var(--pink-track);
}

[data-accent-color='plum'] {
  --accent-1: var(--plum-1);
  --accent-2: var(--plum-2);
  --accent-3: var(--plum-3);
  --accent-4: var(--plum-4);
  --accent-5: var(--plum-5);
  --accent-6: var(--plum-6);
  --accent-7: var(--plum-7);
  --accent-8: var(--plum-8);
  --accent-9: var(--plum-9);
  --accent-10: var(--plum-10);
  --accent-11: var(--plum-11);
  --accent-12: var(--plum-12);

  --accent-a1: var(--plum-a1);
  --accent-a2: var(--plum-a2);
  --accent-a3: var(--plum-a3);
  --accent-a4: var(--plum-a4);
  --accent-a5: var(--plum-a5);
  --accent-a6: var(--plum-a6);
  --accent-a7: var(--plum-a7);
  --accent-a8: var(--plum-a8);
  --accent-a9: var(--plum-a9);
  --accent-a10: var(--plum-a10);
  --accent-a11: var(--plum-a11);
  --accent-a12: var(--plum-a12);

  --accent-contrast: var(--plum-contrast);
  --accent-surface: var(--plum-surface);
  --accent-indicator: var(--plum-indicator);
  --accent-track: var(--plum-track);
}

[data-accent-color='purple'] {
  --accent-1: var(--purple-1);
  --accent-2: var(--purple-2);
  --accent-3: var(--purple-3);
  --accent-4: var(--purple-4);
  --accent-5: var(--purple-5);
  --accent-6: var(--purple-6);
  --accent-7: var(--purple-7);
  --accent-8: var(--purple-8);
  --accent-9: var(--purple-9);
  --accent-10: var(--purple-10);
  --accent-11: var(--purple-11);
  --accent-12: var(--purple-12);

  --accent-a1: var(--purple-a1);
  --accent-a2: var(--purple-a2);
  --accent-a3: var(--purple-a3);
  --accent-a4: var(--purple-a4);
  --accent-a5: var(--purple-a5);
  --accent-a6: var(--purple-a6);
  --accent-a7: var(--purple-a7);
  --accent-a8: var(--purple-a8);
  --accent-a9: var(--purple-a9);
  --accent-a10: var(--purple-a10);
  --accent-a11: var(--purple-a11);
  --accent-a12: var(--purple-a12);

  --accent-contrast: var(--purple-contrast);
  --accent-surface: var(--purple-surface);
  --accent-indicator: var(--purple-indicator);
  --accent-track: var(--purple-track);
}

[data-accent-color='red'] {
  --accent-1: var(--red-1);
  --accent-2: var(--red-2);
  --accent-3: var(--red-3);
  --accent-4: var(--red-4);
  --accent-5: var(--red-5);
  --accent-6: var(--red-6);
  --accent-7: var(--red-7);
  --accent-8: var(--red-8);
  --accent-9: var(--red-9);
  --accent-10: var(--red-10);
  --accent-11: var(--red-11);
  --accent-12: var(--red-12);

  --accent-a1: var(--red-a1);
  --accent-a2: var(--red-a2);
  --accent-a3: var(--red-a3);
  --accent-a4: var(--red-a4);
  --accent-a5: var(--red-a5);
  --accent-a6: var(--red-a6);
  --accent-a7: var(--red-a7);
  --accent-a8: var(--red-a8);
  --accent-a9: var(--red-a9);
  --accent-a10: var(--red-a10);
  --accent-a11: var(--red-a11);
  --accent-a12: var(--red-a12);

  --accent-contrast: var(--red-contrast);
  --accent-surface: var(--red-surface);
  --accent-indicator: var(--red-indicator);
  --accent-track: var(--red-track);
}

[data-accent-color='ruby'] {
  --accent-1: var(--ruby-1);
  --accent-2: var(--ruby-2);
  --accent-3: var(--ruby-3);
  --accent-4: var(--ruby-4);
  --accent-5: var(--ruby-5);
  --accent-6: var(--ruby-6);
  --accent-7: var(--ruby-7);
  --accent-8: var(--ruby-8);
  --accent-9: var(--ruby-9);
  --accent-10: var(--ruby-10);
  --accent-11: var(--ruby-11);
  --accent-12: var(--ruby-12);

  --accent-a1: var(--ruby-a1);
  --accent-a2: var(--ruby-a2);
  --accent-a3: var(--ruby-a3);
  --accent-a4: var(--ruby-a4);
  --accent-a5: var(--ruby-a5);
  --accent-a6: var(--ruby-a6);
  --accent-a7: var(--ruby-a7);
  --accent-a8: var(--ruby-a8);
  --accent-a9: var(--ruby-a9);
  --accent-a10: var(--ruby-a10);
  --accent-a11: var(--ruby-a11);
  --accent-a12: var(--ruby-a12);

  --accent-contrast: var(--ruby-contrast);
  --accent-surface: var(--ruby-surface);
  --accent-indicator: var(--ruby-indicator);
  --accent-track: var(--ruby-track);
}

[data-accent-color='sky'] {
  --accent-1: var(--sky-1);
  --accent-2: var(--sky-2);
  --accent-3: var(--sky-3);
  --accent-4: var(--sky-4);
  --accent-5: var(--sky-5);
  --accent-6: var(--sky-6);
  --accent-7: var(--sky-7);
  --accent-8: var(--sky-8);
  --accent-9: var(--sky-9);
  --accent-10: var(--sky-10);
  --accent-11: var(--sky-11);
  --accent-12: var(--sky-12);

  --accent-a1: var(--sky-a1);
  --accent-a2: var(--sky-a2);
  --accent-a3: var(--sky-a3);
  --accent-a4: var(--sky-a4);
  --accent-a5: var(--sky-a5);
  --accent-a6: var(--sky-a6);
  --accent-a7: var(--sky-a7);
  --accent-a8: var(--sky-a8);
  --accent-a9: var(--sky-a9);
  --accent-a10: var(--sky-a10);
  --accent-a11: var(--sky-a11);
  --accent-a12: var(--sky-a12);

  --accent-contrast: var(--sky-contrast);
  --accent-surface: var(--sky-surface);
  --accent-indicator: var(--sky-indicator);
  --accent-track: var(--sky-track);
}

[data-accent-color='teal'] {
  --accent-1: var(--teal-1);
  --accent-2: var(--teal-2);
  --accent-3: var(--teal-3);
  --accent-4: var(--teal-4);
  --accent-5: var(--teal-5);
  --accent-6: var(--teal-6);
  --accent-7: var(--teal-7);
  --accent-8: var(--teal-8);
  --accent-9: var(--teal-9);
  --accent-10: var(--teal-10);
  --accent-11: var(--teal-11);
  --accent-12: var(--teal-12);

  --accent-a1: var(--teal-a1);
  --accent-a2: var(--teal-a2);
  --accent-a3: var(--teal-a3);
  --accent-a4: var(--teal-a4);
  --accent-a5: var(--teal-a5);
  --accent-a6: var(--teal-a6);
  --accent-a7: var(--teal-a7);
  --accent-a8: var(--teal-a8);
  --accent-a9: var(--teal-a9);
  --accent-a10: var(--teal-a10);
  --accent-a11: var(--teal-a11);
  --accent-a12: var(--teal-a12);

  --accent-contrast: var(--teal-contrast);
  --accent-surface: var(--teal-surface);
  --accent-indicator: var(--teal-indicator);
  --accent-track: var(--teal-track);
}

[data-accent-color='tomato'] {
  --accent-1: var(--tomato-1);
  --accent-2: var(--tomato-2);
  --accent-3: var(--tomato-3);
  --accent-4: var(--tomato-4);
  --accent-5: var(--tomato-5);
  --accent-6: var(--tomato-6);
  --accent-7: var(--tomato-7);
  --accent-8: var(--tomato-8);
  --accent-9: var(--tomato-9);
  --accent-10: var(--tomato-10);
  --accent-11: var(--tomato-11);
  --accent-12: var(--tomato-12);

  --accent-a1: var(--tomato-a1);
  --accent-a2: var(--tomato-a2);
  --accent-a3: var(--tomato-a3);
  --accent-a4: var(--tomato-a4);
  --accent-a5: var(--tomato-a5);
  --accent-a6: var(--tomato-a6);
  --accent-a7: var(--tomato-a7);
  --accent-a8: var(--tomato-a8);
  --accent-a9: var(--tomato-a9);
  --accent-a10: var(--tomato-a10);
  --accent-a11: var(--tomato-a11);
  --accent-a12: var(--tomato-a12);

  --accent-contrast: var(--tomato-contrast);
  --accent-surface: var(--tomato-surface);
  --accent-indicator: var(--tomato-indicator);
  --accent-track: var(--tomato-track);
}

[data-accent-color='violet'] {
  --accent-1: var(--violet-1);
  --accent-2: var(--violet-2);
  --accent-3: var(--violet-3);
  --accent-4: var(--violet-4);
  --accent-5: var(--violet-5);
  --accent-6: var(--violet-6);
  --accent-7: var(--violet-7);
  --accent-8: var(--violet-8);
  --accent-9: var(--violet-9);
  --accent-10: var(--violet-10);
  --accent-11: var(--violet-11);
  --accent-12: var(--violet-12);

  --accent-a1: var(--violet-a1);
  --accent-a2: var(--violet-a2);
  --accent-a3: var(--violet-a3);
  --accent-a4: var(--violet-a4);
  --accent-a5: var(--violet-a5);
  --accent-a6: var(--violet-a6);
  --accent-a7: var(--violet-a7);
  --accent-a8: var(--violet-a8);
  --accent-a9: var(--violet-a9);
  --accent-a10: var(--violet-a10);
  --accent-a11: var(--violet-a11);
  --accent-a12: var(--violet-a12);

  --accent-contrast: var(--violet-contrast);
  --accent-surface: var(--violet-surface);
  --accent-indicator: var(--violet-indicator);
  --accent-track: var(--violet-track);
}

[data-accent-color='yellow'] {
  --accent-1: var(--yellow-1);
  --accent-2: var(--yellow-2);
  --accent-3: var(--yellow-3);
  --accent-4: var(--yellow-4);
  --accent-5: var(--yellow-5);
  --accent-6: var(--yellow-6);
  --accent-7: var(--yellow-7);
  --accent-8: var(--yellow-8);
  --accent-9: var(--yellow-9);
  --accent-10: var(--yellow-10);
  --accent-11: var(--yellow-11);
  --accent-12: var(--yellow-12);

  --accent-a1: var(--yellow-a1);
  --accent-a2: var(--yellow-a2);
  --accent-a3: var(--yellow-a3);
  --accent-a4: var(--yellow-a4);
  --accent-a5: var(--yellow-a5);
  --accent-a6: var(--yellow-a6);
  --accent-a7: var(--yellow-a7);
  --accent-a8: var(--yellow-a8);
  --accent-a9: var(--yellow-a9);
  --accent-a10: var(--yellow-a10);
  --accent-a11: var(--yellow-a11);
  --accent-a12: var(--yellow-a12);

  --accent-contrast: var(--yellow-contrast);
  --accent-surface: var(--yellow-surface);
  --accent-indicator: var(--yellow-indicator);
  --accent-track: var(--yellow-track);
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*             Gray color              */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

.radix-themes {
  &:where([data-gray-color='mauve']) {
    --gray-1: var(--mauve-1);
    --gray-2: var(--mauve-2);
    --gray-3: var(--mauve-3);
    --gray-4: var(--mauve-4);
    --gray-5: var(--mauve-5);
    --gray-6: var(--mauve-6);
    --gray-7: var(--mauve-7);
    --gray-8: var(--mauve-8);
    --gray-9: var(--mauve-9);
    --gray-10: var(--mauve-10);
    --gray-11: var(--mauve-11);
    --gray-12: var(--mauve-12);

    --gray-a1: var(--mauve-a1);
    --gray-a2: var(--mauve-a2);
    --gray-a3: var(--mauve-a3);
    --gray-a4: var(--mauve-a4);
    --gray-a5: var(--mauve-a5);
    --gray-a6: var(--mauve-a6);
    --gray-a7: var(--mauve-a7);
    --gray-a8: var(--mauve-a8);
    --gray-a9: var(--mauve-a9);
    --gray-a10: var(--mauve-a10);
    --gray-a11: var(--mauve-a11);
    --gray-a12: var(--mauve-a12);

    --gray-contrast: var(--mauve-contrast);
    --gray-surface: var(--mauve-surface);
    --gray-indicator: var(--mauve-indicator);
    --gray-track: var(--mauve-track);
  }

  &:where([data-gray-color='olive']) {
    --gray-1: var(--olive-1);
    --gray-2: var(--olive-2);
    --gray-3: var(--olive-3);
    --gray-4: var(--olive-4);
    --gray-5: var(--olive-5);
    --gray-6: var(--olive-6);
    --gray-7: var(--olive-7);
    --gray-8: var(--olive-8);
    --gray-9: var(--olive-9);
    --gray-10: var(--olive-10);
    --gray-11: var(--olive-11);
    --gray-12: var(--olive-12);

    --gray-a1: var(--olive-a1);
    --gray-a2: var(--olive-a2);
    --gray-a3: var(--olive-a3);
    --gray-a4: var(--olive-a4);
    --gray-a5: var(--olive-a5);
    --gray-a6: var(--olive-a6);
    --gray-a7: var(--olive-a7);
    --gray-a8: var(--olive-a8);
    --gray-a9: var(--olive-a9);
    --gray-a10: var(--olive-a10);
    --gray-a11: var(--olive-a11);
    --gray-a12: var(--olive-a12);

    --gray-contrast: var(--olive-contrast);
    --gray-surface: var(--olive-surface);
    --gray-indicator: var(--olive-indicator);
    --gray-track: var(--olive-track);
  }

  &:where([data-gray-color='sage']) {
    --gray-1: var(--sage-1);
    --gray-2: var(--sage-2);
    --gray-3: var(--sage-3);
    --gray-4: var(--sage-4);
    --gray-5: var(--sage-5);
    --gray-6: var(--sage-6);
    --gray-7: var(--sage-7);
    --gray-8: var(--sage-8);
    --gray-9: var(--sage-9);
    --gray-10: var(--sage-10);
    --gray-11: var(--sage-11);
    --gray-12: var(--sage-12);

    --gray-a1: var(--sage-a1);
    --gray-a2: var(--sage-a2);
    --gray-a3: var(--sage-a3);
    --gray-a4: var(--sage-a4);
    --gray-a5: var(--sage-a5);
    --gray-a6: var(--sage-a6);
    --gray-a7: var(--sage-a7);
    --gray-a8: var(--sage-a8);
    --gray-a9: var(--sage-a9);
    --gray-a10: var(--sage-a10);
    --gray-a11: var(--sage-a11);
    --gray-a12: var(--sage-a12);

    --gray-contrast: var(--sage-contrast);
    --gray-surface: var(--sage-surface);
    --gray-indicator: var(--sage-indicator);
    --gray-track: var(--sage-track);
  }

  &:where([data-gray-color='sand']) {
    --gray-1: var(--sand-1);
    --gray-2: var(--sand-2);
    --gray-3: var(--sand-3);
    --gray-4: var(--sand-4);
    --gray-5: var(--sand-5);
    --gray-6: var(--sand-6);
    --gray-7: var(--sand-7);
    --gray-8: var(--sand-8);
    --gray-9: var(--sand-9);
    --gray-10: var(--sand-10);
    --gray-11: var(--sand-11);
    --gray-12: var(--sand-12);

    --gray-a1: var(--sand-a1);
    --gray-a2: var(--sand-a2);
    --gray-a3: var(--sand-a3);
    --gray-a4: var(--sand-a4);
    --gray-a5: var(--sand-a5);
    --gray-a6: var(--sand-a6);
    --gray-a7: var(--sand-a7);
    --gray-a8: var(--sand-a8);
    --gray-a9: var(--sand-a9);
    --gray-a10: var(--sand-a10);
    --gray-a11: var(--sand-a11);
    --gray-a12: var(--sand-a12);

    --gray-contrast: var(--sand-contrast);
    --gray-surface: var(--sand-surface);
    --gray-indicator: var(--sand-indicator);
    --gray-track: var(--sand-track);
  }

  &:where([data-gray-color='slate']) {
    --gray-1: var(--slate-1);
    --gray-2: var(--slate-2);
    --gray-3: var(--slate-3);
    --gray-4: var(--slate-4);
    --gray-5: var(--slate-5);
    --gray-6: var(--slate-6);
    --gray-7: var(--slate-7);
    --gray-8: var(--slate-8);
    --gray-9: var(--slate-9);
    --gray-10: var(--slate-10);
    --gray-11: var(--slate-11);
    --gray-12: var(--slate-12);

    --gray-a1: var(--slate-a1);
    --gray-a2: var(--slate-a2);
    --gray-a3: var(--slate-a3);
    --gray-a4: var(--slate-a4);
    --gray-a5: var(--slate-a5);
    --gray-a6: var(--slate-a6);
    --gray-a7: var(--slate-a7);
    --gray-a8: var(--slate-a8);
    --gray-a9: var(--slate-a9);
    --gray-a10: var(--slate-a10);
    --gray-a11: var(--slate-a11);
    --gray-a12: var(--slate-a12);

    --gray-contrast: var(--slate-contrast);
    --gray-surface: var(--slate-surface);
    --gray-indicator: var(--slate-indicator);
    --gray-track: var(--slate-track);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/cursor.css
================================================
.radix-themes {
  --cursor-button: default;
  --cursor-checkbox: default;
  --cursor-disabled: not-allowed;
  --cursor-link: pointer;
  --cursor-menu-item: default;
  --cursor-radio: default;
  --cursor-slider-thumb: default;
  --cursor-slider-thumb-active: default;
  --cursor-switch: default;
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/index.css
================================================
@import './colors/gray.css';
@import './colors/mauve.css';
@import './colors/slate.css';
@import './colors/sage.css';
@import './colors/olive.css';
@import './colors/sand.css';

@import './colors/amber.css';
@import './colors/blue.css';
@import './colors/bronze.css';
@import './colors/brown.css';
@import './colors/crimson.css';
@import './colors/cyan.css';
@import './colors/gold.css';
@import './colors/grass.css';
@import './colors/green.css';
@import './colors/indigo.css';
@import './colors/iris.css';
@import './colors/jade.css';
@import './colors/lime.css';
@import './colors/mint.css';
@import './colors/orange.css';
@import './colors/pink.css';
@import './colors/plum.css';
@import './colors/purple.css';
@import './colors/red.css';
@import './colors/ruby.css';
@import './colors/sky.css';
@import './colors/teal.css';
@import './colors/tomato.css';
@import './colors/violet.css';
@import './colors/yellow.css';

@import './base.css';


================================================
File: packages/radix-ui-themes/src/styles/tokens/layout.css
================================================
@import './scaling.css';
@import './space.css';


================================================
File: packages/radix-ui-themes/src/styles/tokens/radius.css
================================================
[data-radius] {
  --radius-1: calc(3px * var(--scaling) * var(--radius-factor));
  --radius-2: calc(4px * var(--scaling) * var(--radius-factor));
  --radius-3: calc(6px * var(--scaling) * var(--radius-factor));
  --radius-4: calc(8px * var(--scaling) * var(--radius-factor));
  --radius-5: calc(12px * var(--scaling) * var(--radius-factor));
  --radius-6: calc(16px * var(--scaling) * var(--radius-factor));
}

[data-radius='none'] {
  --radius-factor: 0;
  --radius-full: 0px;
  --radius-thumb: 0.5px;
}

[data-radius='small'] {
  --radius-factor: 0.75;
  --radius-full: 0px;
  --radius-thumb: 0.5px;
}

[data-radius='medium'] {
  --radius-factor: 1;
  --radius-full: 0px;
  --radius-thumb: 9999px;
}

[data-radius='large'] {
  --radius-factor: 1.5;
  --radius-full: 0px;
  --radius-thumb: 9999px;
}

[data-radius='full'] {
  --radius-factor: 1.5;
  --radius-full: 9999px;
  --radius-thumb: 9999px;
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/scaling.css
================================================
.radix-themes {
  &:where([data-scaling='90%']) {
    --scaling: 0.9;
  }
  &:where([data-scaling='95%']) {
    --scaling: 0.95;
  }
  &:where([data-scaling='100%']) {
    --scaling: 1;
  }
  &:where([data-scaling='105%']) {
    --scaling: 1.05;
  }
  &:where([data-scaling='110%']) {
    --scaling: 1.1;
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/shadow.css
================================================
/* prettier-ignore */
:where(.radix-themes) {
  --shadow-1:
    inset 0 0 0 1px var(--gray-a5),
    inset 0 1.5px 2px 0 var(--gray-a2),
    inset 0 1.5px 2px 0 var(--black-a2);

  --shadow-2:
    0 0 0 1px var(--gray-a3),
    0 0 0 0.5px var(--black-a1),
    0 1px 1px 0 var(--gray-a2),
    0 2px 1px -1px var(--black-a1),
    0 1px 3px 0 var(--black-a1);

  --shadow-3:
    0 0 0 1px var(--gray-a3),
    0 2px 3px -2px var(--gray-a3),
    0 3px 12px -4px var(--black-a2),
    0 4px 16px -8px var(--black-a2);

  --shadow-4:
    0 0 0 1px var(--gray-a3),
    0 8px 40px var(--black-a1),
    0 12px 32px -16px var(--gray-a3);

  --shadow-5:
    0 0 0 1px var(--gray-a3),
    0 12px 60px var(--black-a3),
    0 12px 32px -16px var(--gray-a5);

  --shadow-6:
    0 0 0 1px var(--gray-a3),
    0 12px 60px var(--black-a3),
    0 16px 64px var(--gray-a2),
    0 16px 36px -20px var(--gray-a7);
}

/* prettier-ignore */
@supports (color: color-mix(in oklab, white, black)) {
  :where(.radix-themes) {
    --shadow-1:
      inset 0 0 0 1px var(--gray-a5),
      inset 0 1.5px 2px 0 var(--gray-a2),
      inset 0 1.5px 2px 0 var(--black-a2);

    --shadow-2:
      0 0 0 1px color-mix(in oklab, var(--gray-a3), var(--gray-3) 25%),
      0 0 0 0.5px var(--black-a1),
      0 1px 1px 0 var(--gray-a2),
      0 2px 1px -1px var(--black-a1),
      0 1px 3px 0 var(--black-a1);

    --shadow-3:
      0 0 0 1px color-mix(in oklab, var(--gray-a3), var(--gray-3) 25%),
      0 2px 3px -2px var(--gray-a3),
      0 3px 12px -4px var(--black-a2),
      0 4px 16px -8px var(--black-a2);

    --shadow-4:
      0 0 0 1px color-mix(in oklab, var(--gray-a3), var(--gray-3) 25%),
      0 8px 40px var(--black-a1),
      0 12px 32px -16px var(--gray-a3);

    --shadow-5:
      0 0 0 1px color-mix(in oklab, var(--gray-a3), var(--gray-3) 25%),
      0 12px 60px var(--black-a3),
      0 12px 32px -16px var(--gray-a5);

    --shadow-6:
      0 0 0 1px color-mix(in oklab, var(--gray-a3), var(--gray-3) 25%),
      0 12px 60px var(--black-a3),
      0 16px 64px var(--gray-a2),
      0 16px 36px -20px var(--gray-a7);
  }
}

/* prettier-ignore */
:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  --shadow-1:
    inset 0 -1px 1px 0 var(--gray-a3),
    inset 0 0 0 1px var(--gray-a3),
    inset 0 3px 4px 0 var(--black-a5),
    inset 0 0 0 1px var(--gray-a4);

  --shadow-2:
    0 0 0 1px var(--gray-a6),
    0 0 0 0.5px var(--black-a3),
    0 1px 1px 0 var(--black-a6),
    0 2px 1px -1px var(--black-a6),
    0 1px 3px 0 var(--black-a5);

  --shadow-3:
    0 0 0 1px var(--gray-a6),
    0 2px 3px -2px var(--black-a3),
    0 3px 8px -2px var(--black-a6),
    0 4px 12px -4px var(--black-a7);

  --shadow-4:
    0 0 0 1px var(--gray-a6),
    0 8px 40px var(--black-a3),
    0 12px 32px -16px var(--black-a5);

  --shadow-5:
    0 0 0 1px var(--gray-a6),
    0 12px 60px var(--black-a5),
    0 12px 32px -16px var(--black-a7);

  --shadow-6:
    0 0 0 1px var(--gray-a6),
    0 12px 60px var(--black-a4),
    0 16px 64px var(--black-a6),
    0 16px 36px -20px var(--black-a11);
}

/* prettier-ignore */
@supports (color: color-mix(in oklab, white, black)) {
  :is(.dark, .dark-theme),
  :is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
    --shadow-1:
      inset 0 -1px 1px 0 var(--gray-a3),
      inset 0 0 0 1px var(--gray-a3),
      inset 0 3px 4px 0 var(--black-a5),
      inset 0 0 0 1px var(--gray-a4);

    --shadow-2:
      0 0 0 1px color-mix(in oklab, var(--gray-a6), var(--gray-6) 25%),
      0 0 0 0.5px var(--black-a3),
      0 1px 1px 0 var(--black-a6),
      0 2px 1px -1px var(--black-a6),
      0 1px 3px 0 var(--black-a5);

    --shadow-3:
      0 0 0 1px color-mix(in oklab, var(--gray-a6), var(--gray-6) 25%),
      0 2px 3px -2px var(--black-a3),
      0 3px 8px -2px var(--black-a6),
      0 4px 12px -4px var(--black-a7);

    --shadow-4:
      0 0 0 1px color-mix(in oklab, var(--gray-a6), var(--gray-6) 25%),
      0 8px 40px var(--black-a3),
      0 12px 32px -16px var(--black-a5);

    --shadow-5:
      0 0 0 1px color-mix(in oklab, var(--gray-a6), var(--gray-6) 25%),
      0 12px 60px var(--black-a5),
      0 12px 32px -16px var(--black-a7);

    --shadow-6:
      0 0 0 1px color-mix(in oklab, var(--gray-a6), var(--gray-6) 25%),
      0 12px 60px var(--black-a4),
      0 16px 64px var(--black-a6),
      0 16px 36px -20px var(--black-a11);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/space.css
================================================
.radix-themes {
  --space-1: calc(4px * var(--scaling));
  --space-2: calc(8px * var(--scaling));
  --space-3: calc(12px * var(--scaling));
  --space-4: calc(16px * var(--scaling));
  --space-5: calc(24px * var(--scaling));
  --space-6: calc(32px * var(--scaling));
  --space-7: calc(40px * var(--scaling));
  --space-8: calc(48px * var(--scaling));
  --space-9: calc(64px * var(--scaling));
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/typography.css
================================================
.radix-themes {
  --font-size-1: calc(12px * var(--scaling));
  --font-size-2: calc(14px * var(--scaling));
  --font-size-3: calc(16px * var(--scaling));
  --font-size-4: calc(18px * var(--scaling));
  --font-size-5: calc(20px * var(--scaling));
  --font-size-6: calc(24px * var(--scaling));
  --font-size-7: calc(28px * var(--scaling));
  --font-size-8: calc(35px * var(--scaling));
  --font-size-9: calc(60px * var(--scaling));

  --font-weight-light: 300;
  --font-weight-regular: 400;
  --font-weight-medium: 500;
  --font-weight-bold: 700;

  --line-height-1: calc(16px * var(--scaling));
  --line-height-2: calc(20px * var(--scaling));
  --line-height-3: calc(24px * var(--scaling));
  --line-height-4: calc(26px * var(--scaling));
  --line-height-5: calc(28px * var(--scaling));
  --line-height-6: calc(30px * var(--scaling));
  --line-height-7: calc(36px * var(--scaling));
  --line-height-8: calc(40px * var(--scaling));
  --line-height-9: calc(60px * var(--scaling));

  --letter-spacing-1: 0.0025em;
  --letter-spacing-2: 0em;
  --letter-spacing-3: 0em;
  --letter-spacing-4: -0.0025em;
  --letter-spacing-5: -0.005em;
  --letter-spacing-6: -0.00625em;
  --letter-spacing-7: -0.0075em;
  --letter-spacing-8: -0.01em;
  --letter-spacing-9: -0.025em;

  /* default values */

  --default-font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI (Custom)', Roboto,
    'Helvetica Neue', 'Open Sans (Custom)', system-ui, sans-serif, 'Apple Color Emoji',
    'Segoe UI Emoji';
  --default-font-size: var(--font-size-3); /* Same size used for `<Text size="3">` */
  --default-font-style: normal;
  --default-font-weight: var(--font-weight-regular);
  --default-line-height: 1.5; /* Equivalent to the line-height used for `<Text size="3">` 16px * 1.5 = 24px */
  --default-letter-spacing: 0em;
  --default-leading-trim-start: 0.42em;
  --default-leading-trim-end: 0.36em;

  /* Heading */

  --heading-font-family: var(--default-font-family);
  --heading-font-size-adjust: 1;
  --heading-font-style: normal;
  --heading-leading-trim-start: var(--default-leading-trim-start);
  --heading-leading-trim-end: var(--default-leading-trim-end);
  --heading-letter-spacing: 0em;

  --heading-line-height-1: calc(16px * var(--scaling));
  --heading-line-height-2: calc(18px * var(--scaling));
  --heading-line-height-3: calc(22px * var(--scaling));
  --heading-line-height-4: calc(24px * var(--scaling));
  --heading-line-height-5: calc(26px * var(--scaling));
  --heading-line-height-6: calc(30px * var(--scaling));
  --heading-line-height-7: calc(36px * var(--scaling));
  --heading-line-height-8: calc(40px * var(--scaling));
  --heading-line-height-9: calc(60px * var(--scaling));

  /* Code */

  --code-font-family: 'Menlo', 'Consolas (Custom)', 'Bitstream Vera Sans Mono', monospace,
    'Apple Color Emoji', 'Segoe UI Emoji';
  --code-font-size-adjust: 0.95;
  --code-font-style: normal;
  --code-font-weight: inherit;
  --code-letter-spacing: -0.007em;
  --code-padding-top: 0.1em;
  --code-padding-bottom: 0.1em;
  --code-padding-left: 0.25em;
  --code-padding-right: 0.25em;

  /* Strong */

  --strong-font-family: var(--default-font-family);
  --strong-font-size-adjust: 1;
  --strong-font-style: inherit;
  --strong-font-weight: var(--font-weight-bold);
  --strong-letter-spacing: 0em;

  /* Em */

  --em-font-family: 'Times New Roman', 'Times', serif;
  --em-font-size-adjust: 1.18;
  --em-font-style: italic;
  --em-font-weight: inherit;
  --em-letter-spacing: -0.025em;

  /* Quote */

  --quote-font-family: 'Times New Roman', 'Times', serif;
  --quote-font-size-adjust: 1.18;
  --quote-font-style: italic;
  --quote-font-weight: inherit;
  --quote-letter-spacing: -0.025em;

  /* Tabs */

  --tab-active-letter-spacing: -0.01em;
  --tab-active-word-spacing: 0em;
  --tab-inactive-letter-spacing: 0em;
  --tab-inactive-word-spacing: 0em;
}

.radix-themes {
  overflow-wrap: break-word;
  font-family: var(--default-font-family);
  font-size: var(--default-font-size);
  font-weight: var(--default-font-weight);
  font-style: var(--default-font-style);
  line-height: var(--default-line-height);
  letter-spacing: var(--default-letter-spacing);
  text-size-adjust: none;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@font-face {
  font-family: 'Segoe UI (Custom)';
  font-weight: 300;
  size-adjust: 103%;
  descent-override: 35%;
  ascent-override: 105%;
  src: local('Segoe UI Semilight'), local('Segoe UI');
}

@font-face {
  font-family: 'Segoe UI (Custom)';
  font-weight: 300;
  font-style: italic;
  size-adjust: 103%;
  descent-override: 35%;
  ascent-override: 105%;
  src: local('Segoe UI Semilight Italic'), local('Segoe UI Italic');
}

@font-face {
  font-family: 'Segoe UI (Custom)';
  font-weight: 400;
  size-adjust: 103%;
  descent-override: 35%;
  ascent-override: 105%;
  src: local('Segoe UI');
}

@font-face {
  font-family: 'Segoe UI (Custom)';
  font-weight: 400;
  font-style: italic;
  size-adjust: 103%;
  descent-override: 35%;
  ascent-override: 105%;
  src: local('Segoe UI Italic');
}

@font-face {
  font-family: 'Segoe UI (Custom)';
  font-weight: 500;
  size-adjust: 103%;
  descent-override: 35%;
  ascent-override: 105%;
  src: local('Segoe UI Semibold'), local('Segoe UI');
}

@font-face {
  font-family: 'Segoe UI (Custom)';
  font-weight: 500;
  font-style: italic;
  size-adjust: 103%;
  descent-override: 35%;
  ascent-override: 105%;
  src: local('Segoe UI Semibold Italic'), local('Segoe UI Italic');
}

@font-face {
  font-family: 'Segoe UI (Custom)';
  font-weight: 700;
  size-adjust: 103%;
  descent-override: 35%;
  ascent-override: 105%;
  src: local('Segoe UI Bold');
}

@font-face {
  font-family: 'Segoe UI (Custom)';
  font-weight: 700;
  font-style: italic;
  size-adjust: 103%;
  descent-override: 35%;
  ascent-override: 105%;
  src: local('Segoe UI Bold Italic');
}

@font-face {
  font-family: 'Open Sans (Custom)';
  font-weight: 300;
  descent-override: 35%;
  src: local('Open Sans Light'), local('Open Sans Regular');
}

@font-face {
  font-family: 'Open Sans (Custom)';
  font-weight: 300;
  font-style: italic;
  descent-override: 35%;
  src: local('Open Sans Light Italic'), local('Open Sans Italic');
}

@font-face {
  font-family: 'Open Sans (Custom)';
  font-weight: 400;
  descent-override: 35%;
  src: local('Open Sans Regular');
}

@font-face {
  font-family: 'Open Sans (Custom)';
  font-weight: 400;
  font-style: italic;
  descent-override: 35%;
  src: local('Open Sans Italic');
}

@font-face {
  font-family: 'Open Sans (Custom)';
  font-weight: 500;
  descent-override: 35%;
  src: local('Open Sans Medium'), local('Open Sans Regular');
}

@font-face {
  font-family: 'Open Sans (Custom)';
  font-weight: 500;
  font-style: italic;
  descent-override: 35%;
  src: local('Open Sans Medium Italic'), local('Open Sans Italic');
}

@font-face {
  font-family: 'Open Sans (Custom)';
  font-weight: 700;
  descent-override: 35%;
  src: local('Open Sans Bold');
}

@font-face {
  font-family: 'Open Sans (Custom)';
  font-weight: 700;
  font-style: italic;
  descent-override: 35%;
  src: local('Open Sans Bold Italic');
}

@font-face {
  font-family: 'Consolas (Custom)';
  font-weight: 400;
  size-adjust: 110%;
  ascent-override: 85%;
  descent-override: 22%;
  src: local('Consolas');
}

@font-face {
  font-family: 'Consolas (Custom)';
  font-weight: 400;
  font-style: italic;
  size-adjust: 110%;
  ascent-override: 85%;
  descent-override: 22%;
  src: local('Consolas Italic');
}

@font-face {
  font-family: 'Consolas (Custom)';
  font-weight: 700;
  size-adjust: 110%;
  ascent-override: 85%;
  descent-override: 22%;
  src: local('Consolas Bold');
}

@font-face {
  font-family: 'Consolas (Custom)';
  font-weight: 700;
  font-style: italic;
  size-adjust: 110%;
  ascent-override: 85%;
  descent-override: 22%;
  src: local('Consolas Bold Italic');
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/amber.css
================================================
@import '@radix-ui/colors/amber.css';
@import '@radix-ui/colors/amber-dark.css';
@import '@radix-ui/colors/amber-alpha.css';
@import '@radix-ui/colors/amber-dark-alpha.css';

:root {
  --amber-contrast: #21201c; /* light mode sand 12 */
}

:root,
.light,
.light-theme {
  --amber-surface: #fefae4cc;
  --amber-indicator: var(--amber-9);
  --amber-track: var(--amber-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --amber-surface: color(display-p3 0.9922 0.9843 0.902 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --amber-surface: #271f1380;
  --amber-indicator: var(--amber-9);
  --amber-track: var(--amber-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --amber-surface: color(display-p3 0.1412 0.1176 0.0784 / 0.5);
    }
  }
  @supports (color: color-mix(in oklab, white, black)) {
    --amber-track: color-mix(in oklab, var(--amber-8), var(--amber-9) 75%);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/blue.css
================================================
@import '@radix-ui/colors/blue.css';
@import '@radix-ui/colors/blue-dark.css';
@import '@radix-ui/colors/blue-alpha.css';
@import '@radix-ui/colors/blue-dark-alpha.css';

:root {
  --blue-contrast: white;
}

:root,
.light,
.light-theme {
  --blue-surface: #f1f9ffcc;
  --blue-indicator: var(--blue-9);
  --blue-track: var(--blue-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --blue-surface: color(display-p3 0.9529 0.9765 0.9961 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --blue-surface: #11213d80;
  --blue-indicator: var(--blue-9);
  --blue-track: var(--blue-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --blue-surface: color(display-p3 0.0706 0.1255 0.2196 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/bronze.css
================================================
@import '@radix-ui/colors/bronze.css';
@import '@radix-ui/colors/bronze-dark.css';
@import '@radix-ui/colors/bronze-alpha.css';
@import '@radix-ui/colors/bronze-dark-alpha.css';

:root {
  --bronze-contrast: white;
}

:root,
.light,
.light-theme {
  --bronze-surface: #fdf5f3cc;
  --bronze-indicator: var(--bronze-9);
  --bronze-track: var(--bronze-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --bronze-surface: color(display-p3 0.9843 0.9608 0.9529 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --bronze-surface: #27211d80;
  --bronze-indicator: var(--bronze-9);
  --bronze-track: var(--bronze-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --bronze-surface: color(display-p3 0.1412 0.1255 0.1176 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/brown.css
================================================
@import '@radix-ui/colors/brown.css';
@import '@radix-ui/colors/brown-dark.css';
@import '@radix-ui/colors/brown-alpha.css';
@import '@radix-ui/colors/brown-dark-alpha.css';

:root {
  --brown-contrast: white;
}

:root,
.light,
.light-theme {
  --brown-surface: #fbf8f4cc;
  --brown-indicator: var(--brown-9);
  --brown-track: var(--brown-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --brown-surface: color(display-p3 0.9843 0.9725 0.9569 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --brown-surface: #271f1b80;
  --brown-indicator: var(--brown-9);
  --brown-track: var(--brown-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --brown-surface: color(display-p3 0.1412 0.1176 0.102 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/crimson.css
================================================
@import '@radix-ui/colors/crimson.css';
@import '@radix-ui/colors/crimson-dark.css';
@import '@radix-ui/colors/crimson-alpha.css';
@import '@radix-ui/colors/crimson-dark-alpha.css';

:root {
  --crimson-contrast: white;
}

:root,
.light,
.light-theme {
  --crimson-surface: #fef5f8cc;
  --crimson-indicator: var(--crimson-9);
  --crimson-track: var(--crimson-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --crimson-surface: color(display-p3 0.9922 0.9608 0.9725 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --crimson-surface: #2f151f80;
  --crimson-indicator: var(--crimson-9);
  --crimson-track: var(--crimson-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --crimson-surface: color(display-p3 0.1647 0.0863 0.1176 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/cyan.css
================================================
@import '@radix-ui/colors/cyan.css';
@import '@radix-ui/colors/cyan-dark.css';
@import '@radix-ui/colors/cyan-alpha.css';
@import '@radix-ui/colors/cyan-dark-alpha.css';

:root {
  --cyan-contrast: white;
}

:root,
.light,
.light-theme {
  --cyan-surface: #eff9facc;
  --cyan-indicator: var(--cyan-9);
  --cyan-track: var(--cyan-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --cyan-surface: color(display-p3 0.9412 0.9765 0.9804 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --cyan-surface: #11252d80;
  --cyan-indicator: var(--cyan-9);
  --cyan-track: var(--cyan-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --cyan-surface: color(display-p3 0.0784 0.1412 0.1725 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/gold.css
================================================
@import '@radix-ui/colors/gold.css';
@import '@radix-ui/colors/gold-dark.css';
@import '@radix-ui/colors/gold-alpha.css';
@import '@radix-ui/colors/gold-dark-alpha.css';

:root {
  --gold-contrast: white;
}

:root,
.light,
.light-theme {
  --gold-surface: #f9f8efcc;
  --gold-indicator: var(--gold-9);
  --gold-track: var(--gold-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --gold-surface: color(display-p3 0.9765 0.9725 0.9412 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --gold-surface: #25231d80;
  --gold-indicator: var(--gold-9);
  --gold-track: var(--gold-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --gold-surface: color(display-p3 0.1412 0.1333 0.1098 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/grass.css
================================================
@import '@radix-ui/colors/grass.css';
@import '@radix-ui/colors/grass-dark.css';
@import '@radix-ui/colors/grass-alpha.css';
@import '@radix-ui/colors/grass-dark-alpha.css';

:root {
  --grass-contrast: white;
}

:root,
.light,
.light-theme {
  --grass-surface: #f3faf3cc;
  --grass-indicator: var(--grass-9);
  --grass-track: var(--grass-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --grass-surface: color(display-p3 0.9569 0.9804 0.9569 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --grass-surface: #19231b80;
  --grass-indicator: var(--grass-9);
  --grass-track: var(--grass-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --grass-surface: color(display-p3 0.102 0.1333 0.102 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/gray.css
================================================
@import '@radix-ui/colors/gray.css';
@import '@radix-ui/colors/gray-dark.css';
@import '@radix-ui/colors/gray-alpha.css';
@import '@radix-ui/colors/gray-dark-alpha.css';

:root {
  --gray-contrast: white;
}

:root,
.light,
.light-theme {
  --gray-surface: #ffffffcc;
  --gray-indicator: var(--gray-9);
  --gray-track: var(--gray-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --gray-surface: color(display-p3 1 1 1 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --gray-surface: #21212180;
  --gray-indicator: var(--gray-9);
  --gray-track: var(--gray-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --gray-surface: color(display-p3 0.1255 0.1255 0.1255 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/green.css
================================================
@import '@radix-ui/colors/green.css';
@import '@radix-ui/colors/green-dark.css';
@import '@radix-ui/colors/green-alpha.css';
@import '@radix-ui/colors/green-dark-alpha.css';

:root {
  --green-contrast: white;
}

:root,
.light,
.light-theme {
  --green-surface: #f1faf4cc;
  --green-indicator: var(--green-9);
  --green-track: var(--green-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --green-surface: color(display-p3 0.9569 0.9804 0.9608 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --green-surface: #15251d80;
  --green-indicator: var(--green-9);
  --green-track: var(--green-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --green-surface: color(display-p3 0.0941 0.1412 0.1098 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/indigo.css
================================================
@import '@radix-ui/colors/indigo.css';
@import '@radix-ui/colors/indigo-dark.css';
@import '@radix-ui/colors/indigo-alpha.css';
@import '@radix-ui/colors/indigo-dark-alpha.css';

:root {
  --indigo-contrast: white;
}

:root,
.light,
.light-theme {
  --indigo-surface: #f5f8ffcc;
  --indigo-indicator: var(--indigo-9);
  --indigo-track: var(--indigo-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --indigo-surface: color(display-p3 0.9647 0.9725 0.9961 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --indigo-surface: #171d3b80;
  --indigo-indicator: var(--indigo-9);
  --indigo-track: var(--indigo-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --indigo-surface: color(display-p3 0.0941 0.1098 0.2196 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/iris.css
================================================
@import '@radix-ui/colors/iris.css';
@import '@radix-ui/colors/iris-dark.css';
@import '@radix-ui/colors/iris-alpha.css';
@import '@radix-ui/colors/iris-dark-alpha.css';

:root {
  --iris-contrast: white;
}

:root,
.light,
.light-theme {
  --iris-surface: #f6f6ffcc;
  --iris-indicator: var(--iris-9);
  --iris-track: var(--iris-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --iris-surface: color(display-p3 0.9647 0.9647 0.9961 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --iris-surface: #1d1b3980;
  --iris-indicator: var(--iris-9);
  --iris-track: var(--iris-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --iris-surface: color(display-p3 0.1098 0.102 0.2118 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/jade.css
================================================
@import '@radix-ui/colors/jade.css';
@import '@radix-ui/colors/jade-dark.css';
@import '@radix-ui/colors/jade-alpha.css';
@import '@radix-ui/colors/jade-dark-alpha.css';

:root {
  --jade-contrast: white;
}

:root,
.light,
.light-theme {
  --jade-surface: #f1faf5cc;
  --jade-indicator: var(--jade-9);
  --jade-track: var(--jade-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --jade-surface: color(display-p3 0.9529 0.9804 0.9608 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --jade-surface: #13271f80;
  --jade-indicator: var(--jade-9);
  --jade-track: var(--jade-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --jade-surface: color(display-p3 0.0863 0.149 0.1176 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/lime.css
================================================
@import '@radix-ui/colors/lime.css';
@import '@radix-ui/colors/lime-dark.css';
@import '@radix-ui/colors/lime-alpha.css';
@import '@radix-ui/colors/lime-dark-alpha.css';

:root {
  --lime-contrast: #1d211c; /* light mode olive 12 */
}

:root,
.light,
.light-theme {
  --lime-surface: #f6f9f0cc;
  --lime-indicator: var(--lime-9);
  --lime-track: var(--lime-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --lime-surface: color(display-p3 0.9725 0.9765 0.9412 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --lime-surface: #1b211580;
  --lime-indicator: var(--lime-9);
  --lime-track: var(--lime-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --lime-surface: color(display-p3 0.1098 0.1255 0.0784 / 0.5);
    }
  }
  @supports (color: color-mix(in oklab, white, black)) {
    --lime-track: color-mix(in oklab, var(--lime-8), var(--lime-9) 65%);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/mauve.css
================================================
@import '@radix-ui/colors/mauve.css';
@import '@radix-ui/colors/mauve-dark.css';
@import '@radix-ui/colors/mauve-alpha.css';
@import '@radix-ui/colors/mauve-dark-alpha.css';

:root {
  --mauve-contrast: white;
}

:root,
.light,
.light-theme {
  --mauve-surface: #ffffffcc;
  --mauve-indicator: var(--mauve-9);
  --mauve-track: var(--mauve-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --mauve-surface: color(display-p3 1 1 1 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --mauve-surface: #22212380;
  --mauve-indicator: var(--mauve-9);
  --mauve-track: var(--mauve-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --mauve-surface: color(display-p3 0.1333 0.1255 0.1333 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/mint.css
================================================
@import '@radix-ui/colors/mint.css';
@import '@radix-ui/colors/mint-dark.css';
@import '@radix-ui/colors/mint-alpha.css';
@import '@radix-ui/colors/mint-dark-alpha.css';

:root {
  --mint-contrast: #1a211e; /* light mode sage 12 */
}

:root,
.light,
.light-theme {
  --mint-surface: #effaf8cc;
  --mint-indicator: var(--mint-9);
  --mint-track: var(--mint-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --mint-surface: color(display-p3 0.9451 0.9804 0.9725 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --mint-surface: #15272780;
  --mint-indicator: var(--mint-9);
  --mint-track: var(--mint-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --mint-surface: color(display-p3 0.0941 0.149 0.1412 / 0.5);
    }
  }
  @supports (color: color-mix(in oklab, white, black)) {
    --mint-track: color-mix(in oklab, var(--mint-8), var(--mint-9) 65%);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/olive.css
================================================
@import '@radix-ui/colors/olive.css';
@import '@radix-ui/colors/olive-dark.css';
@import '@radix-ui/colors/olive-alpha.css';
@import '@radix-ui/colors/olive-dark-alpha.css';

:root {
  --olive-contrast: white;
}

:root,
.light,
.light-theme {
  --olive-surface: #ffffffcc;
  --olive-indicator: var(--olive-9);
  --olive-track: var(--olive-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --olive-surface: color(display-p3 1 1 1 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --olive-surface: #1f201e80;
  --olive-indicator: var(--olive-9);
  --olive-track: var(--olive-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --olive-surface: color(display-p3 0.1176 0.1255 0.1176 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/orange.css
================================================
@import '@radix-ui/colors/orange.css';
@import '@radix-ui/colors/orange-dark.css';
@import '@radix-ui/colors/orange-alpha.css';
@import '@radix-ui/colors/orange-dark-alpha.css';

:root {
  --orange-contrast: white;
}

:root,
.light,
.light-theme {
  --orange-surface: #fff5e9cc;
  --orange-indicator: var(--orange-9);
  --orange-track: var(--orange-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --orange-surface: color(display-p3 0.9961 0.9608 0.9176 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --orange-surface: #271d1380;
  --orange-indicator: var(--orange-9);
  --orange-track: var(--orange-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --orange-surface: color(display-p3 0.1412 0.1098 0.0706 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/pink.css
================================================
@import '@radix-ui/colors/pink.css';
@import '@radix-ui/colors/pink-dark.css';
@import '@radix-ui/colors/pink-alpha.css';
@import '@radix-ui/colors/pink-dark-alpha.css';

:root {
  --pink-contrast: white;
}

:root,
.light,
.light-theme {
  --pink-surface: #fef5facc;
  --pink-indicator: var(--pink-9);
  --pink-track: var(--pink-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --pink-surface: color(display-p3 0.9922 0.9608 0.9804 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --pink-surface: #31132980;
  --pink-indicator: var(--pink-9);
  --pink-track: var(--pink-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --pink-surface: color(display-p3 0.1725 0.0784 0.149 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/plum.css
================================================
@import '@radix-ui/colors/plum.css';
@import '@radix-ui/colors/plum-dark.css';
@import '@radix-ui/colors/plum-alpha.css';
@import '@radix-ui/colors/plum-dark-alpha.css';

:root {
  --plum-contrast: white;
}

:root,
.light,
.light-theme {
  --plum-surface: #fdf5fdcc;
  --plum-indicator: var(--plum-9);
  --plum-track: var(--plum-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --plum-surface: color(display-p3 0.9843 0.9647 0.9843 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --plum-surface: #2f152f80;
  --plum-indicator: var(--plum-9);
  --plum-track: var(--plum-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --plum-surface: color(display-p3 0.1647 0.0863 0.1725 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/purple.css
================================================
@import '@radix-ui/colors/purple.css';
@import '@radix-ui/colors/purple-dark.css';
@import '@radix-ui/colors/purple-alpha.css';
@import '@radix-ui/colors/purple-dark-alpha.css';

:root {
  --purple-contrast: white;
}

:root,
.light,
.light-theme {
  --purple-surface: #faf5fecc;
  --purple-indicator: var(--purple-9);
  --purple-track: var(--purple-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --purple-surface: color(display-p3 0.9804 0.9647 0.9922 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --purple-surface: #2b173580;
  --purple-indicator: var(--purple-9);
  --purple-track: var(--purple-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --purple-surface: color(display-p3 0.149 0.0941 0.1961 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/red.css
================================================
@import '@radix-ui/colors/red.css';
@import '@radix-ui/colors/red-dark.css';
@import '@radix-ui/colors/red-alpha.css';
@import '@radix-ui/colors/red-dark-alpha.css';

:root {
  --red-contrast: white;
}

:root,
.light,
.light-theme {
  --red-surface: #fff5f5cc;
  --red-indicator: var(--red-9);
  --red-track: var(--red-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --red-surface: color(display-p3 0.9961 0.9647 0.9647 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --red-surface: #2f151780;
  --red-indicator: var(--red-9);
  --red-track: var(--red-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --red-surface: color(display-p3 0.1647 0.0863 0.0863 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/ruby.css
================================================
@import '@radix-ui/colors/ruby.css';
@import '@radix-ui/colors/ruby-dark.css';
@import '@radix-ui/colors/ruby-alpha.css';
@import '@radix-ui/colors/ruby-dark-alpha.css';

:root {
  --ruby-contrast: white;
}

:root,
.light,
.light-theme {
  --ruby-surface: #fff5f6cc;
  --ruby-indicator: var(--ruby-9);
  --ruby-track: var(--ruby-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --ruby-surface: color(display-p3 0.9961 0.9647 0.9647 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --ruby-surface: #2b191d80;
  --ruby-indicator: var(--ruby-9);
  --ruby-track: var(--ruby-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --ruby-surface: color(display-p3 0.1569 0.0941 0.1098 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/sage.css
================================================
@import '@radix-ui/colors/sage.css';
@import '@radix-ui/colors/sage-dark.css';
@import '@radix-ui/colors/sage-alpha.css';
@import '@radix-ui/colors/sage-dark-alpha.css';

:root {
  --sage-contrast: white;
}

:root,
.light,
.light-theme {
  --sage-surface: #ffffffcc;
  --sage-indicator: var(--sage-9);
  --sage-track: var(--sage-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --sage-surface: color(display-p3 1 1 1 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --sage-surface: #1e201f80;
  --sage-indicator: var(--sage-9);
  --sage-track: var(--sage-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --sage-surface: color(display-p3 0.1176 0.1255 0.1176 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/sand.css
================================================
@import '@radix-ui/colors/sand.css';
@import '@radix-ui/colors/sand-dark.css';
@import '@radix-ui/colors/sand-alpha.css';
@import '@radix-ui/colors/sand-dark-alpha.css';

:root {
  --sand-contrast: white;
}

:root,
.light,
.light-theme {
  --sand-surface: #ffffffcc;
  --sand-indicator: var(--sand-9);
  --sand-track: var(--sand-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --sand-surface: color(display-p3 1 1 1 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --sand-surface: #21212080;
  --sand-indicator: var(--sand-9);
  --sand-track: var(--sand-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --sand-surface: color(display-p3 0.1255 0.1255 0.1255 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/sky.css
================================================
@import '@radix-ui/colors/sky.css';
@import '@radix-ui/colors/sky-dark.css';
@import '@radix-ui/colors/sky-alpha.css';
@import '@radix-ui/colors/sky-dark-alpha.css';

:root {
  --sky-contrast: #1c2024; /* light mode slate 12 */
}

:root,
.light,
.light-theme {
  --sky-surface: #eef9fdcc;
  --sky-indicator: var(--sky-9);
  --sky-track: var(--sky-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --sky-surface: color(display-p3 0.9412 0.9765 0.9843 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --sky-surface: #13233b80;
  --sky-indicator: var(--sky-9);
  --sky-track: var(--sky-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --sky-surface: color(display-p3 0.0863 0.1333 0.2196 / 0.5);
    }
  }
  @supports (color: color-mix(in oklab, white, black)) {
    --sky-track: color-mix(in oklab, var(--sky-8), var(--sky-9) 65%);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/slate.css
================================================
@import '@radix-ui/colors/slate.css';
@import '@radix-ui/colors/slate-dark.css';
@import '@radix-ui/colors/slate-alpha.css';
@import '@radix-ui/colors/slate-dark-alpha.css';

:root {
  --slate-contrast: white;
}

:root,
.light,
.light-theme {
  --slate-surface: #ffffffcc;
  --slate-indicator: var(--slate-9);
  --slate-track: var(--slate-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --slate-surface: color(display-p3 1 1 1 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --slate-surface: #1f212380;
  --slate-indicator: var(--slate-9);
  --slate-track: var(--slate-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --slate-surface: color(display-p3 0.1176 0.1255 0.1333 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/teal.css
================================================
@import '@radix-ui/colors/teal.css';
@import '@radix-ui/colors/teal-dark.css';
@import '@radix-ui/colors/teal-alpha.css';
@import '@radix-ui/colors/teal-dark-alpha.css';

:root {
  --teal-contrast: white;
}

:root,
.light,
.light-theme {
  --teal-surface: #f0faf8cc;
  --teal-indicator: var(--teal-9);
  --teal-track: var(--teal-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --teal-surface: color(display-p3 0.9451 0.9804 0.9725 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --teal-surface: #13272580;
  --teal-indicator: var(--teal-9);
  --teal-track: var(--teal-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --teal-surface: color(display-p3 0.0863 0.149 0.1412 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/tomato.css
================================================
@import '@radix-ui/colors/tomato.css';
@import '@radix-ui/colors/tomato-dark.css';
@import '@radix-ui/colors/tomato-alpha.css';
@import '@radix-ui/colors/tomato-dark-alpha.css';

:root {
  --tomato-contrast: white;
}

:root,
.light,
.light-theme {
  --tomato-surface: #fff6f5cc;
  --tomato-indicator: var(--tomato-9);
  --tomato-track: var(--tomato-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --tomato-surface: color(display-p3 0.9922 0.9647 0.9608 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --tomato-surface: #2d191580;
  --tomato-indicator: var(--tomato-9);
  --tomato-track: var(--tomato-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --tomato-surface: color(display-p3 0.1569 0.0941 0.0784 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/violet.css
================================================
@import '@radix-ui/colors/violet.css';
@import '@radix-ui/colors/violet-dark.css';
@import '@radix-ui/colors/violet-alpha.css';
@import '@radix-ui/colors/violet-dark-alpha.css';

:root {
  --violet-contrast: white;
}

:root,
.light,
.light-theme {
  --violet-surface: #f9f6ffcc;
  --violet-indicator: var(--violet-9);
  --violet-track: var(--violet-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --violet-surface: color(display-p3 0.9725 0.9647 0.9961 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --violet-surface: #25193980;
  --violet-indicator: var(--violet-9);
  --violet-track: var(--violet-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --violet-surface: color(display-p3 0.1333 0.102 0.2118 / 0.5);
    }
  }
}


================================================
File: packages/radix-ui-themes/src/styles/tokens/colors/yellow.css
================================================
@import '@radix-ui/colors/yellow.css';
@import '@radix-ui/colors/yellow-dark.css';
@import '@radix-ui/colors/yellow-alpha.css';
@import '@radix-ui/colors/yellow-dark-alpha.css';

:root {
  --yellow-contrast: #21201c; /* light mode sand 12 */
}

:root,
.light,
.light-theme {
  --yellow-surface: #fefbe4cc;
  --yellow-indicator: var(--yellow-10);
  --yellow-track: var(--yellow-10);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --yellow-surface: color(display-p3 0.9961 0.9922 0.902 / 0.8);
    }
  }
}

.dark,
.dark-theme {
  --yellow-surface: #231f1380;
  --yellow-indicator: var(--yellow-9);
  --yellow-track: var(--yellow-9);
  @supports (color: color(display-p3 1 1 1)) {
    @media (color-gamut: p3) {
      --yellow-surface: color(display-p3 0.1333 0.1176 0.0706 / 0.5);
    }
  }
  @supports (color: color-mix(in oklab, white, black)) {
    --yellow-track: color-mix(in oklab, var(--yellow-8), var(--yellow-9) 65%);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/align-items.css
================================================
@breakpoints {
  .rt-r-ai-start {
    align-items: flex-start;
  }

  .rt-r-ai-center {
    align-items: center;
  }

  .rt-r-ai-end {
    align-items: flex-end;
  }

  .rt-r-ai-baseline {
    align-items: baseline;
  }

  .rt-r-ai-stretch {
    align-items: stretch;
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/align-self.css
================================================
@breakpoints {
  .rt-r-as-start {
    align-self: flex-start;
  }

  .rt-r-as-center {
    align-self: center;
  }

  .rt-r-as-end {
    align-self: flex-end;
  }

  .rt-r-as-baseline {
    align-self: baseline;
  }

  .rt-r-as-stretch {
    align-self: stretch;
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/display.css
================================================
@breakpoints {
  .rt-r-display-block {
    display: block;
  }

  .rt-r-display-inline {
    display: inline;
  }

  .rt-r-display-inline-block {
    display: inline-block;
  }

  .rt-r-display-flex {
    display: flex;
  }

  .rt-r-display-inline-flex {
    display: inline-flex;
  }

  .rt-r-display-grid {
    display: grid;
  }

  .rt-r-display-inline-grid {
    display: inline-grid;
  }

  .rt-r-display-none {
    display: none;
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/flex-basis.css
================================================
.rt-r-fb {
  flex-basis: var(--flex-basis);
}
@media (--xs) {
  .xs\:rt-r-fb {
    flex-basis: var(--flex-basis-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-fb {
    flex-basis: var(--flex-basis-sm);
  }
}
@media (--md) {
  .md\:rt-r-fb {
    flex-basis: var(--flex-basis-md);
  }
}
@media (--lg) {
  .lg\:rt-r-fb {
    flex-basis: var(--flex-basis-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-fb {
    flex-basis: var(--flex-basis-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/flex-direction.css
================================================
@breakpoints {
  .rt-r-fd-row {
    flex-direction: row;
  }

  .rt-r-fd-column {
    flex-direction: column;
  }

  .rt-r-fd-row-reverse {
    flex-direction: row-reverse;
  }

  .rt-r-fd-column-reverse {
    flex-direction: column-reverse;
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/flex-grow.css
================================================
@breakpoints {
  .rt-r-fg {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-fg-0 {
    flex-grow: 0;
  }
  .rt-r-fg-1 {
    flex-grow: 1;
  }
}

.rt-r-fg {
  flex-grow: var(--flex-grow);
}
@media (--xs) {
  .xs\:rt-r-fg {
    flex-grow: var(--flex-grow-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-fg {
    flex-grow: var(--flex-grow-sm);
  }
}
@media (--md) {
  .md\:rt-r-fg {
    flex-grow: var(--flex-grow-md);
  }
}
@media (--lg) {
  .lg\:rt-r-fg {
    flex-grow: var(--flex-grow-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-fg {
    flex-grow: var(--flex-grow-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/flex-shrink.css
================================================
@breakpoints {
  .rt-r-fs {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-fs-0 {
    flex-shrink: 0;
  }
  .rt-r-fs-1 {
    flex-shrink: 1;
  }
}

.rt-r-fs {
  flex-shrink: var(--flex-shrink);
}
@media (--xs) {
  .xs\:rt-r-fs {
    flex-shrink: var(--flex-shrink-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-fs {
    flex-shrink: var(--flex-shrink-sm);
  }
}
@media (--md) {
  .md\:rt-r-fs {
    flex-shrink: var(--flex-shrink-md);
  }
}
@media (--lg) {
  .lg\:rt-r-fs {
    flex-shrink: var(--flex-shrink-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-fs {
    flex-shrink: var(--flex-shrink-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/flex-wrap.css
================================================
@breakpoints {
  .rt-r-fw-nowrap {
    flex-wrap: nowrap;
  }

  .rt-r-fw-wrap {
    flex-wrap: wrap;
  }

  .rt-r-fw-wrap-reverse {
    flex-wrap: wrap-reverse;
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/font-weight.css
================================================
@breakpoints {
  .rt-r-weight-light {
    font-weight: var(--font-weight-light);
  }

  .rt-r-weight-regular {
    font-weight: var(--font-weight-regular);
  }

  .rt-r-weight-medium {
    font-weight: var(--font-weight-medium);
  }

  .rt-r-weight-bold {
    font-weight: var(--font-weight-bold);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/gap.css
================================================
@breakpoints {
  .rt-r-gap {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-gap-0 {
    gap: 0;
  }
  .rt-r-gap-1 {
    gap: var(--space-1);
  }
  .rt-r-gap-2 {
    gap: var(--space-2);
  }
  .rt-r-gap-3 {
    gap: var(--space-3);
  }
  .rt-r-gap-4 {
    gap: var(--space-4);
  }
  .rt-r-gap-5 {
    gap: var(--space-5);
  }
  .rt-r-gap-6 {
    gap: var(--space-6);
  }
  .rt-r-gap-7 {
    gap: var(--space-7);
  }
  .rt-r-gap-8 {
    gap: var(--space-8);
  }
  .rt-r-gap-9 {
    gap: var(--space-9);
  }
  .rt-r-cg {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-cg-0 {
    column-gap: 0;
  }
  .rt-r-cg-1 {
    column-gap: var(--space-1);
  }
  .rt-r-cg-2 {
    column-gap: var(--space-2);
  }
  .rt-r-cg-3 {
    column-gap: var(--space-3);
  }
  .rt-r-cg-4 {
    column-gap: var(--space-4);
  }
  .rt-r-cg-5 {
    column-gap: var(--space-5);
  }
  .rt-r-cg-6 {
    column-gap: var(--space-6);
  }
  .rt-r-cg-7 {
    column-gap: var(--space-7);
  }
  .rt-r-cg-8 {
    column-gap: var(--space-8);
  }
  .rt-r-cg-9 {
    column-gap: var(--space-9);
  }
  .rt-r-rg {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-rg-0 {
    row-gap: 0;
  }
  .rt-r-rg-1 {
    row-gap: var(--space-1);
  }
  .rt-r-rg-2 {
    row-gap: var(--space-2);
  }
  .rt-r-rg-3 {
    row-gap: var(--space-3);
  }
  .rt-r-rg-4 {
    row-gap: var(--space-4);
  }
  .rt-r-rg-5 {
    row-gap: var(--space-5);
  }
  .rt-r-rg-6 {
    row-gap: var(--space-6);
  }
  .rt-r-rg-7 {
    row-gap: var(--space-7);
  }
  .rt-r-rg-8 {
    row-gap: var(--space-8);
  }
  .rt-r-rg-9 {
    row-gap: var(--space-9);
  }
}

.rt-r-gap {
  gap: var(--gap);
}
.rt-r-cg {
  column-gap: var(--column-gap);
}
.rt-r-rg {
  row-gap: var(--row-gap);
}
@media (--xs) {
  .xs\:rt-r-gap {
    gap: var(--gap-xs);
  }
  .xs\:rt-r-cg {
    column-gap: var(--column-gap-xs);
  }
  .xs\:rt-r-rg {
    row-gap: var(--row-gap-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-gap {
    gap: var(--gap-sm);
  }
  .sm\:rt-r-cg {
    column-gap: var(--column-gap-sm);
  }
  .sm\:rt-r-rg {
    row-gap: var(--row-gap-sm);
  }
}
@media (--md) {
  .md\:rt-r-gap {
    gap: var(--gap-md);
  }
  .md\:rt-r-cg {
    column-gap: var(--column-gap-md);
  }
  .md\:rt-r-rg {
    row-gap: var(--row-gap-md);
  }
}
@media (--lg) {
  .lg\:rt-r-gap {
    gap: var(--gap-lg);
  }
  .lg\:rt-r-cg {
    column-gap: var(--column-gap-lg);
  }
  .lg\:rt-r-rg {
    row-gap: var(--row-gap-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-gap {
    gap: var(--gap-xl);
  }
  .xl\:rt-r-cg {
    column-gap: var(--column-gap-xl);
  }
  .xl\:rt-r-rg {
    row-gap: var(--row-gap-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/grid-area.css
================================================
.rt-r-ga {
  grid-area: var(--grid-area);
}

@media (--xs) {
  .xs\:rt-r-ga {
    grid-area: var(--grid-area-xs);
  }
}

@media (--sm) {
  .sm\:rt-r-ga {
    grid-area: var(--grid-area-sm);
  }
}

@media (--md) {
  .md\:rt-r-ga {
    grid-area: var(--grid-area-md);
  }
}

@media (--lg) {
  .lg\:rt-r-ga {
    grid-area: var(--grid-area-lg);
  }
}

@media (--xl) {
  .xl\:rt-r-ga {
    grid-area: var(--grid-area-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/grid-auto-flow.css
================================================
@breakpoints {
  .rt-r-gaf-row {
    grid-auto-flow: row;
  }

  .rt-r-gaf-column {
    grid-auto-flow: column;
  }

  .rt-r-gaf-dense {
    grid-auto-flow: dense;
  }

  .rt-r-gaf-row-dense {
    grid-auto-flow: row dense;
  }

  .rt-r-gaf-column-dense {
    grid-auto-flow: column dense;
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/grid-column-end.css
================================================
@breakpoints {
  .rt-r-gce {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-gce-1 {
    grid-column-end: 1;
  }
  .rt-r-gce-2 {
    grid-column-end: 2;
  }
  .rt-r-gce-3 {
    grid-column-end: 3;
  }
  .rt-r-gce-4 {
    grid-column-end: 4;
  }
  .rt-r-gce-5 {
    grid-column-end: 5;
  }
  .rt-r-gce-6 {
    grid-column-end: 6;
  }
  .rt-r-gce-7 {
    grid-column-end: 7;
  }
  .rt-r-gce-8 {
    grid-column-end: 8;
  }
  .rt-r-gce-9 {
    grid-column-end: 9;
  }
}

.rt-r-gce {
  grid-column-end: var(--grid-column-end);
}
@media (--xs) {
  .xs\:rt-r-gce {
    grid-column-end: var(--grid-column-end-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-gce {
    grid-column-end: var(--grid-column-end-sm);
  }
}
@media (--md) {
  .md\:rt-r-gce {
    grid-column-end: var(--grid-column-end-md);
  }
}
@media (--lg) {
  .lg\:rt-r-gce {
    grid-column-end: var(--grid-column-end-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-gce {
    grid-column-end: var(--grid-column-end-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/grid-column-start.css
================================================
@breakpoints {
  .rt-r-gcs {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-gcs-1 {
    grid-column-start: 1;
  }
  .rt-r-gcs-2 {
    grid-column-start: 2;
  }
  .rt-r-gcs-3 {
    grid-column-start: 3;
  }
  .rt-r-gcs-4 {
    grid-column-start: 4;
  }
  .rt-r-gcs-5 {
    grid-column-start: 5;
  }
  .rt-r-gcs-6 {
    grid-column-start: 6;
  }
  .rt-r-gcs-7 {
    grid-column-start: 7;
  }
  .rt-r-gcs-8 {
    grid-column-start: 8;
  }
  .rt-r-gcs-9 {
    grid-column-start: 9;
  }
}

.rt-r-gcs {
  grid-column-start: var(--grid-column-start);
}
@media (--xs) {
  .xs\:rt-r-gcs {
    grid-column-start: var(--grid-column-start-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-gcs {
    grid-column-start: var(--grid-column-start-sm);
  }
}
@media (--md) {
  .md\:rt-r-gcs {
    grid-column-start: var(--grid-column-start-md);
  }
}
@media (--lg) {
  .lg\:rt-r-gcs {
    grid-column-start: var(--grid-column-start-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-gcs {
    grid-column-start: var(--grid-column-start-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/grid-column.css
================================================
@breakpoints {
  .rt-r-gc {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-gc-1 {
    grid-column: 1;
  }
  .rt-r-gc-2 {
    grid-column: 2;
  }
  .rt-r-gc-3 {
    grid-column: 3;
  }
  .rt-r-gc-4 {
    grid-column: 4;
  }
  .rt-r-gc-5 {
    grid-column: 5;
  }
  .rt-r-gc-6 {
    grid-column: 6;
  }
  .rt-r-gc-7 {
    grid-column: 7;
  }
  .rt-r-gc-8 {
    grid-column: 8;
  }
  .rt-r-gc-9 {
    grid-column: 9;
  }
}

.rt-r-gc {
  grid-column: var(--grid-column);
}
@media (--xs) {
  .xs\:rt-r-gc {
    grid-column: var(--grid-column-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-gc {
    grid-column: var(--grid-column-sm);
  }
}
@media (--md) {
  .md\:rt-r-gc {
    grid-column: var(--grid-column-md);
  }
}
@media (--lg) {
  .lg\:rt-r-gc {
    grid-column: var(--grid-column-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-gc {
    grid-column: var(--grid-column-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/grid-row-end.css
================================================
@breakpoints {
  .rt-r-gre {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-gre-1 {
    grid-row-end: 1;
  }
  .rt-r-gre-2 {
    grid-row-end: 2;
  }
  .rt-r-gre-3 {
    grid-row-end: 3;
  }
  .rt-r-gre-4 {
    grid-row-end: 4;
  }
  .rt-r-gre-5 {
    grid-row-end: 5;
  }
  .rt-r-gre-6 {
    grid-row-end: 6;
  }
  .rt-r-gre-7 {
    grid-row-end: 7;
  }
  .rt-r-gre-8 {
    grid-row-end: 8;
  }
  .rt-r-gre-9 {
    grid-row-end: 9;
  }
}

.rt-r-gre {
  grid-row-end: var(--grid-row-end);
}
@media (--xs) {
  .xs\:rt-r-gre {
    grid-row-end: var(--grid-row-end-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-gre {
    grid-row-end: var(--grid-row-end-sm);
  }
}
@media (--md) {
  .md\:rt-r-gre {
    grid-row-end: var(--grid-row-end-md);
  }
}
@media (--lg) {
  .lg\:rt-r-gre {
    grid-row-end: var(--grid-row-end-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-gre {
    grid-row-end: var(--grid-row-end-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/grid-row-start.css
================================================
@breakpoints {
  .rt-r-grs {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-grs-1 {
    grid-row-start: 1;
  }
  .rt-r-grs-2 {
    grid-row-start: 2;
  }
  .rt-r-grs-3 {
    grid-row-start: 3;
  }
  .rt-r-grs-4 {
    grid-row-start: 4;
  }
  .rt-r-grs-5 {
    grid-row-start: 5;
  }
  .rt-r-grs-6 {
    grid-row-start: 6;
  }
  .rt-r-grs-7 {
    grid-row-start: 7;
  }
  .rt-r-grs-8 {
    grid-row-start: 8;
  }
  .rt-r-grs-9 {
    grid-row-start: 9;
  }
}

.rt-r-grs {
  grid-row-start: var(--grid-row-start);
}
@media (--xs) {
  .xs\:rt-r-grs {
    grid-row-start: var(--grid-row-start-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-grs {
    grid-row-start: var(--grid-row-start-sm);
  }
}
@media (--md) {
  .md\:rt-r-grs {
    grid-row-start: var(--grid-row-start-md);
  }
}
@media (--lg) {
  .lg\:rt-r-grs {
    grid-row-start: var(--grid-row-start-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-grs {
    grid-row-start: var(--grid-row-start-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/grid-row.css
================================================
@breakpoints {
  .rt-r-gr {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-gr-1 {
    grid-row: 1;
  }
  .rt-r-gr-2 {
    grid-row: 2;
  }
  .rt-r-gr-3 {
    grid-row: 3;
  }
  .rt-r-gr-4 {
    grid-row: 4;
  }
  .rt-r-gr-5 {
    grid-row: 5;
  }
  .rt-r-gr-6 {
    grid-row: 6;
  }
  .rt-r-gr-7 {
    grid-row: 7;
  }
  .rt-r-gr-8 {
    grid-row: 8;
  }
  .rt-r-gr-9 {
    grid-row: 9;
  }
}

.rt-r-gr {
  grid-row: var(--grid-row);
}
@media (--xs) {
  .xs\:rt-r-gr {
    grid-row: var(--grid-row-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-gr {
    grid-row: var(--grid-row-sm);
  }
}
@media (--md) {
  .md\:rt-r-gr {
    grid-row: var(--grid-row-md);
  }
}
@media (--lg) {
  .lg\:rt-r-gr {
    grid-row: var(--grid-row-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-gr {
    grid-row: var(--grid-row-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/grid-template-areas.css
================================================
.rt-r-gta {
  grid-template-areas: var(--grid-template-areas);
}
@media (--xs) {
  .xs\:rt-r-gta {
    grid-template-areas: var(--grid-template-areas-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-gta {
    grid-template-areas: var(--grid-template-areas-sm);
  }
}
@media (--md) {
  .md\:rt-r-gta {
    grid-template-areas: var(--grid-template-areas-md);
  }
}
@media (--lg) {
  .lg\:rt-r-gta {
    grid-template-areas: var(--grid-template-areas-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-gta {
    grid-template-areas: var(--grid-template-areas-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/grid-template-columns.css
================================================
@breakpoints {
  .rt-r-gtc {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-gtc-1 {
    grid-template-columns: minmax(0, 1fr);
  }
  .rt-r-gtc-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
  .rt-r-gtc-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
  .rt-r-gtc-4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
  .rt-r-gtc-5 {
    grid-template-columns: repeat(5, minmax(0, 1fr));
  }
  .rt-r-gtc-6 {
    grid-template-columns: repeat(6, minmax(0, 1fr));
  }
  .rt-r-gtc-7 {
    grid-template-columns: repeat(7, minmax(0, 1fr));
  }
  .rt-r-gtc-8 {
    grid-template-columns: repeat(8, minmax(0, 1fr));
  }
  .rt-r-gtc-9 {
    grid-template-columns: repeat(9, minmax(0, 1fr));
  }
}

.rt-r-gtc {
  grid-template-columns: var(--grid-template-columns);
}
@media (--xs) {
  .xs\:rt-r-gtc {
    grid-template-columns: var(--grid-template-columns-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-gtc {
    grid-template-columns: var(--grid-template-columns-sm);
  }
}
@media (--md) {
  .md\:rt-r-gtc {
    grid-template-columns: var(--grid-template-columns-md);
  }
}
@media (--lg) {
  .lg\:rt-r-gtc {
    grid-template-columns: var(--grid-template-columns-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-gtc {
    grid-template-columns: var(--grid-template-columns-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/grid-template-rows.css
================================================
@breakpoints {
  .rt-r-gtr {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-gtr-1 {
    grid-template-rows: minmax(0, 1fr);
  }
  .rt-r-gtr-2 {
    grid-template-rows: repeat(2, minmax(0, 1fr));
  }
  .rt-r-gtr-3 {
    grid-template-rows: repeat(3, minmax(0, 1fr));
  }
  .rt-r-gtr-4 {
    grid-template-rows: repeat(4, minmax(0, 1fr));
  }
  .rt-r-gtr-5 {
    grid-template-rows: repeat(5, minmax(0, 1fr));
  }
  .rt-r-gtr-6 {
    grid-template-rows: repeat(6, minmax(0, 1fr));
  }
  .rt-r-gtr-7 {
    grid-template-rows: repeat(7, minmax(0, 1fr));
  }
  .rt-r-gtr-8 {
    grid-template-rows: repeat(8, minmax(0, 1fr));
  }
  .rt-r-gtr-9 {
    grid-template-rows: repeat(9, minmax(0, 1fr));
  }
}

.rt-r-gtr {
  grid-template-rows: var(--grid-template-rows);
}
@media (--xs) {
  .xs\:rt-r-gtr {
    grid-template-rows: var(--grid-template-rows-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-gtr {
    grid-template-rows: var(--grid-template-rows-sm);
  }
}
@media (--md) {
  .md\:rt-r-gtr {
    grid-template-rows: var(--grid-template-rows-md);
  }
}
@media (--lg) {
  .lg\:rt-r-gtr {
    grid-template-rows: var(--grid-template-rows-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-gtr {
    grid-template-rows: var(--grid-template-rows-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/height.css
================================================
.rt-r-h {
  height: var(--height);
}
@media (--xs) {
  .xs\:rt-r-h {
    height: var(--height-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-h {
    height: var(--height-sm);
  }
}
@media (--md) {
  .md\:rt-r-h {
    height: var(--height-md);
  }
}
@media (--lg) {
  .lg\:rt-r-h {
    height: var(--height-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-h {
    height: var(--height-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/index.css
================================================
@import './layout.css';

@import './font-weight.css';
@import './leading-trim.css';
@import './resize.css';
@import './table-layout.css';
@import './text-align.css';
@import './text-wrap.css';
@import './truncate.css';
@import './vertical-align.css';


================================================
File: packages/radix-ui-themes/src/styles/utilities/inset.css
================================================
/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*                Inset                */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-inset {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-inset-0 {
    inset: 0;
  }
  .rt-r-inset-1 {
    inset: var(--space-1);
  }
  .rt-r-inset-2 {
    inset: var(--space-2);
  }
  .rt-r-inset-3 {
    inset: var(--space-3);
  }
  .rt-r-inset-4 {
    inset: var(--space-4);
  }
  .rt-r-inset-5 {
    inset: var(--space-5);
  }
  .rt-r-inset-6 {
    inset: var(--space-6);
  }
  .rt-r-inset-7 {
    inset: var(--space-7);
  }
  .rt-r-inset-8 {
    inset: var(--space-8);
  }
  .rt-r-inset-9 {
    inset: var(--space-9);
  }
}

.rt-r-inset {
  inset: var(--inset);
}
@media (--xs) {
  .xs\:rt-r-inset {
    inset: var(--inset-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-inset {
    inset: var(--inset-sm);
  }
}
@media (--md) {
  .md\:rt-r-inset {
    inset: var(--inset-md);
  }
}
@media (--lg) {
  .lg\:rt-r-inset {
    inset: var(--inset-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-inset {
    inset: var(--inset-xl);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*                 Top                 */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-top {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-top-0 {
    top: 0;
  }
  .rt-r-top-1 {
    top: var(--space-1);
  }
  .rt-r-top-2 {
    top: var(--space-2);
  }
  .rt-r-top-3 {
    top: var(--space-3);
  }
  .rt-r-top-4 {
    top: var(--space-4);
  }
  .rt-r-top-5 {
    top: var(--space-5);
  }
  .rt-r-top-6 {
    top: var(--space-6);
  }
  .rt-r-top-7 {
    top: var(--space-7);
  }
  .rt-r-top-8 {
    top: var(--space-8);
  }
  .rt-r-top-9 {
    top: var(--space-9);
  }
}

.rt-r-top {
  top: var(--top);
}
@media (--xs) {
  .xs\:rt-r-top {
    top: var(--top-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-top {
    top: var(--top-sm);
  }
}
@media (--md) {
  .md\:rt-r-top {
    top: var(--top-md);
  }
}
@media (--lg) {
  .lg\:rt-r-top {
    top: var(--top-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-top {
    top: var(--top-xl);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*                Right                */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-right {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-right-0 {
    right: 0;
  }
  .rt-r-right-1 {
    right: var(--space-1);
  }
  .rt-r-right-2 {
    right: var(--space-2);
  }
  .rt-r-right-3 {
    right: var(--space-3);
  }
  .rt-r-right-4 {
    right: var(--space-4);
  }
  .rt-r-right-5 {
    right: var(--space-5);
  }
  .rt-r-right-6 {
    right: var(--space-6);
  }
  .rt-r-right-7 {
    right: var(--space-7);
  }
  .rt-r-right-8 {
    right: var(--space-8);
  }
  .rt-r-right-9 {
    right: var(--space-9);
  }
}

.rt-r-right {
  right: var(--right);
}
@media (--xs) {
  .xs\:rt-r-right {
    right: var(--right-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-right {
    right: var(--right-sm);
  }
}
@media (--md) {
  .md\:rt-r-right {
    right: var(--right-md);
  }
}
@media (--lg) {
  .lg\:rt-r-right {
    right: var(--right-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-right {
    right: var(--right-xl);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*               Bottom                */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-bottom {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-bottom-0 {
    bottom: 0;
  }
  .rt-r-bottom-1 {
    bottom: var(--space-1);
  }
  .rt-r-bottom-2 {
    bottom: var(--space-2);
  }
  .rt-r-bottom-3 {
    bottom: var(--space-3);
  }
  .rt-r-bottom-4 {
    bottom: var(--space-4);
  }
  .rt-r-bottom-5 {
    bottom: var(--space-5);
  }
  .rt-r-bottom-6 {
    bottom: var(--space-6);
  }
  .rt-r-bottom-7 {
    bottom: var(--space-7);
  }
  .rt-r-bottom-8 {
    bottom: var(--space-8);
  }
  .rt-r-bottom-9 {
    bottom: var(--space-9);
  }
}

.rt-r-bottom {
  bottom: var(--bottom);
}
@media (--xs) {
  .xs\:rt-r-bottom {
    bottom: var(--bottom-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-bottom {
    bottom: var(--bottom-sm);
  }
}
@media (--md) {
  .md\:rt-r-bottom {
    bottom: var(--bottom-md);
  }
}
@media (--lg) {
  .lg\:rt-r-bottom {
    bottom: var(--bottom-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-bottom {
    bottom: var(--bottom-xl);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*                Left                 */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-left {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-left-0 {
    left: 0;
  }
  .rt-r-left-1 {
    left: var(--space-1);
  }
  .rt-r-left-2 {
    left: var(--space-2);
  }
  .rt-r-left-3 {
    left: var(--space-3);
  }
  .rt-r-left-4 {
    left: var(--space-4);
  }
  .rt-r-left-5 {
    left: var(--space-5);
  }
  .rt-r-left-6 {
    left: var(--space-6);
  }
  .rt-r-left-7 {
    left: var(--space-7);
  }
  .rt-r-left-8 {
    left: var(--space-8);
  }
  .rt-r-left-9 {
    left: var(--space-9);
  }
}

.rt-r-left {
  left: var(--left);
}
@media (--xs) {
  .xs\:rt-r-left {
    left: var(--left-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-left {
    left: var(--left-sm);
  }
}
@media (--md) {
  .md\:rt-r-left {
    left: var(--left-md);
  }
}
@media (--lg) {
  .lg\:rt-r-left {
    left: var(--left-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-left {
    left: var(--left-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/justify-content.css
================================================
@breakpoints {
  .rt-r-jc-start {
    justify-content: flex-start;
  }

  .rt-r-jc-center {
    justify-content: center;
  }

  .rt-r-jc-end {
    justify-content: flex-end;
  }

  .rt-r-jc-space-between {
    justify-content: space-between;
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/layout.css
================================================
@import '../breakpoints.css';

@import './align-items.css';
@import './align-self.css';
@import './display.css';
@import './flex-basis.css';
@import './flex-direction.css';
@import './flex-grow.css';
@import './flex-shrink.css';
@import './flex-wrap.css';
@import './gap.css';
@import './grid-area.css';
@import './grid-auto-flow.css';
@import './grid-column.css';
@import './grid-column-start.css';
@import './grid-column-end.css';
@import './grid-row.css';
@import './grid-row-start.css';
@import './grid-row-end.css';
@import './grid-template-areas.css';
@import './grid-template-columns.css';
@import './grid-template-rows.css';
@import './height.css';
@import './min-height.css';
@import './max-height.css';
@import './inset.css';
@import './justify-content.css';
@import './margin.css';
@import './overflow.css';
@import './padding.css';
@import './position.css';
@import './width.css';
@import './min-width.css';
@import './max-width.css';


================================================
File: packages/radix-ui-themes/src/styles/utilities/leading-trim.css
================================================
@breakpoints {
  .rt-r-lt-normal::before,
  .rt-r-lt-end::before,
  .rt-r-lt-normal::after,
  .rt-r-lt-start::after {
    content: none;
  }

  .rt-r-lt-start::before,
  .rt-r-lt-both::before,
  .rt-r-lt-end::after,
  .rt-r-lt-both::after {
    content: '';
    display: table;
  }

  .rt-r-lt-start::before,
  .rt-r-lt-both::before {
    margin-bottom: calc(
      var(--leading-trim-start, var(--default-leading-trim-start)) -
        var(--line-height, calc(1em * var(--default-line-height))) / 2
    );
  }

  .rt-r-lt-end::after,
  .rt-r-lt-both::after {
    margin-top: calc(
      var(--leading-trim-end, var(--default-leading-trim-end)) -
        var(--line-height, calc(1em * var(--default-line-height))) / 2
    );
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/margin.css
================================================
/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*              All sides              */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-m,
  .rt-r-m-0,
  .rt-r-m-1,
  .rt-r-m-2,
  .rt-r-m-3,
  .rt-r-m-4,
  .rt-r-m-5,
  .rt-r-m-6,
  .rt-r-m-7,
  .rt-r-m-8,
  .rt-r-m-9,
  .-rt-r-m-1,
  .-rt-r-m-2,
  .-rt-r-m-3,
  .-rt-r-m-4,
  .-rt-r-m-5,
  .-rt-r-m-6,
  .-rt-r-m-7,
  .-rt-r-m-8,
  .-rt-r-m-9 {
    margin-top: var(--margin-top-override, var(--margin-top));
    margin-right: var(--margin-right-override, var(--margin-right));
    margin-bottom: var(--margin-bottom-override, var(--margin-bottom));
    margin-left: var(--margin-left-override, var(--margin-left));
  }
  .rt-r-m {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-m-0 {
    --margin-top: 0px;
    --margin-right: 0px;
    --margin-bottom: 0px;
    --margin-left: 0px;
  }
  .rt-r-m-1 {
    --margin-top: var(--space-1);
    --margin-right: var(--space-1);
    --margin-bottom: var(--space-1);
    --margin-left: var(--space-1);
  }
  .rt-r-m-2 {
    --margin-top: var(--space-2);
    --margin-right: var(--space-2);
    --margin-bottom: var(--space-2);
    --margin-left: var(--space-2);
  }
  .rt-r-m-3 {
    --margin-top: var(--space-3);
    --margin-right: var(--space-3);
    --margin-bottom: var(--space-3);
    --margin-left: var(--space-3);
  }
  .rt-r-m-4 {
    --margin-top: var(--space-4);
    --margin-right: var(--space-4);
    --margin-bottom: var(--space-4);
    --margin-left: var(--space-4);
  }
  .rt-r-m-5 {
    --margin-top: var(--space-5);
    --margin-right: var(--space-5);
    --margin-bottom: var(--space-5);
    --margin-left: var(--space-5);
  }
  .rt-r-m-6 {
    --margin-top: var(--space-6);
    --margin-right: var(--space-6);
    --margin-bottom: var(--space-6);
    --margin-left: var(--space-6);
  }
  .rt-r-m-7 {
    --margin-top: var(--space-7);
    --margin-right: var(--space-7);
    --margin-bottom: var(--space-7);
    --margin-left: var(--space-7);
  }
  .rt-r-m-8 {
    --margin-top: var(--space-8);
    --margin-right: var(--space-8);
    --margin-bottom: var(--space-8);
    --margin-left: var(--space-8);
  }
  .rt-r-m-9 {
    --margin-top: var(--space-9);
    --margin-right: var(--space-9);
    --margin-bottom: var(--space-9);
    --margin-left: var(--space-9);
  }
  .-rt-r-m-1 {
    --margin-top: calc(-1 * var(--space-1));
    --margin-right: calc(-1 * var(--space-1));
    --margin-bottom: calc(-1 * var(--space-1));
    --margin-left: calc(-1 * var(--space-1));
  }
  .-rt-r-m-2 {
    --margin-top: calc(-1 * var(--space-2));
    --margin-right: calc(-1 * var(--space-2));
    --margin-bottom: calc(-1 * var(--space-2));
    --margin-left: calc(-1 * var(--space-2));
  }
  .-rt-r-m-3 {
    --margin-top: calc(-1 * var(--space-3));
    --margin-right: calc(-1 * var(--space-3));
    --margin-bottom: calc(-1 * var(--space-3));
    --margin-left: calc(-1 * var(--space-3));
  }
  .-rt-r-m-4 {
    --margin-top: calc(-1 * var(--space-4));
    --margin-right: calc(-1 * var(--space-4));
    --margin-bottom: calc(-1 * var(--space-4));
    --margin-left: calc(-1 * var(--space-4));
  }
  .-rt-r-m-5 {
    --margin-top: calc(-1 * var(--space-5));
    --margin-right: calc(-1 * var(--space-5));
    --margin-bottom: calc(-1 * var(--space-5));
    --margin-left: calc(-1 * var(--space-5));
  }
  .-rt-r-m-6 {
    --margin-top: calc(-1 * var(--space-6));
    --margin-right: calc(-1 * var(--space-6));
    --margin-bottom: calc(-1 * var(--space-6));
    --margin-left: calc(-1 * var(--space-6));
  }
  .-rt-r-m-7 {
    --margin-top: calc(-1 * var(--space-7));
    --margin-right: calc(-1 * var(--space-7));
    --margin-bottom: calc(-1 * var(--space-7));
    --margin-left: calc(-1 * var(--space-7));
  }
  .-rt-r-m-8 {
    --margin-top: calc(-1 * var(--space-8));
    --margin-right: calc(-1 * var(--space-8));
    --margin-bottom: calc(-1 * var(--space-8));
    --margin-left: calc(-1 * var(--space-8));
  }
  .-rt-r-m-9 {
    --margin-top: calc(-1 * var(--space-9));
    --margin-right: calc(-1 * var(--space-9));
    --margin-bottom: calc(-1 * var(--space-9));
    --margin-left: calc(-1 * var(--space-9));
  }
}
.rt-r-m {
  --margin-top: var(--m);
  --margin-right: var(--m);
  --margin-bottom: var(--m);
  --margin-left: var(--m);
}
@media (--xs) {
  .xs\:rt-r-m {
    --margin-top: var(--m-xs);
    --margin-right: var(--m-xs);
    --margin-bottom: var(--m-xs);
    --margin-left: var(--m-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-m {
    --margin-top: var(--m-sm);
    --margin-right: var(--m-sm);
    --margin-bottom: var(--m-sm);
    --margin-left: var(--m-sm);
  }
}
@media (--md) {
  .md\:rt-r-m {
    --margin-top: var(--m-md);
    --margin-right: var(--m-md);
    --margin-bottom: var(--m-md);
    --margin-left: var(--m-md);
  }
}
@media (--lg) {
  .lg\:rt-r-m {
    --margin-top: var(--m-lg);
    --margin-right: var(--m-lg);
    --margin-bottom: var(--m-lg);
    --margin-left: var(--m-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-m {
    --margin-top: var(--m-xl);
    --margin-right: var(--m-xl);
    --margin-bottom: var(--m-xl);
    --margin-left: var(--m-xl);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*           Left and right            */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-mx,
  .rt-r-mx-0,
  .rt-r-mx-1,
  .rt-r-mx-2,
  .rt-r-mx-3,
  .rt-r-mx-4,
  .rt-r-mx-5,
  .rt-r-mx-6,
  .rt-r-mx-7,
  .rt-r-mx-8,
  .rt-r-mx-9,
  .-rt-r-mx-1,
  .-rt-r-mx-2,
  .-rt-r-mx-3,
  .-rt-r-mx-4,
  .-rt-r-mx-5,
  .-rt-r-mx-6,
  .-rt-r-mx-7,
  .-rt-r-mx-8,
  .-rt-r-mx-9 {
    margin-left: var(--margin-left-override, var(--margin-left));
    margin-right: var(--margin-right-override, var(--margin-right));
  }
  .rt-r-mx {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-mx-0 {
    --margin-left: 0px;
    --margin-right: 0px;
  }
  .rt-r-mx-1 {
    --margin-left: var(--space-1);
    --margin-right: var(--space-1);
  }
  .rt-r-mx-2 {
    --margin-left: var(--space-2);
    --margin-right: var(--space-2);
  }
  .rt-r-mx-3 {
    --margin-left: var(--space-3);
    --margin-right: var(--space-3);
  }
  .rt-r-mx-4 {
    --margin-left: var(--space-4);
    --margin-right: var(--space-4);
  }
  .rt-r-mx-5 {
    --margin-left: var(--space-5);
    --margin-right: var(--space-5);
  }
  .rt-r-mx-6 {
    --margin-left: var(--space-6);
    --margin-right: var(--space-6);
  }
  .rt-r-mx-7 {
    --margin-left: var(--space-7);
    --margin-right: var(--space-7);
  }
  .rt-r-mx-8 {
    --margin-left: var(--space-8);
    --margin-right: var(--space-8);
  }
  .rt-r-mx-9 {
    --margin-left: var(--space-9);
    --margin-right: var(--space-9);
  }
  .-rt-r-mx-1 {
    --margin-left: calc(-1 * var(--space-1));
    --margin-right: calc(-1 * var(--space-1));
  }
  .-rt-r-mx-2 {
    --margin-left: calc(-1 * var(--space-2));
    --margin-right: calc(-1 * var(--space-2));
  }
  .-rt-r-mx-3 {
    --margin-left: calc(-1 * var(--space-3));
    --margin-right: calc(-1 * var(--space-3));
  }
  .-rt-r-mx-4 {
    --margin-left: calc(-1 * var(--space-4));
    --margin-right: calc(-1 * var(--space-4));
  }
  .-rt-r-mx-5 {
    --margin-left: calc(-1 * var(--space-5));
    --margin-right: calc(-1 * var(--space-5));
  }
  .-rt-r-mx-6 {
    --margin-left: calc(-1 * var(--space-6));
    --margin-right: calc(-1 * var(--space-6));
  }
  .-rt-r-mx-7 {
    --margin-left: calc(-1 * var(--space-7));
    --margin-right: calc(-1 * var(--space-7));
  }
  .-rt-r-mx-8 {
    --margin-left: calc(-1 * var(--space-8));
    --margin-right: calc(-1 * var(--space-8));
  }
  .-rt-r-mx-9 {
    --margin-left: calc(-1 * var(--space-9));
    --margin-right: calc(-1 * var(--space-9));
  }
}
.rt-r-mx {
  --margin-left: var(--ml);
  --margin-right: var(--mr);
}
@media (--xs) {
  .xs\:rt-r-mx {
    --margin-left: var(--ml-xs);
    --margin-right: var(--mr-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-mx {
    --margin-left: var(--ml-md);
    --margin-right: var(--mr-md);
  }
}
@media (--md) {
  .md\:rt-r-mx {
    --margin-left: var(--ml-md);
    --margin-right: var(--mr-md);
  }
}
@media (--lg) {
  .lg\:rt-r-mx {
    --margin-left: var(--ml-lg);
    --margin-right: var(--mr-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-mx {
    --margin-left: var(--ml-xl);
    --margin-right: var(--mr-xl);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*           Top and bottom            */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-my,
  .rt-r-my-0,
  .rt-r-my-1,
  .rt-r-my-2,
  .rt-r-my-3,
  .rt-r-my-4,
  .rt-r-my-5,
  .rt-r-my-6,
  .rt-r-my-7,
  .rt-r-my-8,
  .rt-r-my-9,
  .-rt-r-my-1,
  .-rt-r-my-2,
  .-rt-r-my-3,
  .-rt-r-my-4,
  .-rt-r-my-5,
  .-rt-r-my-6,
  .-rt-r-my-7,
  .-rt-r-my-8,
  .-rt-r-my-9 {
    margin-top: var(--margin-top-override, var(--margin-top));
    margin-bottom: var(--margin-bottom-override, var(--margin-bottom));
  }
  .rt-r-my {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-my-0 {
    --margin-top: 0px;
    --margin-bottom: 0px;
  }
  .rt-r-my-1 {
    --margin-top: var(--space-1);
    --margin-bottom: var(--space-1);
  }
  .rt-r-my-2 {
    --margin-top: var(--space-2);
    --margin-bottom: var(--space-2);
  }
  .rt-r-my-3 {
    --margin-top: var(--space-3);
    --margin-bottom: var(--space-3);
  }
  .rt-r-my-4 {
    --margin-top: var(--space-4);
    --margin-bottom: var(--space-4);
  }
  .rt-r-my-5 {
    --margin-top: var(--space-5);
    --margin-bottom: var(--space-5);
  }
  .rt-r-my-6 {
    --margin-top: var(--space-6);
    --margin-bottom: var(--space-6);
  }
  .rt-r-my-7 {
    --margin-top: var(--space-7);
    --margin-bottom: var(--space-7);
  }
  .rt-r-my-8 {
    --margin-top: var(--space-8);
    --margin-bottom: var(--space-8);
  }
  .rt-r-my-9 {
    --margin-top: var(--space-9);
    --margin-bottom: var(--space-9);
  }
  .-rt-r-my-1 {
    --margin-top: calc(-1 * var(--space-1));
    --margin-bottom: calc(-1 * var(--space-1));
  }
  .-rt-r-my-2 {
    --margin-top: calc(-1 * var(--space-2));
    --margin-bottom: calc(-1 * var(--space-2));
  }
  .-rt-r-my-3 {
    --margin-top: calc(-1 * var(--space-3));
    --margin-bottom: calc(-1 * var(--space-3));
  }
  .-rt-r-my-4 {
    --margin-top: calc(-1 * var(--space-4));
    --margin-bottom: calc(-1 * var(--space-4));
  }
  .-rt-r-my-5 {
    --margin-top: calc(-1 * var(--space-5));
    --margin-bottom: calc(-1 * var(--space-5));
  }
  .-rt-r-my-6 {
    --margin-top: calc(-1 * var(--space-6));
    --margin-bottom: calc(-1 * var(--space-6));
  }
  .-rt-r-my-7 {
    --margin-top: calc(-1 * var(--space-7));
    --margin-bottom: calc(-1 * var(--space-7));
  }
  .-rt-r-my-8 {
    --margin-top: calc(-1 * var(--space-8));
    --margin-bottom: calc(-1 * var(--space-8));
  }
  .-rt-r-my-9 {
    --margin-top: calc(-1 * var(--space-9));
    --margin-bottom: calc(-1 * var(--space-9));
  }
}
.rt-r-my {
  --margin-top: var(--mt);
  --margin-bottom: var(--mb);
}
@media (--xs) {
  .xs\:rt-r-my {
    --margin-top: var(--mt-xs);
    --margin-bottom: var(--mb-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-my {
    --margin-top: var(--mt-sm);
    --margin-bottom: var(--mb-sm);
  }
}
@media (--md) {
  .md\:rt-r-my {
    --margin-top: var(--mt-md);
    --margin-bottom: var(--mb-md);
  }
}
@media (--lg) {
  .lg\:rt-r-my {
    --margin-top: var(--mt-lg);
    --margin-bottom: var(--mb-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-my {
    --margin-top: var(--mt-xl);
    --margin-bottom: var(--mb-xl);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*                 Top                 */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-mt,
  .rt-r-mt-0,
  .rt-r-mt-1,
  .rt-r-mt-2,
  .rt-r-mt-3,
  .rt-r-mt-4,
  .rt-r-mt-5,
  .rt-r-mt-6,
  .rt-r-mt-7,
  .rt-r-mt-8,
  .rt-r-mt-9,
  .-rt-r-mt-1,
  .-rt-r-mt-2,
  .-rt-r-mt-3,
  .-rt-r-mt-4,
  .-rt-r-mt-5,
  .-rt-r-mt-6,
  .-rt-r-mt-7,
  .-rt-r-mt-8,
  .-rt-r-mt-9 {
    margin-top: var(--margin-top-override, var(--margin-top));
  }
  .rt-r-mt {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-mt-0 {
    --margin-top: 0px;
  }
  .rt-r-mt-1 {
    --margin-top: var(--space-1);
  }
  .rt-r-mt-2 {
    --margin-top: var(--space-2);
  }
  .rt-r-mt-3 {
    --margin-top: var(--space-3);
  }
  .rt-r-mt-4 {
    --margin-top: var(--space-4);
  }
  .rt-r-mt-5 {
    --margin-top: var(--space-5);
  }
  .rt-r-mt-6 {
    --margin-top: var(--space-6);
  }
  .rt-r-mt-7 {
    --margin-top: var(--space-7);
  }
  .rt-r-mt-8 {
    --margin-top: var(--space-8);
  }
  .rt-r-mt-9 {
    --margin-top: var(--space-9);
  }
  .-rt-r-mt-1 {
    --margin-top: calc(-1 * var(--space-1));
  }
  .-rt-r-mt-2 {
    --margin-top: calc(-1 * var(--space-2));
  }
  .-rt-r-mt-3 {
    --margin-top: calc(-1 * var(--space-3));
  }
  .-rt-r-mt-4 {
    --margin-top: calc(-1 * var(--space-4));
  }
  .-rt-r-mt-5 {
    --margin-top: calc(-1 * var(--space-5));
  }
  .-rt-r-mt-6 {
    --margin-top: calc(-1 * var(--space-6));
  }
  .-rt-r-mt-7 {
    --margin-top: calc(-1 * var(--space-7));
  }
  .-rt-r-mt-8 {
    --margin-top: calc(-1 * var(--space-8));
  }
  .-rt-r-mt-9 {
    --margin-top: calc(-1 * var(--space-9));
  }
}
.rt-r-mt {
  --margin-top: var(--mt);
}
@media (--xs) {
  .xs\:rt-r-mt {
    --margin-top: var(--mt-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-mt {
    --margin-top: var(--mt-sm);
  }
}
@media (--md) {
  .md\:rt-r-mt {
    --margin-top: var(--mt-md);
  }
}
@media (--lg) {
  .lg\:rt-r-mt {
    --margin-top: var(--mt-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-mt {
    --margin-top: var(--mt-xl);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*                Right                */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-mr,
  .rt-r-mr-0,
  .rt-r-mr-1,
  .rt-r-mr-2,
  .rt-r-mr-3,
  .rt-r-mr-4,
  .rt-r-mr-5,
  .rt-r-mr-6,
  .rt-r-mr-7,
  .rt-r-mr-8,
  .rt-r-mr-9,
  .-rt-r-mr-1,
  .-rt-r-mr-2,
  .-rt-r-mr-3,
  .-rt-r-mr-4,
  .-rt-r-mr-5,
  .-rt-r-mr-6,
  .-rt-r-mr-7,
  .-rt-r-mr-8,
  .-rt-r-mr-9 {
    margin-right: var(--margin-right-override, var(--margin-right));
  }
  .rt-r-mr {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-mr-0 {
    --margin-right: 0px;
  }
  .rt-r-mr-1 {
    --margin-right: var(--space-1);
  }
  .rt-r-mr-2 {
    --margin-right: var(--space-2);
  }
  .rt-r-mr-3 {
    --margin-right: var(--space-3);
  }
  .rt-r-mr-4 {
    --margin-right: var(--space-4);
  }
  .rt-r-mr-5 {
    --margin-right: var(--space-5);
  }
  .rt-r-mr-6 {
    --margin-right: var(--space-6);
  }
  .rt-r-mr-7 {
    --margin-right: var(--space-7);
  }
  .rt-r-mr-8 {
    --margin-right: var(--space-8);
  }
  .rt-r-mr-9 {
    --margin-right: var(--space-9);
  }
  .-rt-r-mr-1 {
    --margin-right: calc(-1 * var(--space-1));
  }
  .-rt-r-mr-2 {
    --margin-right: calc(-1 * var(--space-2));
  }
  .-rt-r-mr-3 {
    --margin-right: calc(-1 * var(--space-3));
  }
  .-rt-r-mr-4 {
    --margin-right: calc(-1 * var(--space-4));
  }
  .-rt-r-mr-5 {
    --margin-right: calc(-1 * var(--space-5));
  }
  .-rt-r-mr-6 {
    --margin-right: calc(-1 * var(--space-6));
  }
  .-rt-r-mr-7 {
    --margin-right: calc(-1 * var(--space-7));
  }
  .-rt-r-mr-8 {
    --margin-right: calc(-1 * var(--space-8));
  }
  .-rt-r-mr-9 {
    --margin-right: calc(-1 * var(--space-9));
  }
}
.rt-r-mr {
  --margin-right: var(--mr);
}
@media (--xs) {
  .xs\:rt-r-mr {
    --margin-right: var(--mr-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-mr {
    --margin-right: var(--mr-sm);
  }
}
@media (--md) {
  .md\:rt-r-mr {
    --margin-right: var(--mr-md);
  }
}
@media (--lg) {
  .lg\:rt-r-mr {
    --margin-right: var(--mr-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-mr {
    --margin-right: var(--mr-xl);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*               Bottom                */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-mb,
  .rt-r-mb-0,
  .rt-r-mb-1,
  .rt-r-mb-2,
  .rt-r-mb-3,
  .rt-r-mb-4,
  .rt-r-mb-5,
  .rt-r-mb-6,
  .rt-r-mb-7,
  .rt-r-mb-8,
  .rt-r-mb-9,
  .-rt-r-mb-1,
  .-rt-r-mb-2,
  .-rt-r-mb-3,
  .-rt-r-mb-4,
  .-rt-r-mb-5,
  .-rt-r-mb-6,
  .-rt-r-mb-7,
  .-rt-r-mb-8,
  .-rt-r-mb-9 {
    margin-bottom: var(--margin-bottom-override, var(--margin-bottom));
  }
  .rt-r-mb {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-mb-0 {
    --margin-bottom: 0px;
  }
  .rt-r-mb-1 {
    --margin-bottom: var(--space-1);
  }
  .rt-r-mb-2 {
    --margin-bottom: var(--space-2);
  }
  .rt-r-mb-3 {
    --margin-bottom: var(--space-3);
  }
  .rt-r-mb-4 {
    --margin-bottom: var(--space-4);
  }
  .rt-r-mb-5 {
    --margin-bottom: var(--space-5);
  }
  .rt-r-mb-6 {
    --margin-bottom: var(--space-6);
  }
  .rt-r-mb-7 {
    --margin-bottom: var(--space-7);
  }
  .rt-r-mb-8 {
    --margin-bottom: var(--space-8);
  }
  .rt-r-mb-9 {
    --margin-bottom: var(--space-9);
  }
  .-rt-r-mb-1 {
    --margin-bottom: calc(-1 * var(--space-1));
  }
  .-rt-r-mb-2 {
    --margin-bottom: calc(-1 * var(--space-2));
  }
  .-rt-r-mb-3 {
    --margin-bottom: calc(-1 * var(--space-3));
  }
  .-rt-r-mb-4 {
    --margin-bottom: calc(-1 * var(--space-4));
  }
  .-rt-r-mb-5 {
    --margin-bottom: calc(-1 * var(--space-5));
  }
  .-rt-r-mb-6 {
    --margin-bottom: calc(-1 * var(--space-6));
  }
  .-rt-r-mb-7 {
    --margin-bottom: calc(-1 * var(--space-7));
  }
  .-rt-r-mb-8 {
    --margin-bottom: calc(-1 * var(--space-8));
  }
  .-rt-r-mb-9 {
    --margin-bottom: calc(-1 * var(--space-9));
  }
}

.rt-r-mb {
  --margin-bottom: var(--mb);
}
@media (--xs) {
  .xs\:rt-r-mb {
    --margin-bottom: var(--mb-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-mb {
    --margin-bottom: var(--mb-sm);
  }
}
@media (--md) {
  .md\:rt-r-mb {
    --margin-bottom: var(--mb-md);
  }
}
@media (--lg) {
  .lg\:rt-r-mb {
    --margin-bottom: var(--mb-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-mb {
    --margin-bottom: var(--mb-xl);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*                Left                 */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-ml,
  .rt-r-ml-0,
  .rt-r-ml-1,
  .rt-r-ml-2,
  .rt-r-ml-3,
  .rt-r-ml-4,
  .rt-r-ml-5,
  .rt-r-ml-6,
  .rt-r-ml-7,
  .rt-r-ml-8,
  .rt-r-ml-9,
  .-rt-r-ml-1,
  .-rt-r-ml-2,
  .-rt-r-ml-3,
  .-rt-r-ml-4,
  .-rt-r-ml-5,
  .-rt-r-ml-6,
  .-rt-r-ml-7,
  .-rt-r-ml-8,
  .-rt-r-ml-9 {
    margin-left: var(--margin-left-override, var(--margin-left));
  }
  .rt-r-ml {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-ml-0 {
    --margin-left: 0px;
  }
  .rt-r-ml-1 {
    --margin-left: var(--space-1);
  }
  .rt-r-ml-2 {
    --margin-left: var(--space-2);
  }
  .rt-r-ml-3 {
    --margin-left: var(--space-3);
  }
  .rt-r-ml-4 {
    --margin-left: var(--space-4);
  }
  .rt-r-ml-5 {
    --margin-left: var(--space-5);
  }
  .rt-r-ml-6 {
    --margin-left: var(--space-6);
  }
  .rt-r-ml-7 {
    --margin-left: var(--space-7);
  }
  .rt-r-ml-8 {
    --margin-left: var(--space-8);
  }
  .rt-r-ml-9 {
    --margin-left: var(--space-9);
  }
  .-rt-r-ml-1 {
    --margin-left: calc(-1 * var(--space-1));
  }
  .-rt-r-ml-2 {
    --margin-left: calc(-1 * var(--space-2));
  }
  .-rt-r-ml-3 {
    --margin-left: calc(-1 * var(--space-3));
  }
  .-rt-r-ml-4 {
    --margin-left: calc(-1 * var(--space-4));
  }
  .-rt-r-ml-5 {
    --margin-left: calc(-1 * var(--space-5));
  }
  .-rt-r-ml-6 {
    --margin-left: calc(-1 * var(--space-6));
  }
  .-rt-r-ml-7 {
    --margin-left: calc(-1 * var(--space-7));
  }
  .-rt-r-ml-8 {
    --margin-left: calc(-1 * var(--space-8));
  }
  .-rt-r-ml-9 {
    --margin-left: calc(-1 * var(--space-9));
  }
}
.rt-r-ml {
  --margin-left: var(--ml);
}
@media (--xs) {
  .xs\:rt-r-ml {
    --margin-left: var(--ml-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-ml {
    --margin-left: var(--ml-sm);
  }
}
@media (--md) {
  .md\:rt-r-ml {
    --margin-left: var(--ml-md);
  }
}
@media (--lg) {
  .lg\:rt-r-ml {
    --margin-left: var(--ml-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-ml {
    --margin-left: var(--ml-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/max-height.css
================================================
.rt-r-max-h {
  max-height: var(--max-height);
}
@media (--xs) {
  .xs\:rt-r-max-h {
    max-height: var(--max-height-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-max-h {
    max-height: var(--max-height-sm);
  }
}
@media (--md) {
  .md\:rt-r-max-h {
    max-height: var(--max-height-md);
  }
}
@media (--lg) {
  .lg\:rt-r-max-h {
    max-height: var(--max-height-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-max-h {
    max-height: var(--max-height-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/max-width.css
================================================
.rt-r-max-w {
  max-width: var(--max-width);
}
@media (--xs) {
  .xs\:rt-r-max-w {
    max-width: var(--max-width-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-max-w {
    max-width: var(--max-width-sm);
  }
}
@media (--md) {
  .md\:rt-r-max-w {
    max-width: var(--max-width-md);
  }
}
@media (--lg) {
  .lg\:rt-r-max-w {
    max-width: var(--max-width-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-max-w {
    max-width: var(--max-width-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/min-height.css
================================================
.rt-r-min-h {
  min-height: var(--min-height);
}
@media (--xs) {
  .xs\:rt-r-min-h {
    min-height: var(--min-height-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-min-h {
    min-height: var(--min-height-sm);
  }
}
@media (--md) {
  .md\:rt-r-min-h {
    min-height: var(--min-height-md);
  }
}
@media (--lg) {
  .lg\:rt-r-min-h {
    min-height: var(--min-height-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-min-h {
    min-height: var(--min-height-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/min-width.css
================================================
.rt-r-min-w {
  min-width: var(--min-width);
}
@media (--xs) {
  .xs\:rt-r-min-w {
    min-width: var(--min-width-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-min-w {
    min-width: var(--min-width-sm);
  }
}
@media (--md) {
  .md\:rt-r-min-w {
    min-width: var(--min-width-md);
  }
}
@media (--lg) {
  .lg\:rt-r-min-w {
    min-width: var(--min-width-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-min-w {
    min-width: var(--min-width-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/overflow.css
================================================
@breakpoints {
  .rt-r-overflow-visible {
    overflow: visible;
  }
  .rt-r-overflow-hidden {
    overflow: hidden;
  }
  .rt-r-overflow-clip {
    overflow: clip;
  }
  .rt-r-overflow-scroll {
    overflow: scroll;
  }
  .rt-r-overflow-auto {
    overflow: auto;
  }

  .rt-r-ox-visible {
    overflow-x: visible;
  }
  .rt-r-ox-hidden {
    overflow-x: hidden;
  }
  .rt-r-ox-clip {
    overflow-x: clip;
  }
  .rt-r-ox-scroll {
    overflow-x: scroll;
  }
  .rt-r-ox-auto {
    overflow-x: auto;
  }

  .rt-r-oy-visible {
    overflow-y: visible;
  }
  .rt-r-oy-hidden {
    overflow-y: hidden;
  }
  .rt-r-oy-clip {
    overflow-y: clip;
  }
  .rt-r-oy-scroll {
    overflow-y: scroll;
  }
  .rt-r-oy-auto {
    overflow-y: auto;
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/padding.css
================================================
/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*              All sides              */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-p {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-p-0 {
    padding: 0;
  }
  .rt-r-p-1 {
    padding: var(--space-1);
  }
  .rt-r-p-2 {
    padding: var(--space-2);
  }
  .rt-r-p-3 {
    padding: var(--space-3);
  }
  .rt-r-p-4 {
    padding: var(--space-4);
  }
  .rt-r-p-5 {
    padding: var(--space-5);
  }
  .rt-r-p-6 {
    padding: var(--space-6);
  }
  .rt-r-p-7 {
    padding: var(--space-7);
  }
  .rt-r-p-8 {
    padding: var(--space-8);
  }
  .rt-r-p-9 {
    padding: var(--space-9);
  }
  .rt-r-p-inset {
    padding-top: var(--inset-padding-top);
    padding-right: var(--inset-padding-right);
    padding-bottom: var(--inset-padding-bottom);
    padding-left: var(--inset-padding-left);
  }
}

.rt-r-p {
  padding: var(--p);
}
@media (--xs) {
  .xs\:rt-r-p {
    padding: var(--p-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-p {
    padding: var(--p-sm);
  }
}
@media (--md) {
  .md\:rt-r-p {
    padding: var(--p-md);
  }
}
@media (--lg) {
  .lg\:rt-r-p {
    padding: var(--p-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-p {
    padding: var(--p-xl);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*           Left and right            */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-px {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-px-0 {
    padding-left: 0;
    padding-right: 0;
  }
  .rt-r-px-1 {
    padding-left: var(--space-1);
    padding-right: var(--space-1);
  }
  .rt-r-px-2 {
    padding-left: var(--space-2);
    padding-right: var(--space-2);
  }
  .rt-r-px-3 {
    padding-left: var(--space-3);
    padding-right: var(--space-3);
  }
  .rt-r-px-4 {
    padding-left: var(--space-4);
    padding-right: var(--space-4);
  }
  .rt-r-px-5 {
    padding-left: var(--space-5);
    padding-right: var(--space-5);
  }
  .rt-r-px-6 {
    padding-left: var(--space-6);
    padding-right: var(--space-6);
  }
  .rt-r-px-7 {
    padding-left: var(--space-7);
    padding-right: var(--space-7);
  }
  .rt-r-px-8 {
    padding-left: var(--space-8);
    padding-right: var(--space-8);
  }
  .rt-r-px-9 {
    padding-left: var(--space-9);
    padding-right: var(--space-9);
  }
  .rt-r-px-inset {
    padding-left: var(--inset-padding-left);
    padding-right: var(--inset-padding-right);
  }
}

.rt-r-px {
  padding-left: var(--pl);
  padding-right: var(--pr);
}
@media (--xs) {
  .xs\:rt-r-px {
    padding-left: var(--pl-xs);
    padding-right: var(--pr-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-px {
    padding-left: var(--pl-sm);
    padding-right: var(--pr-sm);
  }
}
@media (--md) {
  .md\:rt-r-px {
    padding-left: var(--pl-md);
    padding-right: var(--pr-md);
  }
}
@media (--lg) {
  .lg\:rt-r-px {
    padding-left: var(--pl-lg);
    padding-right: var(--pr-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-px {
    padding-left: var(--pl-xl);
    padding-right: var(--pr-xl);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*           Top and bottom            */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-py {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-py-0 {
    padding-top: 0;
    padding-bottom: 0;
  }
  .rt-r-py-1 {
    padding-top: var(--space-1);
    padding-bottom: var(--space-1);
  }
  .rt-r-py-2 {
    padding-top: var(--space-2);
    padding-bottom: var(--space-2);
  }
  .rt-r-py-3 {
    padding-top: var(--space-3);
    padding-bottom: var(--space-3);
  }
  .rt-r-py-4 {
    padding-top: var(--space-4);
    padding-bottom: var(--space-4);
  }
  .rt-r-py-5 {
    padding-top: var(--space-5);
    padding-bottom: var(--space-5);
  }
  .rt-r-py-6 {
    padding-top: var(--space-6);
    padding-bottom: var(--space-6);
  }
  .rt-r-py-7 {
    padding-top: var(--space-7);
    padding-bottom: var(--space-7);
  }
  .rt-r-py-8 {
    padding-top: var(--space-8);
    padding-bottom: var(--space-8);
  }
  .rt-r-py-9 {
    padding-top: var(--space-9);
    padding-bottom: var(--space-9);
  }
  .rt-r-py-inset {
    padding-top: var(--inset-padding-top);
    padding-bottom: var(--inset-padding-bottom);
  }
}

.rt-r-py {
  padding-top: var(--pt);
  padding-bottom: var(--pb);
}
@media (--xs) {
  .xs\:rt-r-py {
    padding-top: var(--pt-xs);
    padding-bottom: var(--pb-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-py {
    padding-top: var(--pt-sm);
    padding-bottom: var(--pb-sm);
  }
}
@media (--md) {
  .md\:rt-r-py {
    padding-top: var(--pt-md);
    padding-bottom: var(--pb-md);
  }
}
@media (--lg) {
  .lg\:rt-r-py {
    padding-top: var(--pt-lg);
    padding-bottom: var(--pb-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-py {
    padding-top: var(--pt-xl);
    padding-bottom: var(--pb-xl);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*                 Top                 */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-pt {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-pt-0 {
    padding-top: 0;
  }
  .rt-r-pt-1 {
    padding-top: var(--space-1);
  }
  .rt-r-pt-2 {
    padding-top: var(--space-2);
  }
  .rt-r-pt-3 {
    padding-top: var(--space-3);
  }
  .rt-r-pt-4 {
    padding-top: var(--space-4);
  }
  .rt-r-pt-5 {
    padding-top: var(--space-5);
  }
  .rt-r-pt-6 {
    padding-top: var(--space-6);
  }
  .rt-r-pt-7 {
    padding-top: var(--space-7);
  }
  .rt-r-pt-8 {
    padding-top: var(--space-8);
  }
  .rt-r-pt-9 {
    padding-top: var(--space-9);
  }
  .rt-r-pt-inset {
    padding-top: var(--inset-padding-top);
  }
}

.rt-r-pt {
  padding-top: var(--pt);
}
@media (--xs) {
  .xs\:rt-r-pt {
    padding-top: var(--pt-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-pt {
    padding-top: var(--pt-sm);
  }
}
@media (--md) {
  .md\:rt-r-pt {
    padding-top: var(--pt-md);
  }
}
@media (--lg) {
  .lg\:rt-r-pt {
    padding-top: var(--pt-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-pt {
    padding-top: var(--pt-xl);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*                Right                */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-pr {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-pr-0 {
    padding-right: 0;
  }
  .rt-r-pr-1 {
    padding-right: var(--space-1);
  }
  .rt-r-pr-2 {
    padding-right: var(--space-2);
  }
  .rt-r-pr-3 {
    padding-right: var(--space-3);
  }
  .rt-r-pr-4 {
    padding-right: var(--space-4);
  }
  .rt-r-pr-5 {
    padding-right: var(--space-5);
  }
  .rt-r-pr-6 {
    padding-right: var(--space-6);
  }
  .rt-r-pr-7 {
    padding-right: var(--space-7);
  }
  .rt-r-pr-8 {
    padding-right: var(--space-8);
  }
  .rt-r-pr-9 {
    padding-right: var(--space-9);
  }
  .rt-r-pr-inset {
    padding-right: var(--inset-padding-right);
  }
}

.rt-r-pr {
  padding-right: var(--pr);
}
@media (--xs) {
  .xs\:rt-r-pr {
    padding-right: var(--pr-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-pr {
    padding-right: var(--pr-sm);
  }
}
@media (--md) {
  .md\:rt-r-pr {
    padding-right: var(--pr-md);
  }
}
@media (--lg) {
  .lg\:rt-r-pr {
    padding-right: var(--pr-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-pr {
    padding-right: var(--pr-xl);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*               Bottom                */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-pb {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-pb-0 {
    padding-bottom: 0;
  }
  .rt-r-pb-1 {
    padding-bottom: var(--space-1);
  }
  .rt-r-pb-2 {
    padding-bottom: var(--space-2);
  }
  .rt-r-pb-3 {
    padding-bottom: var(--space-3);
  }
  .rt-r-pb-4 {
    padding-bottom: var(--space-4);
  }
  .rt-r-pb-5 {
    padding-bottom: var(--space-5);
  }
  .rt-r-pb-6 {
    padding-bottom: var(--space-6);
  }
  .rt-r-pb-7 {
    padding-bottom: var(--space-7);
  }
  .rt-r-pb-8 {
    padding-bottom: var(--space-8);
  }
  .rt-r-pb-9 {
    padding-bottom: var(--space-9);
  }
  .rt-r-pb-inset {
    padding-bottom: var(--inset-padding-bottom);
  }
}

.rt-r-pb {
  padding-bottom: var(--pb);
}
@media (--xs) {
  .xs\:rt-r-pb {
    padding-bottom: var(--pb-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-pb {
    padding-bottom: var(--pb-sm);
  }
}
@media (--md) {
  .md\:rt-r-pb {
    padding-bottom: var(--pb-md);
  }
}
@media (--lg) {
  .lg\:rt-r-pb {
    padding-bottom: var(--pb-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-pb {
    padding-bottom: var(--pb-xl);
  }
}

/* * * * * * * * * * * * * * * * * * * */
/*                                     */
/*                Left                 */
/*                                     */
/* * * * * * * * * * * * * * * * * * * */

@breakpoints {
  .rt-r-pl {
    /* Keep this selector here to maintain the source order */
  }
  .rt-r-pl-0 {
    padding-left: 0;
  }
  .rt-r-pl-1 {
    padding-left: var(--space-1);
  }
  .rt-r-pl-2 {
    padding-left: var(--space-2);
  }
  .rt-r-pl-3 {
    padding-left: var(--space-3);
  }
  .rt-r-pl-4 {
    padding-left: var(--space-4);
  }
  .rt-r-pl-5 {
    padding-left: var(--space-5);
  }
  .rt-r-pl-6 {
    padding-left: var(--space-6);
  }
  .rt-r-pl-7 {
    padding-left: var(--space-7);
  }
  .rt-r-pl-8 {
    padding-left: var(--space-8);
  }
  .rt-r-pl-9 {
    padding-left: var(--space-9);
  }
  .rt-r-pl-inset {
    padding-left: var(--inset-padding-left);
  }
}

.rt-r-pl {
  padding-left: var(--pl);
}
@media (--xs) {
  .xs\:rt-r-pl {
    padding-left: var(--pl-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-pl {
    padding-left: var(--pl-sm);
  }
}
@media (--md) {
  .md\:rt-r-pl {
    padding-left: var(--pl-md);
  }
}
@media (--lg) {
  .lg\:rt-r-pl {
    padding-left: var(--pl-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-pl {
    padding-left: var(--pl-xl);
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/position.css
================================================
@breakpoints {
  .rt-r-position-static {
    position: static;
  }

  .rt-r-position-absolute {
    position: absolute;
  }

  .rt-r-position-relative {
    position: relative;
  }

  .rt-r-position-fixed {
    position: fixed;
  }

  .rt-r-position-sticky {
    position: sticky;
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/resize.css
================================================
@breakpoints {
  .rt-r-resize-none {
    resize: none;
  }
  .rt-r-resize-vertical {
    resize: vertical;
  }
  .rt-r-resize-horizontal {
    resize: horizontal;
  }
  .rt-r-resize-both {
    resize: both;
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/table-layout.css
================================================
@breakpoints {
  .rt-r-tl-auto {
    table-layout: auto;
  }
  .rt-r-tl-fixed {
    table-layout: fixed;
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/text-align.css
================================================
@breakpoints {
  .rt-r-ta-left {
    text-align: left;
  }

  .rt-r-ta-center {
    text-align: center;
  }

  .rt-r-ta-right {
    text-align: right;
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/text-wrap.css
================================================
/*
 * We are modeling this after the "text-wrap" property, but use "white-space" because it has better support as of 2024.
 */
@breakpoints {
  .rt-r-tw-wrap {
    white-space: normal;
  }
  .rt-r-tw-nowrap {
    white-space: nowrap;
  }
  .rt-r-tw-pretty {
    white-space: normal;
    text-wrap: pretty;
  }
  .rt-r-tw-balance {
    white-space: normal;
    text-wrap: balance;
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/truncate.css
================================================
.rt-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/vertical-align.css
================================================
@breakpoints {
  .rt-r-va-baseline {
    vertical-align: baseline;
  }

  .rt-r-va-top {
    vertical-align: top;
  }

  .rt-r-va-middle {
    vertical-align: middle;
  }

  .rt-r-va-bottom {
    vertical-align: bottom;
  }
}


================================================
File: packages/radix-ui-themes/src/styles/utilities/width.css
================================================
.rt-r-w {
  width: var(--width);
}
@media (--xs) {
  .xs\:rt-r-w {
    width: var(--width-xs);
  }
}
@media (--sm) {
  .sm\:rt-r-w {
    width: var(--width-sm);
  }
}
@media (--md) {
  .md\:rt-r-w {
    width: var(--width-md);
  }
}
@media (--lg) {
  .lg\:rt-r-w {
    width: var(--width-lg);
  }
}
@media (--xl) {
  .xl\:rt-r-w {
    width: var(--width-xl);
  }
}


================================================
File: .github/CONTRIBUTING.md
================================================
# Contributing to Radix Themes

## Code of Conduct

Radix has adopted the [Contributor Covenant](https://www.contributor-covenant.org/) as its Code of Conduct, and we expect project participants to adhere to it.

Please read [the full text](/CODE_OF_CONDUCT.md) so that you can understand what actions will and will not be tolerated.

## Heuristics

[heuristic](<https://en.wikipedia.org/wiki/Heuristic_(computer_science)>)
/ˌhjʊ(ə)ˈrɪstɪk/

> A technique designed for solving a problem more quickly when classic methods are too slow, or for finding an approximate solution when classic methods fail to find any exact solution

- Priority is the best User Experience
- Complexity should be introduced when it’s inevitable
- Code should be easy to reason about
- Code should be easy to delete
- Avoid abstracting too early
- Avoid thinking too far in the future

## Questions

If you have questions about Radix Themes, be sure to check out the docs where we have several examples and detailed API references that may help you solve your problem. You can also share your questions on [GitHub Discussions](https://github.com/radix-ui/themes/discussions).

## How to contribute

There are many ways to contribute to the project. Code is just one possible means of contribution.

- **Feedback.** Tell us what we're doing well or where we can improve.
- **Support.** You can answer questions on StackOverflow or [GitHub Discussions](https://github.com/radix-ui/themes/discussions), or provide solutions for others in [open issues](https://github.com/radix-ui/themes/issues).
- **Write.** If you come up with an interesting example, write about it. Post it to your blog and share it with us. We'd love to see what folks in the community build with Radix Themes!
- **Report.** Create issues with bug reports so we can make Radix Themes even better.

## Working on your first Pull Request?

There are a lot of great resources on creating a good pull request. We've included a few below, but don't be shy—we appreciate all contributions and are happy to help those who are willing to help us!

- [How to Contribute to a Project on GitHub](https://egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github)

## Preparing a Pull Request

[Pull Requests](https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request) are always welcome, but before working on a large change, it is best to open an issue first to discuss it with maintainers.

A good PR is small, focuses on a single feature or improvement, and clearly communicates the problem it solves. Try not to include more than one issue in a single PR. It's much easier for us to review multiple small pull requests than one that is large and unwieldy.

1. [Fork the repository](https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/fork-a-repo).

2. Clone the fork to your local machine and add upstream remote:

```sh
git clone https://github.com/<your username>/themes.git
cd themes
git remote add upstream https://github.com/radix-ui/themes.git
```

1. Synchronize your local `main` branch with the upstream remote:

```sh
git checkout main
git pull upstream main
```

1. Make sure your Node version matches the [.nvmrc](../.nvmrc).

```
node -v
```

1. Install dependencies with [pnpm](https://pnpm.io):

```sh
pnpm install
```

1. Create a new branch related to your PR:

```sh
git checkout -b my-bug-fix
```

6. Make changes, then commit and push to your forked repository:

```sh
git push -u origin HEAD
```

7. Go to [the repository](https://github.com/radix-ui/themes/pulls) and [make a Pull Request](https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request).

8. We will review your Pull Request and either merge it, request changes to it, or close it with an explanation.

## Working locally

The repo is managed with [pnpm Workspaces](https://pnpm.io/workspaces).

### Development

```bash
# install dependencies
pnpm install

# start playground and see examples in the browser
pnpm dev
```

After staring the development server, navigate to `http://localhost:3000/sink` to view the playground. Visit other demos by navigating to pages in the app directory (./app/\*), such as `/demo`, `/explore-components`, `/home-os`.

Make your changes and check that they resolve the problem with an example in `/sink` or another demo page. If there are no examples in the playground to support your change, we suggest adding one and then running local development to make sure nothing is broken.

Lastly, run `pnpm build` to ensure that the build runs successfully before submitting the pull request.


================================================
File: .github/PULL_REQUEST_TEMPLATE.md
================================================
<!--

Thank you for contributing! Please follow the steps below to help us process your PR quickly.

- 📝 Use a meaningful title for the pull request and include the name of the package modified.
- 🔍 Add or edit demo examples in ./app/sink or other pages to reflect the change (run `pnpm dev`).
- 🙏 Please review your own PR to check for anything you may have missed.

-->

## Description

<!-- Describe the change you are introducing -->

## Testing steps

<!-- Describe step by step how to test the change being introduced -->

## Relates issues / PRs

<!-- List out related issues and PR links -->


